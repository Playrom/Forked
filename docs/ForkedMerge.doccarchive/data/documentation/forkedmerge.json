{"kind":"symbol","sections":[],"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"generated":true,"anchor":"Protocols","title":"Protocols"},{"title":"Structures","generated":true,"anchor":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"anchor":"Enumerations","generated":true,"title":"Enumerations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/forkedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"module","roleHeading":"Framework","modules":[{"name":"ForkedMerge"}],"title":"ForkedMerge","role":"collection","externalID":"ForkedMerge"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"title":"PropertyBacking","url":"\/documentation\/forkedmerge\/propertybacking","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"text":" ","type":"text"},{"type":"text","text":"systems for merging. They maintain the information they need (eg history)"},{"text":" ","type":"text"},{"type":"text","text":"to properly merge even if with copies that have conflicting changes."}],"navigatorTitle":[{"text":"PropertyBacking","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"abstract":[{"text":"Represents a mergable type for a dictionary of values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Uses a CRDT algorithm."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","title":"MergeableDictionary","type":"topic","url":"\/documentation\/forkedmerge\/mergeabledictionary","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableDictionary","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"title":"Merger","url":"\/documentation\/forkedmerge\/merger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"type":"text","text":" "},{"text":"diffing against a common ancestor.","type":"text"}],"navigatorTitle":[{"text":"Merger","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Merger"}]},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","title":"DictionaryMerger","type":"topic","url":"\/documentation\/forkedmerge\/dictionarymerger","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DictionaryMerger","kind":"identifier"}],"navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"title":"TextMerger","url":"\/documentation\/forkedmerge\/textmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","kind":"symbol","type":"topic","abstract":[],"navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TextMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"title":"PropertyMerge","abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"code":"Merger","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PropertyMerge"}],"role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"type":"topic","abstract":[{"text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"text":" ","type":"text"},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","url":"\/documentation\/forkedmerge\/mergeablevalue","kind":"symbol","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableValue","kind":"identifier"}],"title":"MergeableValue"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"abstract":[{"type":"text","text":"Observed-Remove Set. Can add and remove like a normal set."},{"type":"text","text":" "},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"title":"MergeableSet","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MergeableSet","kind":"identifier"}],"role":"symbol","url":"\/documentation\/forkedmerge\/mergeableset","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","title":"SetMerger","url":"\/documentation\/forkedmerge\/setmerger","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetMerger","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SetMerger"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","url":"\/documentation\/forkedmerge\/arraymerger","abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayMerger"}],"title":"ArrayMerger","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ArrayMerger","kind":"identifier"}]}}}