{"hierarchy":{"paths":[[]]},"metadata":{"modules":[{"name":"ForkedMerge"}],"role":"collection","externalID":"ForkedMerge","roleHeading":"Framework","symbolKind":"module","title":"ForkedMerge"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge"]}],"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"anchor":"Protocols","generated":true,"title":"Protocols","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"]},{"anchor":"Structures","generated":true,"title":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"anchor":"Enumerations","title":"Enumerations"}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"title":"DictionaryMerger","url":"\/documentation\/forkedmerge\/dictionarymerger","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DictionaryMerger","kind":"identifier"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"title":"MergeableValue","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableValue","kind":"identifier"}],"abstract":[{"text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it.","type":"text"},{"text":" ","type":"text"},{"text":"This allows the type to automatically merge simply by choosing the value that was written later.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablevalue","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","title":"ForkedMerge","type":"topic","role":"collection","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"role":"symbol","title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableSet","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","type":"topic","title":"MergeableSet","url":"\/documentation\/forkedmerge\/mergeableset","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableSet"}],"kind":"symbol","abstract":[{"text":"Observed-Remove Set. Can add and remove like a normal set.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}]},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TextMerger","kind":"identifier"}],"title":"TextMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","role":"symbol","url":"\/documentation\/forkedmerge\/textmerger","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"TextMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","kind":"symbol","url":"\/documentation\/forkedmerge\/setmerger","title":"SetMerger","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SetMerger"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"type":"topic","title":"PropertyBacking","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PropertyBacking","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PropertyBacking"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","url":"\/documentation\/forkedmerge\/propertybacking","role":"symbol","abstract":[{"text":"The storage used for a property. These storage types have built in","type":"text"},{"text":" ","type":"text"},{"text":"systems for merging. They maintain the information they need (eg history)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to properly merge even if with copies that have conflicting changes."}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Merger"}],"title":"Merger","url":"\/documentation\/forkedmerge\/merger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","role":"symbol","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"type":"text","text":" "},{"text":"The values are typically of a simple type. The algorithm could be anything, from a","type":"text"},{"text":" ","type":"text"},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"type":"text","text":" "},{"text":"diffing against a common ancestor.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"type":"topic","title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"url":"\/documentation\/forkedmerge\/mergeabledictionary","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableDictionary"}],"type":"topic","navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"text":" ","type":"text"},{"text":"Uses a CRDT algorithm.","type":"text"}],"title":"MergeableDictionary","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"code":"Merger","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","navigatorTitle":[{"kind":"identifier","text":"PropertyMerge"}],"kind":"symbol","type":"topic","title":"PropertyMerge","url":"\/documentation\/forkedmerge\/propertymerge"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"kind":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/arraymerger","navigatorTitle":[{"text":"ArrayMerger","kind":"identifier"}],"title":"ArrayMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayMerger"}]}}}