{"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"anchor":"Protocols","generated":true,"title":"Protocols"},{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"],"title":"Structures","anchor":"Structures"},{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"title":"Enumerations","anchor":"Enumerations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge"]}],"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","metadata":{"symbolKind":"module","roleHeading":"Framework","externalID":"ForkedMerge","role":"collection","modules":[{"name":"ForkedMerge"}],"title":"ForkedMerge"},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","title":"MergeableArray","kind":"symbol","type":"topic","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"text":" ","type":"text"},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"type":"topic","url":"\/documentation\/forkedmerge\/propertybacking","abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"type":"text","text":" "},{"text":"systems for merging. They maintain the information they need (eg history)","type":"text"},{"text":" ","type":"text"},{"text":"to properly merge even if with copies that have conflicting changes.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyBacking"}],"title":"PropertyBacking","kind":"symbol","navigatorTitle":[{"text":"PropertyBacking","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"url":"\/documentation\/forkedmerge\/arraymerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArrayMerger","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"ArrayMerger","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayMerger"}],"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"text":" ","type":"text"},{"type":"text","text":"Uses a CRDT algorithm."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableDictionary"}],"type":"topic","title":"MergeableDictionary","url":"\/documentation\/forkedmerge\/mergeabledictionary","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"abstract":[{"text":"Observed-Remove Set. Can add and remove like a normal set.","type":"text"},{"type":"text","text":" "},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"role":"symbol","url":"\/documentation\/forkedmerge\/mergeableset","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableSet","kind":"identifier"}],"title":"MergeableSet","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"url":"\/documentation\/forkedmerge\/propertymerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"title":"PropertyMerge","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"abstract":[],"kind":"symbol","title":"TextMerger","role":"symbol","url":"\/documentation\/forkedmerge\/textmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TextMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"url":"\/documentation\/forkedmerge\/dictionarymerger","title":"DictionaryMerger","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"DictionaryMerger","kind":"identifier"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"title":"SetMerger","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"url":"\/documentation\/forkedmerge\/setmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","kind":"symbol","navigatorTitle":[{"text":"SetMerger","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SetMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Merger","kind":"identifier"}],"abstract":[{"text":"A merger is a type that applies a merging algorithm to merge two values together.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}],"url":"\/documentation\/forkedmerge\/merger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","title":"Merger","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"role":"symbol","title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"text":" ","type":"text"},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"type":"text","text":" "},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"type":"text","text":" "},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableValue"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","title":"MergeableValue","url":"\/documentation\/forkedmerge\/mergeablevalue"}}}