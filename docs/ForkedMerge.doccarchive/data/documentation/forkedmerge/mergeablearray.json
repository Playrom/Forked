{"relationshipsSections":[{"identifiers":["doc:\/\/ForkedMerge\/6Forked9MergeableP","doc:\/\/ForkedMerge\/SK","doc:\/\/ForkedMerge\/Sl","doc:\/\/ForkedMerge\/s8CopyableP","doc:\/\/ForkedMerge\/Se","doc:\/\/ForkedMerge\/SE","doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/Sk","doc:\/\/ForkedMerge\/ST"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"},"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"title":"Initializers","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)"],"anchor":"Initializers"},{"anchor":"Instance-Properties","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"],"generated":true,"title":"Instance Properties"},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"],"anchor":"Instance-Methods","generated":true,"title":"Instance Methods"},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"],"generated":true}],"metadata":{"symbolKind":"struct","roleHeading":"Structure","role":"symbol","externalID":"s:11ForkedMerge14MergeableArrayV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"modules":[{"name":"ForkedMerge"}],"title":"MergeableArray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Element"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"}]}],"kind":"declarations"}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"kind":"symbol","sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/entriesUniquelyIdentified()":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","role":"symbol","title":"entriesUniquelyIdentified()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"entriesUniquelyIdentified","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element."},{"type":"text","text":" "},{"text":"The relative order of the remaining elements is preserved.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://ForkedMerge/SE":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SE","title":"Swift.Encodable"},"doc://ForkedMerge/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s8CopyableP","title":"Swift.Copyable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","title":"Collection Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Mergeable-Implementations":{"kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","abstract":[],"type":"topic","role":"collectionGroup","title":"Mergeable Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/mergeable-implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Equatable-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/equatable-implementations","type":"topic","kind":"article","role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","role":"collectionGroup","title":"Sequence Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-4xgxi":{"abstract":[{"type":"text","text":"Merge when elements are mergeable and identifiable. More object-like."},{"text":" ","type":"text"},{"text":"Will ensure uniqueness of identifiers, and merge together elements with the same identifier.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"withSubordinate","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","kind":"typeIdentifier","text":"MergeableArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"kind":"symbol","title":"merged(withSubordinate:commonAncestor:)","url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-4xgxi","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mergeable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi"},"doc://ForkedMerge/s25ExpressibleByArrayLiteralP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","title":"Swift.ExpressibleByArrayLiteral"},"doc://ForkedMerge/SQ":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/RandomAccessCollection-Implementations":{"abstract":[],"kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","role":"collectionGroup","type":"topic","title":"RandomAccessCollection Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations"},"doc://ForkedMerge/ST":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/ST","title":"Swift.Sequence"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"([","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":"])","kind":"text"}],"abstract":[],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/init(_:)","role":"symbol","type":"topic","title":"init(_:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/insert(_:at:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"insert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"role":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"title":"insert(_:at:)","url":"\/documentation\/forkedmerge\/mergeablearray\/insert(_:at:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/ExpressibleByArrayLiteral-Implementations":{"abstract":[],"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/expressiblebyarrayliteral-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","title":"ExpressibleByArrayLiteral Implementations","kind":"article","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/values":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"values","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sa","text":"Array"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/values","role":"symbol","type":"topic","title":"values","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"},"doc://ForkedMerge/Se":{"identifier":"doc:\/\/ForkedMerge\/Se","title":"Swift.Decodable","type":"unresolvable"},"doc://ForkedMerge/6Forked9MergeableP":{"identifier":"doc:\/\/ForkedMerge\/6Forked9MergeableP","title":"Forked.Mergeable","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/append(_:)":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"append(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/append(_:)","type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"append"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://ForkedMerge/SH":{"identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","abstract":[],"kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","role":"collectionGroup","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/remove(at:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remove","kind":"identifier"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/remove(at:)","role":"symbol","type":"topic","title":"remove(at:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"},"doc://ForkedMerge/Sl":{"title":"Swift.Collection","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sl"},"doc://ForkedMerge/SK":{"title":"Swift.BidirectionalCollection","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SK"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Decodable-Implementations":{"title":"Decodable Implementations","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/decodable-implementations","abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init()":{"abstract":[],"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","title":"init()","kind":"symbol","role":"symbol"},"doc://ForkedMerge/Sk":{"type":"unresolvable","title":"Swift.RandomAccessCollection","identifier":"doc:\/\/ForkedMerge\/Sk"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/count":{"abstract":[],"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/count","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"count","kind":"identifier"},{"text":": ","kind":"text"},{"text":"UInt64","preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","title":"count","kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"type":"topic","title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-8913f":{"kind":"symbol","title":"merged(withSubordinate:commonAncestor:)","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-8913f","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}]},"abstract":[{"text":"For non-mergeables that are identifiable and equatable. Here we can at least see","type":"text"},{"type":"text","text":" "},{"text":"which branch has changed, and choose that branch, even if we can’t “fuse” the elements.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"merged","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"withSubordinate"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","title":"ForkedMerge","type":"topic","role":"collection","url":"\/documentation\/forkedmerge"}}}