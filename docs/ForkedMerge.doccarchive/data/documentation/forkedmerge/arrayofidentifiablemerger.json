{"relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"type":"conformsTo"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"text":" : ","kind":"text"},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"},{"kind":"text","text":", "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12IdentifiableP","text":"Identifiable"}]}]}],"metadata":{"navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"title":"ArrayOfIdentifiableMerger","symbolKind":"struct","externalID":"s:11ForkedMerge25ArrayOfIdentifiableMergerV","roleHeading":"Structure","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"modules":[{"name":"ForkedMerge"}]},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/arrayofidentifiablemerger"]}],"topicSections":[{"generated":true,"title":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()"],"anchor":"Initializers"},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2"]},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations"],"generated":true,"title":"Default Implementations","anchor":"Default-Implementations"}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"references":{"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/init()":{"type":"topic","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/init()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()","kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[],"title":"init()"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","title":"ForkedMerge","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"role":"symbol","title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/merge(_:withSubordinate:commonAncestor:)-1pmm2":{"type":"topic","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merge(_:withsubordinate:commonancestor:)-1pmm2","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"merge","kind":"identifier"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"withSubordinate"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"], "},{"text":"commonAncestor","kind":"externalParam"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":"]) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":", "},{"code":"Equatable","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"text":".","type":"text"}]},"title":"merge(_:withSubordinate:commonAncestor:)","abstract":[{"type":"text","text":"This function merges two arrays of elements that are identifiable and mergeable."},{"type":"text","text":" "},{"type":"text","text":"The result is different to merging where the elements are not mergeable."},{"text":" ","type":"text"},{"type":"text","text":"This call will recurse the merge."}]},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Merger","kind":"identifier"}],"abstract":[{"text":"A merger is a type that applies a merging algorithm to merge two values together.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}],"url":"\/documentation\/forkedmerge\/merger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","title":"Merger","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/Merger-Implementations":{"abstract":[],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merger-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations","title":"Merger Implementations","role":"collectionGroup","kind":"article","type":"topic"}}}