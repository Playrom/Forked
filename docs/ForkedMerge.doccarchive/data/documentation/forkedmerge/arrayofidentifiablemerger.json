{"abstract":[{"text":"Merges an array, ensuring that the result has elements with unqiue identifiers.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","interfaceLanguage":"swift"},"sections":[],"metadata":{"role":"symbol","title":"ArrayOfIdentifiableMerger","symbolKind":"struct","modules":[{"name":"ForkedMerge"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"externalID":"s:11ForkedMerge25ArrayOfIdentifiableMergerV"},"kind":"symbol","relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Element"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:SQ","text":"Equatable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Identifiable","kind":"typeIdentifier","preciseIdentifier":"s:s12IdentifiableP"}],"languages":["swift"],"platforms":["macOS"]}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"variants":[{"paths":["\/documentation\/forkedmerge\/arrayofidentifiablemerger"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"anchor":"Initializers","title":"Initializers","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()"]},{"anchor":"Instance-Methods","title":"Instance Methods","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2"]},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/Merger-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations","type":"topic","kind":"article","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merger-implementations","abstract":[],"title":"Merger Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"title":"Merger","url":"\/documentation\/forkedmerge\/merger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"type":"text","text":" "},{"text":"diffing against a common ancestor.","type":"text"}],"navigatorTitle":[{"text":"Merger","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Merger"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/init()":{"kind":"symbol","title":"init()","role":"symbol","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/init()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/merge(_:withSubordinate:commonAncestor:)-1pmm2":{"abstract":[{"type":"text","text":"This function merges two arrays of elements that are identifiable and mergeable."},{"text":" ","type":"text"},{"text":"The result is different to merging where the elements are not mergeable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This call will recurse the merge."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merge(_:withsubordinate:commonancestor:)-1pmm2","type":"topic","role":"symbol","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":", "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"merge(_:withSubordinate:commonAncestor:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"kind":"text","text":"(["},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"], "},{"text":"withSubordinate","kind":"externalParam"},{"kind":"text","text":": ["},{"text":"Element","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"commonAncestor"},{"text":": [","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"]) "},{"text":"throws","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}]}}}