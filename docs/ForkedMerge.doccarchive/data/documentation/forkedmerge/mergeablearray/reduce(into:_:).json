{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/reduce(into:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"text":"into","kind":"externalParam"},{"kind":"text","text":" "},{"text":"initialResult","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"updateAccumulatingResult"},{"kind":"text","text":": ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."}]}],"name":"initialResult"},{"name":"updateAccumulatingResult","content":[{"inlineContent":[{"type":"text","text":"A closure that updates the accumulating"},{"type":"text","text":" "},{"type":"text","text":"value with an element of the sequence."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final accumulated value. If the sequence has no elements,"},{"text":" ","type":"text"},{"text":"the result is ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"reduce(into:_:)","type":"codeVoice"},{"text":" method to produce a single value from the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements of an entire sequence. For example, you can use this method on an"},{"text":" ","type":"text"},{"type":"text","text":"array of integers to filter adjacent equal entries or count frequencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is preferred over "},{"type":"codeVoice","code":"reduce(_:_:)"},{"type":"text","text":" for efficiency when the"},{"type":"text","text":" "},{"type":"text","text":"result is a copy-on-write type, for example an Array or a Dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"text":" closure is called sequentially with a","type":"text"},{"text":" ","type":"text"},{"text":"mutable accumulating value initialized to ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" and each element"},{"type":"text","text":" "},{"type":"text","text":"of the sequence. This example shows how to build a dictionary of letter"},{"text":" ","type":"text"},{"type":"text","text":"frequencies of a string."}]},{"code":["let letters = \"abracadabra\"","let letterCount = letters.reduce(into: [:]) { counts, letter in","    counts[letter, default: 0] += 1","}","\/\/ letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"letters.reduce(into:_:)"},{"type":"text","text":" is called, the following steps occur:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"text":" closure is called with the initial","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"accumulating value—"},{"type":"codeVoice","code":"[:]"},{"text":" in this case—and the first character of","type":"text"},{"type":"text","text":" "},{"code":"letters","type":"codeVoice"},{"type":"text","text":", modifying the accumulating value by setting "},{"type":"codeVoice","code":"1"},{"text":" for the key","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure is called again repeatedly with the updated accumulating"},{"text":" ","type":"text"},{"type":"text","text":"value and each element of the sequence."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When the sequence is exhausted, the accumulating value is returned to","type":"text"},{"type":"text","text":" "},{"text":"the caller.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"type":"codeVoice","code":"updateAccumulatingResult"},{"text":" is never","type":"text"},{"type":"text","text":" "},{"text":"executed and ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"text":" is the result of the call to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"reduce(into:_:)"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"style":"note","type":"aside"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(into:_:)"},"sections":[],"kind":"symbol","metadata":{"extendedModule":"Swift","role":"symbol","title":"reduce(into:_:)","externalID":"s:STsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ()) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}],"roleHeading":"Instance Method","symbolKind":"method"},"abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"text":"given closure.","type":"text"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","title":"Sequence Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reduce(into:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/reduce(into:_:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(into:_:)","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"text":"given closure.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"reduce(into:_:)"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]}}}