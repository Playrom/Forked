{"metadata":{"title":"lazy","roleHeading":"Instance Property","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift","role":"symbol","externalID":"s:STsE4lazys12LazySequenceVyxGvp::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"property","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"lazy","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12LazySequenceV","text":"LazySequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lazy"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"lazy","kind":"identifier"},{"kind":"text","text":": "},{"text":"LazySequence","kind":"typeIdentifier","preciseIdentifier":"s:s12LazySequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lazy","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A sequence containing the same elements as this sequence,"},{"text":" ","type":"text"},{"text":"but on which some operations, such as ","type":"text"},{"type":"codeVoice","code":"map"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"filter"},{"type":"text","text":", are"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lazy":{"kind":"symbol","abstract":[{"type":"text","text":"A sequence containing the same elements as this sequence,"},{"type":"text","text":" "},{"type":"text","text":"but on which some operations, such as "},{"code":"map","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"filter"},{"text":", are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"role":"symbol","title":"lazy","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lazy","url":"\/documentation\/forkedmerge\/mergeablearray\/lazy","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"lazy","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12LazySequenceV","text":"LazySequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","title":"Sequence Implementations"}}}