{"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/enumerated()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Returns a sequence of pairs ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":", ","type":"text"},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" represents a"},{"type":"text","text":" "},{"text":"consecutive integer starting at zero and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":" represents an element of"},{"text":" ","type":"text"},{"text":"the sequence.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EnumeratedSequence","kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence of pairs enumerating the sequence."}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"text":"This example enumerates the characters of the string “Swift” and prints","type":"text"},{"text":" ","type":"text"},{"text":"each character along with its place in the string.","type":"text"}],"type":"paragraph"},{"code":["for (n, c) in \"Swift\".enumerated() {","    print(\"\\(n): '\\(c)'\")","}","\/\/ Prints \"0: 'S'\"","\/\/ Prints \"1: 'w'\"","\/\/ Prints \"2: 'i'\"","\/\/ Prints \"3: 'f'\"","\/\/ Prints \"4: 't'\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"When you enumerate a collection, the integer part of each pair is a counter"},{"type":"text","text":" "},{"text":"for the enumeration, but is not necessarily the index of the paired value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These counters can be used as indices only in instances of zero-based,"},{"text":" ","type":"text"},{"text":"integer-indexed collections, such as ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ContiguousArray"},{"type":"text","text":". For"},{"type":"text","text":" "},{"type":"text","text":"other collections the counters may be out of range or of the wrong type"},{"text":" ","type":"text"},{"text":"to use as an index. To iterate over the elements of a collection with its","type":"text"},{"type":"text","text":" "},{"text":"indices, use the ","type":"text"},{"type":"codeVoice","code":"zip(_:_:)"},{"text":" function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example iterates over the indices and elements of a set, building a"},{"text":" ","type":"text"},{"text":"list consisting of indices of names with five or fewer letters.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]","var shorterIndices: [Set<String>.Index] = []","for (i, name) in zip(names.indices, names) {","    if name.count <= 5 {","        shorterIndices.append(i)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Now that the ","type":"text"},{"code":"shorterIndices","type":"codeVoice"},{"type":"text","text":" array holds the indices of the shorter"},{"type":"text","text":" "},{"type":"text","text":"names in the "},{"type":"codeVoice","code":"names"},{"type":"text","text":" set, you can use those indices to access elements in"},{"type":"text","text":" "},{"type":"text","text":"the set."}]},{"code":["for i in shorterIndices {","    print(names[i])","}","\/\/ Prints \"Sofia\"","\/\/ Prints \"Mateo\""],"syntax":null,"type":"codeListing"},{"name":"Complexity","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}]}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"metadata":{"externalID":"s:STsE10enumerateds18EnumeratedSequenceVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","title":"enumerated()","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift","symbolKind":"method","role":"symbol"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/enumerated()":{"kind":"symbol","abstract":[{"text":"Returns a sequence of pairs (","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":", "},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" represents a"},{"text":" ","type":"text"},{"type":"text","text":"consecutive integer starting at zero and "},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":" represents an element of"},{"text":" ","type":"text"},{"text":"the sequence.","type":"text"}],"role":"symbol","title":"enumerated()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()","url":"\/documentation\/forkedmerge\/mergeablearray\/enumerated()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","title":"Sequence Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"}}}