{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"difference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":" "},{"kind":"internalParam","text":"other"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s20CollectionDifferenceV","text":"CollectionDifference","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"BidirectionalCollection","kind":"typeIdentifier","preciseIdentifier":"s:SK"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":" == ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The base state.","type":"text"}]}],"name":"other"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference needed to produce this collection’s ordered"},{"type":"text","text":" "},{"text":"elements from the given collection.","type":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This function does not infer element moves. If you need to infer moves,","type":"text"},{"text":" ","type":"text"},{"text":"call the ","type":"text"},{"type":"codeVoice","code":"inferringMoves()"},{"type":"text","text":" method on the resulting difference."}]},{"content":[{"inlineContent":[{"text":"Worst case performance is O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" * "},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" is the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"count of this collection and "},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"type":"text","text":" is "},{"type":"codeVoice","code":"other.count"},{"type":"text","text":". You can expect"},{"text":" ","type":"text"},{"type":"text","text":"faster execution when the collections share many common elements, or"},{"text":" ","type":"text"},{"text":"if ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","name":"Complexity","style":"note"}]}],"metadata":{"extendedModule":"Swift","externalID":"s:SKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"difference","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"CollectionDifference","preciseIdentifier":"s:s20CollectionDifferenceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":">","kind":"text"}],"platforms":[{"deprecated":false,"beta":false,"introducedAt":"13.0","unavailable":false,"name":"iOS"},{"unavailable":false,"beta":false,"deprecated":false,"name":"macOS","introducedAt":"10.15"},{"beta":false,"deprecated":false,"introducedAt":"13.0","unavailable":false,"name":"tvOS"},{"deprecated":false,"name":"watchOS","introducedAt":"6.0","beta":false,"unavailable":false}],"role":"symbol","title":"difference(from:)","symbolKind":"method","roleHeading":"Instance Method","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"sections":[],"abstract":[{"type":"text","text":"Returns the difference needed to produce this collection’s ordered"},{"text":" ","type":"text"},{"type":"text","text":"elements from the given collection."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/difference(from:)"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/difference(from:)":{"kind":"symbol","title":"difference(from:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"difference","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s20CollectionDifferenceV","text":"CollectionDifference","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)","abstract":[{"text":"Returns the difference needed to produce this collection’s ordered","type":"text"},{"type":"text","text":" "},{"text":"elements from the given collection.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:)","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","title":"ForkedMerge","type":"topic","role":"collection","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"type":"topic","title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","abstract":[],"kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","role":"collectionGroup","type":"topic"}}}