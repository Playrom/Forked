{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/trimmingprefix(_:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"sections":[],"abstract":[{"text":"Returns a new collection of the same type by removing ","type":"text"},{"type":"codeVoice","code":"prefix"},{"text":" from the start","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the collection."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"trimmingPrefix","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Prefix"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"prefix"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Prefix"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Prefix","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sequence","kind":"typeIdentifier","preciseIdentifier":"s:ST"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Prefix","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"prefix","content":[{"inlineContent":[{"type":"text","text":"The collection to remove from this collection."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A collection containing the elements of the collection that are"},{"type":"text","text":" "},{"type":"text","text":"not removed by "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"metadata":{"symbolKind":"method","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"trimmingPrefix","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Prefix"},{"text":">(","kind":"text"},{"text":"Prefix","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"role":"symbol","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"title":"trimmingPrefix(_:)","externalID":"s:Sl17_StringProcessingSQ7ElementRpzrlE14trimmingPrefixy11SubSequenceQzqd__STRd__ABQyd__ACRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"extendedModule":"Swift","platforms":[{"introducedAt":"16.0","deprecated":false,"beta":false,"name":"iOS","unavailable":false},{"introducedAt":"13.0","beta":false,"deprecated":false,"name":"macOS","unavailable":false},{"name":"tvOS","introducedAt":"16.0","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"9.0","unavailable":false,"name":"watchOS","beta":false,"deprecated":false}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/trimmingPrefix(_:)"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"MergeableArray"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"abstract":[],"title":"Collection Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/trimmingPrefix(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"trimmingPrefix","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Prefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Prefix","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/trimmingprefix(_:)","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/trimmingPrefix(_:)","title":"trimmingPrefix(_:)","role":"symbol","abstract":[{"text":"Returns a new collection of the same type by removing ","type":"text"},{"type":"codeVoice","code":"prefix"},{"type":"text","text":" from the start"},{"type":"text","text":" "},{"type":"text","text":"of the collection."}],"kind":"symbol"}}}