{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/starts(with:)"]}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the initial elements of the"},{"type":"text","text":" "},{"type":"text","text":"sequence are the same as the elements in another sequence."}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"starts","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"PossiblePrefix"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":" "},{"text":"possiblePrefix","kind":"internalParam"},{"kind":"text","text":": "},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:ST","text":"Sequence","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":" == ","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"possiblePrefix","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence to compare to this sequence."}]}]}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"true","type":"codeVoice"},{"text":" if the initial elements of the sequence are the same as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the elements of "},{"type":"codeVoice","code":"possiblePrefix"},{"type":"text","text":"; otherwise, "},{"type":"codeVoice","code":"false"},{"text":". If","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"possiblePrefix"},{"text":" has no elements, the return value is ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This example tests whether one countable range begins with the elements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of another countable range."}]},{"syntax":null,"code":["let a = 1...3","let b = 1...10","","print(b.starts(with: a))","\/\/ Prints \"true\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Passing a sequence with no elements or an empty collection as"},{"text":" ","type":"text"},{"code":"possiblePrefix","type":"codeVoice"},{"type":"text","text":" always results in "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"code":["print(b.starts(with: []))","\/\/ Prints \"true\""],"type":"codeListing"},{"name":"Complexity","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"m","type":"text"}]},{"text":" is the lesser of the length of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence and the length of "},{"type":"codeVoice","code":"possiblePrefix"},{"type":"text","text":"."}],"type":"paragraph"}]}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/starts(with:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"metadata":{"title":"starts(with:)","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"starts","kind":"identifier"},{"kind":"text","text":"<"},{"text":"PossiblePrefix","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"with","kind":"externalParam"},{"kind":"text","text":": "},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method","externalID":"s:STsSQ7ElementRpzrlE6starts4withSbqd___tSTRd__AAQyd__ABRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"extendedModule":"Swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/starts(with:)":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the initial elements of the"},{"text":" ","type":"text"},{"type":"text","text":"sequence are the same as the elements in another sequence."}],"title":"starts(with:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/starts(with:)","type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/starts(with:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"starts","kind":"identifier"},{"kind":"text","text":"<"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]}},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","title":"Sequence Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]}}}