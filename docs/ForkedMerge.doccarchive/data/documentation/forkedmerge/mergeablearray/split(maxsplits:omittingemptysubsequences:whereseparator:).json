{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"role":"symbol","externalID":"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","extendedModule":"Swift","symbolKind":"method"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":" = Int.max, ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":" = true, ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"isSeparator"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"platforms":["macOS"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"text":"one less than the number of subsequences to return. If","type":"text"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"text":" ","type":"text"},{"text":"of the original collection containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}],"name":"maxSplits"},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"text":" ","type":"text"},{"text":"satisfying the ","type":"text"},{"code":"isSeparator","type":"codeVoice"},{"text":" predicate and for each element at the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"start or end of the collection satisfying the "},{"code":"isSeparator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"predicate. The default value is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"omittingEmptySubsequences"},{"content":[{"inlineContent":[{"type":"text","text":"A closure that takes an element as an argument and"},{"type":"text","text":" "},{"text":"returns a Boolean value indicating whether the collection should be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"split at that element."}],"type":"paragraph"}],"name":"isSeparator"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The resulting array consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences.","type":"text"},{"text":" ","type":"text"},{"text":"Elements that are used to split the sequence are not returned as part of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any subsequence."}]},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when splitting a string using a","type":"text"},{"type":"text","text":" "},{"text":"closure that matches spaces. The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word"},{"text":" ","type":"text"},{"text":"that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"type":"paragraph","inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}]},{"syntax":null,"code":["print(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"text":"were repeated.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["print(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"name":"Complexity","type":"aside"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"abstract":[],"title":"Collection Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","type":"topic","kind":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"text":" ","type":"text"},{"type":"text","text":"that don’t contain elements satisfying the given predicate."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol"}}}