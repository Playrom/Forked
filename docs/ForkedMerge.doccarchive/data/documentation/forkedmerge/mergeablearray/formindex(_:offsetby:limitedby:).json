{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:limitedby:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formIndex"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"i","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"kind":"text","text":", "},{"kind":"externalParam","text":"offsetBy"},{"text":" ","kind":"text"},{"text":"distance","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"limitedBy","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"limit","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A valid index of the collection."}],"type":"paragraph"}],"name":"i"},{"content":[{"inlineContent":[{"type":"text","text":"The distance to offset "},{"code":"i","type":"codeVoice"},{"text":". ","type":"text"},{"code":"distance","type":"codeVoice"},{"type":"text","text":" must not be negative"},{"type":"text","text":" "},{"type":"text","text":"unless the collection conforms to the "},{"type":"codeVoice","code":"BidirectionalCollection"},{"text":" ","type":"text"},{"type":"text","text":"protocol."}],"type":"paragraph"}],"name":"distance"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A valid index of the collection to use as a limit. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"distance > 0"},{"type":"text","text":", a limit that is less than "},{"type":"codeVoice","code":"i"},{"text":" has no effect.","type":"text"},{"type":"text","text":" "},{"text":"Likewise, if ","type":"text"},{"type":"codeVoice","code":"distance < 0"},{"text":", a limit that is greater than ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":" has no"},{"type":"text","text":" "},{"text":"effect.","type":"text"}]}],"name":"limit"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if "},{"type":"codeVoice","code":"i"},{"type":"text","text":" has been offset by exactly "},{"code":"distance","type":"codeVoice"},{"type":"text","text":" steps"},{"text":" ","type":"text"},{"type":"text","text":"without going beyond "},{"code":"limit","type":"codeVoice"},{"text":"; otherwise, ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":". When the return"},{"type":"text","text":" "},{"type":"text","text":"value is "},{"type":"codeVoice","code":"false"},{"text":", the value of ","type":"text"},{"code":"i","type":"codeVoice"},{"type":"text","text":" is equal to "},{"code":"limit","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The value passed as ","type":"text"},{"code":"distance","type":"codeVoice"},{"text":" must not offset ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":" beyond the bounds of"},{"type":"text","text":" "},{"type":"text","text":"the collection, unless the index passed as "},{"type":"codeVoice","code":"limit"},{"type":"text","text":" prevents offsetting"},{"text":" ","type":"text"},{"type":"text","text":"beyond those bounds."}]},{"type":"aside","name":"Complexity","style":"note","content":[{"inlineContent":[{"text":"O(1) if the collection conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":"; otherwise, O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"text":" is the absolute","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value of "},{"code":"distance","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}]}],"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formIndex"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":", ","kind":"text"},{"text":"offsetBy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"limitedBy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"title":"formIndex(_:offsetBy:limitedBy:)","roleHeading":"Instance Method","externalID":"s:SlsE9formIndex_8offsetBy07limitedD0Sb0B0Qzz_SiAEtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","role":"symbol"},"kind":"symbol","abstract":[{"text":"Offsets the given index by the specified distance, or so that it equals","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the given limiting index."}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"type":"topic","title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","title":"ForkedMerge","type":"topic","role":"collection","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/formIndex(_:offsetBy:limitedBy:)":{"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:limitedby:)","type":"topic","title":"formIndex(_:offsetBy:limitedBy:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"formIndex","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"kind":"text","text":", "},{"text":"offsetBy","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"limitedBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Offsets the given index by the specified distance, or so that it equals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the given limiting index."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:limitedBy:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","title":"Collection Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","type":"topic"}}}