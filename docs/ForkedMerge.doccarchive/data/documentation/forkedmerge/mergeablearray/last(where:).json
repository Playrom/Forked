{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/last(where:)"]}],"abstract":[{"text":"Returns the last element of the sequence that satisfies the given","type":"text"},{"text":" ","type":"text"},{"text":"predicate.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"last","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"where"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"?","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element of the sequence as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its argument and returns a Boolean value indicating whether the"},{"type":"text","text":" "},{"type":"text","text":"element is a match."}]}],"name":"predicate"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"The last element of the sequence that satisfies "},{"type":"codeVoice","code":"predicate"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"nil"},{"text":" if there is no element that satisfies ","type":"text"},{"code":"predicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"text":"This example uses the ","type":"text"},{"type":"codeVoice","code":"last(where:)"},{"text":" method to find the last","type":"text"},{"text":" ","type":"text"},{"text":"negative number in an array of integers:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = [3, 7, 4, -2, 9, -6, 10, 1]","if let lastNegative = numbers.last(where: { $0 < 0 }) {","    print(\"The last negative number is \\(lastNegative).\")","}","\/\/ Prints \"The last negative number is -6.\""]},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Complexity"}],"kind":"content"}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"last(where:)","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"symbolKind":"method","externalID":"s:SKsE4last5where7ElementQzSgSbADKXE_tKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"last","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"where"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"role":"symbol","extendedModule":"Swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last(where:)"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/last(where:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/last(where:)","title":"last(where:)","type":"topic","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last(where:)","abstract":[{"type":"text","text":"Returns the last element of the sequence that satisfies the given"},{"type":"text","text":" "},{"text":"predicate.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"last","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"where"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","title":"BidirectionalCollection Implementations","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","kind":"article","type":"topic","role":"collectionGroup"}}}