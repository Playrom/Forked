{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"suffix"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":" "},{"text":"start","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"}],"platforms":["macOS"]}]},{"parameters":[{"name":"start","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The index at which to start the resulting subsequence."},{"type":"text","text":" "},{"type":"codeVoice","code":"start"},{"text":" must be a valid index of the collection.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A subsequence starting at the "},{"code":"start","type":"codeVoice"},{"type":"text","text":" position."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The following example searches for the index of the number "},{"type":"codeVoice","code":"40"},{"type":"text","text":" in an"},{"text":" ","type":"text"},{"type":"text","text":"array of integers, and then prints the suffix of the array starting at"},{"text":" ","type":"text"},{"type":"text","text":"that index:"}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60]","if let i = numbers.firstIndex(of: 40) {","    print(numbers.suffix(from: i))","}","\/\/ Prints \"[40, 50, 60]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"Passing the collection’s "},{"code":"endIndex","type":"codeVoice"},{"text":" as the ","type":"text"},{"code":"start","type":"codeVoice"},{"text":" parameter results in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an empty subsequence."}],"type":"paragraph"},{"code":["print(numbers.suffix(from: numbers.endIndex))","\/\/ Prints \"[]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"suffix(from:)"},{"type":"text","text":" method is equivalent to using a partial range"},{"text":" ","type":"text"},{"text":"from the index as the collection’s subscript. The subscript notation is","type":"text"},{"type":"text","text":" "},{"text":"preferred over ","type":"text"},{"type":"codeVoice","code":"suffix(from:)"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["if let i = numbers.firstIndex(of: 40) {","    print(numbers[i...])","}","\/\/ Prints \"[40, 50, 60]\""]},{"name":"Complexity","type":"aside","style":"note","content":[{"inlineContent":[{"text":"O(1)","type":"text"}],"type":"paragraph"}]}]}],"metadata":{"title":"suffix(from:)","roleHeading":"Instance Method","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"role":"symbol","extendedModule":"Swift","symbolKind":"method","externalID":"s:SlsE6suffix4from11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"suffix"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/suffix(from:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/suffix(from:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"abstract":[{"type":"text","text":"Returns a subsequence from the specified position to the end of the"},{"type":"text","text":" "},{"type":"text","text":"collection."}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/suffix(from:)":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/suffix(from:)","url":"\/documentation\/forkedmerge\/mergeablearray\/suffix(from:)","type":"topic","abstract":[{"type":"text","text":"Returns a subsequence from the specified position to the end of the"},{"type":"text","text":" "},{"text":"collection.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"suffix","kind":"identifier"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa","kind":"typeIdentifier"}],"title":"suffix(from:)","role":"symbol","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","title":"Collection Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","title":"ForkedMerge","type":"topic","role":"collection","url":"\/documentation\/forkedmerge"}}}