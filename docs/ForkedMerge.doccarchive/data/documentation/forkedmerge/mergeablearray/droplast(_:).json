{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"abstract":[{"text":"Inherited from ","type":"text"},{"code":"BidirectionalCollection.dropLast(_:)","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","sections":[],"metadata":{"role":"symbol","symbolKind":"method","externalID":"s:SKsE8dropLasty11SubSequenceQzSiF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","extendedModule":"Swift","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dropLast","kind":"identifier"},{"kind":"text","text":"("},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"}],"roleHeading":"Instance Method","title":"dropLast(_:)"},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropLast(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dropLast"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"k"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"languages":["swift"]}],"kind":"declarations"}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/droplast(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"title":"MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"role":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/dropLast(_:)":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropLast(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/droplast(_:)","kind":"symbol","abstract":[],"title":"dropLast(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dropLast","kind":"identifier"},{"kind":"text","text":"("},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"abstract":[],"title":"BidirectionalCollection Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge"}}}