{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","sections":[],"metadata":{"title":"formIndex(_:offsetBy:)","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"formIndex","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":")"}],"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"roleHeading":"Instance Method","externalID":"s:SlsE9formIndex_8offsetByy0B0Qzz_SitF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","role":"symbol","symbolKind":"method"},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"formIndex","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"i","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"offsetBy","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"distance"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A valid index of the collection."}]}],"name":"i"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The distance to offset ","type":"text"},{"code":"i","type":"codeVoice"},{"type":"text","text":". "},{"code":"distance","type":"codeVoice"},{"type":"text","text":" must not be negative"},{"type":"text","text":" "},{"text":"unless the collection conforms to the ","type":"text"},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":" "},{"type":"text","text":"protocol."}]}],"name":"distance"}],"kind":"parameters"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"The value passed as ","type":"text"},{"code":"distance","type":"codeVoice"},{"text":" must not offset ","type":"text"},{"type":"codeVoice","code":"i"},{"text":" beyond the bounds of","type":"text"},{"text":" ","type":"text"},{"text":"the collection.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"O(1) if the collection conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"; otherwise, O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"text":" is the absolute","type":"text"},{"type":"text","text":" "},{"text":"value of ","type":"text"},{"type":"codeVoice","code":"distance"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Complexity","type":"aside","style":"note"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"abstract":[{"type":"text","text":"Offsets the given index by the specified distance."}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"url":"\/documentation\/forkedmerge","role":"collection","title":"ForkedMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/formIndex(_:offsetBy:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/formindex(_:offsetby:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"formIndex","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":", "},{"text":"offsetBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Offsets the given index by the specified distance."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:)","type":"topic","kind":"symbol","title":"formIndex(_:offsetBy:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"abstract":[],"title":"Collection Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic"}}}