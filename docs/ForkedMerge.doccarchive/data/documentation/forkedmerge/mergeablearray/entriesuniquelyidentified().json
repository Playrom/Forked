{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()"},"abstract":[{"type":"text","text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element."},{"text":" ","type":"text"},{"text":"The relative order of the remaining elements is preserved.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"entriesUniquelyIdentified"},{"kind":"text","text":"() -> "},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"languages":["swift"]}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"metadata":{"externalID":"s:11ForkedMerge14MergeableArrayVAAs12IdentifiableRzrlE25entriesUniquelyIdentifiedACyxGyF","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"roleHeading":"Instance Method","role":"symbol","modules":[{"name":"ForkedMerge"}],"extendedModule":"ForkedMerge","symbolKind":"method","title":"entriesUniquelyIdentified()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"entriesUniquelyIdentified"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()"]}],"kind":"symbol","sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","title":"MergeableArray","kind":"symbol","type":"topic","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"text":" ","type":"text"},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/entriesUniquelyIdentified()":{"abstract":[{"text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element.","type":"text"},{"text":" ","type":"text"},{"text":"The relative order of the remaining elements is preserved.","type":"text"}],"role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"entriesUniquelyIdentified"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"entriesUniquelyIdentified()","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()"},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge"}}}