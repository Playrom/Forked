{"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq"},"metadata":{"title":"...(_:)","symbolKind":"op","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV","text":"PartialRangeThrough"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"modules":[{"name":"Forked","relatedModules":["Swift"]}],"roleHeading":"Operator","externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","extendedModule":"Swift","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"abstract":[{"text":"Returns a partial range up to, and including, its upper bound.","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"maximum","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The upper bound for the range."}],"type":"paragraph"}],"name":"maximum"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"Use the prefix closed range operator (prefix ","type":"text"},{"type":"codeVoice","code":"..."},{"text":") to create a partial","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"range of any type that conforms to the "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol. This"},{"type":"text","text":" "},{"text":"example creates a ","type":"text"},{"code":"PartialRangeThrough<Double>","type":"codeVoice"},{"text":" instance that includes","type":"text"},{"text":" ","type":"text"},{"text":"any value less than or equal to ","type":"text"},{"type":"codeVoice","code":"5.0"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"text":" ","type":"text"},{"text":"represent the range from the start of the collection up to, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including, the partial range’s upper bound."}]},{"type":"codeListing","code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""],"syntax":null},{"name":"Precondition","style":"note","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"maximum"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}],"type":"paragraph"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'...(_:)-1nziq"]}],"references":{"doc://Forked/documentation/Forked/Version":{"type":"topic","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"kind":"symbol","title":"Version","url":"\/documentation\/forked\/version","role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Version"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}]},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","abstract":[],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","type":"topic","role":"collectionGroup","kind":"article"},"doc://Forked/documentation/Forked":{"abstract":[{"type":"text","text":"A framework for handling forked data structures and merge operations."}],"identifier":"doc:\/\/Forked\/documentation\/Forked","title":"Forked","kind":"symbol","type":"topic","url":"\/documentation\/forked","role":"collection"},"doc://Forked/documentation/Forked/Version/...(_:)-1nziq":{"title":"...(_:)","role":"symbol","abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","kind":"symbol","url":"\/documentation\/forked\/version\/'...(_:)-1nziq"}}}