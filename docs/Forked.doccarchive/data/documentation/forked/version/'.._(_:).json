{"sections":[],"kind":"symbol","metadata":{"modules":[{"name":"Forked","relatedModules":["Swift"]}],"title":"..<(_:)","symbolKind":"op","externalID":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"PartialRangeUpTo","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeUpToV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"roleHeading":"Operator","role":"symbol","extendedModule":"Swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The upper bound for the range.","type":"text"}],"type":"paragraph"}],"name":"maximum"}],"kind":"parameters"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the prefix half-open range operator (prefix "},{"type":"codeVoice","code":"..<"},{"type":"text","text":") to create a"},{"type":"text","text":" "},{"text":"partial range of any type that conforms to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"text":"This example creates a ","type":"text"},{"type":"codeVoice","code":"PartialRangeUpTo<Double>"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"type":"text","text":"any value less than "},{"code":"5.0","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":null,"code":["let upToFive = ..<5.0","","upToFive.contains(3.14)       \/\/ true","upToFive.contains(6.28)       \/\/ false","upToFive.contains(5.0)        \/\/ false"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the start of the collection up to, but not"},{"type":"text","text":" "},{"type":"text","text":"including, the partial range’s upper bound."}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[..<3])","\/\/ Prints \"[10, 20, 30]\""],"type":"codeListing","syntax":null},{"type":"aside","name":"Precondition","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"maximum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'.._(_:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Returns a partial range up to, but not including, its upper bound.","type":"text"}],"references":{"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","abstract":[],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","type":"topic","role":"collectionGroup","kind":"article"},"doc://Forked/documentation/Forked":{"abstract":[{"type":"text","text":"A framework for handling forked data structures and merge operations."}],"identifier":"doc:\/\/Forked\/documentation\/Forked","title":"Forked","kind":"symbol","type":"topic","url":"\/documentation\/forked","role":"collection"},"doc://Forked/documentation/Forked/Version":{"type":"topic","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"kind":"symbol","title":"Version","url":"\/documentation\/forked\/version","role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Version"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}]},"doc://Forked/documentation/Forked/Version/.._(_:)":{"title":"..<(_:)","role":"symbol","abstract":[{"type":"text","text":"Returns a partial range up to, but not including, its upper bound."}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","kind":"symbol","url":"\/documentation\/forked\/version\/'.._(_:)"}}}