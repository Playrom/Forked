{"abstract":[{"type":"text","text":"Returns a closed range that contains both of its bounds."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"minimum","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"maximum"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ClosedRange","preciseIdentifier":"s:SN"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The lower bound for the range.","type":"text"}],"type":"paragraph"}],"name":"minimum"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The upper bound for the range."}]}],"name":"maximum"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"Use the closed range operator ("},{"code":"...","type":"codeVoice"},{"type":"text","text":") to create a closed range of any type"},{"type":"text","text":" "},{"text":"that conforms to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol. This example creates a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ClosedRange<Character>"},{"text":" from “a” up to, and including, “z”.","type":"text"}],"type":"paragraph"},{"code":["let lowercase = \"a\"...\"z\"","print(lowercase.contains(\"z\"))","\/\/ Prints \"true\""],"syntax":null,"type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"code":"minimum <= maximum","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","name":"Precondition"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:_:)"},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ClosedRange","preciseIdentifier":"s:SN","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Operator","symbolKind":"op","modules":[{"name":"Forked","relatedModules":["Swift"]}],"title":"...(_:_:)","extendedModule":"Swift","role":"symbol","externalID":"s:SLsE3zzzoiySNyxGx_xtFZ::SYNTHESIZED::s:6Forked7VersionV"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/forked\/version\/'...(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://Forked/documentation/Forked/Version/...(_:_:)":{"kind":"symbol","type":"topic","abstract":[{"text":"Returns a closed range that contains both of its bounds.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:_:)","title":"...(_:_:)","url":"\/documentation\/forked\/version\/'...(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"ClosedRange","kind":"typeIdentifier","preciseIdentifier":"s:SN"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://Forked/documentation/Forked/Version":{"type":"topic","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"kind":"symbol","title":"Version","url":"\/documentation\/forked\/version","role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Version"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}]},"doc://Forked/documentation/Forked":{"abstract":[{"type":"text","text":"A framework for handling forked data structures and merge operations."}],"identifier":"doc:\/\/Forked\/documentation\/Forked","title":"Forked","kind":"symbol","type":"topic","url":"\/documentation\/forked","role":"collection"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","abstract":[],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","type":"topic","role":"collectionGroup","kind":"article"}}}