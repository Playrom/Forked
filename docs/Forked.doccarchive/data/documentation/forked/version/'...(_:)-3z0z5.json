{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"sections":[],"abstract":[{"type":"text","text":"Returns a partial range extending upward from a lower bound."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'...(_:)-3z0z5"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"internalParam","text":"minimum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s16PartialRangeFromV","text":"PartialRangeFrom","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"minimum","content":[{"inlineContent":[{"type":"text","text":"The lower bound for the range."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use the postfix range operator (postfix ","type":"text"},{"code":"...","type":"codeVoice"},{"type":"text","text":") to create a partial range"},{"text":" ","type":"text"},{"type":"text","text":"of any type that conforms to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol. This example","type":"text"},{"type":"text","text":" "},{"text":"creates a ","type":"text"},{"code":"PartialRangeFrom<Double>","type":"codeVoice"},{"text":" instance that includes any value","type":"text"},{"text":" ","type":"text"},{"text":"greater than or equal to ","type":"text"},{"type":"codeVoice","code":"5.0"},{"text":".","type":"text"}]},{"code":["let atLeastFive = 5.0...","","atLeastFive.contains(4.0)     \/\/ false","atLeastFive.contains(5.0)     \/\/ true","atLeastFive.contains(6.0)     \/\/ true"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the partial range’s lower bound up to the end"},{"text":" ","type":"text"},{"type":"text","text":"of the collection."}]},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","\/\/ Prints \"[40, 50, 60, 70]\""]},{"style":"note","name":"Precondition","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"minimum"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}],"type":"paragraph"}],"type":"aside"}]}],"metadata":{"title":"...(_:)","symbolKind":"op","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..."},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"modules":[{"name":"Forked","relatedModules":["Swift"]}],"roleHeading":"Operator","externalID":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","extendedModule":"Swift","role":"symbol"},"references":{"doc://Forked/documentation/Forked/Version/...(_:)-3z0z5":{"role":"symbol","abstract":[{"text":"Returns a partial range extending upward from a lower bound.","type":"text"}],"title":"...(_:)","url":"\/documentation\/forked\/version\/'...(_:)-3z0z5","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"PartialRangeFrom","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://Forked/documentation/Forked":{"abstract":[{"type":"text","text":"A framework for handling forked data structures and merge operations."}],"identifier":"doc:\/\/Forked\/documentation\/Forked","title":"Forked","kind":"symbol","type":"topic","url":"\/documentation\/forked","role":"collection"},"doc://Forked/documentation/Forked/Version":{"type":"topic","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"kind":"symbol","title":"Version","url":"\/documentation\/forked\/version","role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Version"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}]},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","abstract":[],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","type":"topic","role":"collectionGroup","kind":"article"}}}