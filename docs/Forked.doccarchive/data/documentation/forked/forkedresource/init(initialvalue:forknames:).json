{"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/ForkedResource"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/forkedresource\/init(initialvalue:forknames:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","externalID":"s:6Forked0A8ResourceC12initialValue9forkNamesACyAA16AtomicRepositoryCyqd__GGqd__Sg_SaySSGtcAHRszs8SendableRd__lufc","extendedModule":"Forked","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"RepositoryType","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Repository"},{"text":" and ","type":"text"},{"code":"RepositoryType.Resource","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},"title":"init(initialValue:forkNames:)","modules":[{"name":"Forked"}],"roleHeading":"Initializer","symbolKind":"init","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"initialValue"},{"kind":"text","text":": "},{"text":"R","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"forkNames"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":"])","kind":"text"}]},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forkNames:)","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Convenience for creating simple forked resource for in-memory use."},{"type":"text","text":" "},{"type":"text","text":"Create an in-memory ForkedResource with the given fork names, and initial value."},{"type":"text","text":" "},{"text":"The setup ensures that all forks are synced up with the initial value — if there is one —","type":"text"},{"type":"text","text":" "},{"text":"which is different to the default behavior when you first create a ForkedResource. (In a forked resource,","type":"text"},{"text":" ","type":"text"},{"text":"a new fork is initially empty, and may not be in sync with the main fork until merged.)","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"convenience","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialValue"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"forkNames"},{"text":": [","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"] = []) ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"RepositoryType","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:6Forked16AtomicRepositoryC","text":"AtomicRepository","identifier":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"references":{"doc://Forked/documentation/Forked/ForkedResource":{"url":"\/documentation\/forked\/forkedresource","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForkedResource"}],"abstract":[{"type":"text","text":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and"},{"text":" ","type":"text"},{"text":"provides a systematic approach for merging changes, with support for 3-way merging.","type":"text"}],"title":"ForkedResource","role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForkedResource"}]},"doc://Forked/documentation/Forked":{"abstract":[{"text":"A framework for handling forked data structures and merge operations.","type":"text"}],"type":"topic","title":"Forked","kind":"symbol","url":"\/documentation\/forked","identifier":"doc:\/\/Forked\/documentation\/Forked","role":"collection"},"doc://Forked/documentation/Forked/AtomicRepository":{"navigatorTitle":[{"text":"AtomicRepository","kind":"identifier"}],"type":"topic","kind":"symbol","title":"AtomicRepository","url":"\/documentation\/forked\/atomicrepository","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicRepository"}],"role":"symbol","abstract":[{"type":"text","text":"An atomic repository is one that gets loaded completely into memory."},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"type":"codeVoice","code":"Resource"},{"text":" it contains conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":", the "},{"code":"AtomicRepository","type":"codeVoice"},{"type":"text","text":" is"},{"type":"text","text":" "},{"text":"also ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":", and can be converted to a serialized form and saved as a file."},{"text":" ","type":"text"},{"type":"text","text":"Saving and loading are atomic, that is, the whole repository is loaded from file, and the whole"},{"type":"text","text":" "},{"type":"text","text":"file is written to disk."}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository"},"doc://Forked/documentation/Forked/ForkedResource/init(initialValue:forkNames:)":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forkNames:)","type":"topic","url":"\/documentation\/forked\/forkedresource\/init(initialvalue:forknames:)","role":"symbol","title":"init(initialValue:forkNames:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"RepositoryType","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Repository","type":"codeVoice"},{"type":"text","text":" and "},{"code":"RepositoryType.Resource","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Convenience for creating simple forked resource for in-memory use."},{"type":"text","text":" "},{"text":"Create an in-memory ForkedResource with the given fork names, and initial value.","type":"text"},{"type":"text","text":" "},{"text":"The setup ensures that all forks are synced up with the initial value — if there is one —","type":"text"},{"type":"text","text":" "},{"text":"which is different to the default behavior when you first create a ForkedResource. (In a forked resource,","type":"text"},{"type":"text","text":" "},{"text":"a new fork is initially empty, and may not be in sync with the main fork until merged.)","type":"text"}],"kind":"symbol","fragments":[{"text":"convenience","kind":"keyword"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialValue"},{"kind":"text","text":": "},{"text":"R","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"forkNames"},{"text":": [","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"])"}]}}}