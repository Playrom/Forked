{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"maximum","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The upper bound for the range."}]}]}]},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"text":"Use the prefix half-open range operator (prefix ","type":"text"},{"code":"..<","type":"codeVoice"},{"type":"text","text":") to create a"},{"type":"text","text":" "},{"type":"text","text":"partial range of any type that conforms to the "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"This example creates a "},{"type":"codeVoice","code":"PartialRangeUpTo<Double>"},{"text":" instance that includes","type":"text"},{"type":"text","text":" "},{"text":"any value less than ","type":"text"},{"type":"codeVoice","code":"5.0"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let upToFive = ..<5.0","","upToFive.contains(3.14)       \/\/ true","upToFive.contains(6.28)       \/\/ false","upToFive.contains(5.0)        \/\/ false"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"text":"represent the range from the start of the collection up to, but not","type":"text"},{"text":" ","type":"text"},{"text":"including, the partial range’s upper bound.","type":"text"}]},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[..<3])","\/\/ Prints \"[10, 20, 30]\""],"type":"codeListing","syntax":null},{"type":"aside","style":"note","name":"Precondition","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"maximum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}]}],"kind":"content"}],"metadata":{"extendedModule":"Swift","symbolKind":"op","title":"..<(_:)","roleHeading":"Operator","modules":[{"relatedModules":["Swift"],"name":"Forked"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"externalID":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV"},"abstract":[{"type":"text","text":"Returns a partial range up to, but not including, its upper bound."}],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"sections":[],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'.._(_:)"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://Forked/documentation/Forked/Version":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","title":"Version","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"kind":"symbol","url":"\/documentation\/forked\/version","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Version","kind":"identifier"}],"navigatorTitle":[{"text":"Version","kind":"identifier"}]},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","kind":"article","url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","abstract":[]},"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","type":"topic","kind":"symbol","role":"collection","title":"Forked","abstract":[{"text":"A framework for handling forked data structures and merge operations.","type":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Version/.._(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s16PartialRangeUpToV","kind":"typeIdentifier","text":"PartialRangeUpTo"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a partial range up to, but not including, its upper bound."}],"title":"..<(_:)","type":"topic","role":"symbol","url":"\/documentation\/forked\/version\/'.._(_:)"}}}