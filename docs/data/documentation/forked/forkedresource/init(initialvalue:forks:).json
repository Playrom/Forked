{"abstract":[{"text":"Convenience for creating simple forked resource for in-memory use.","type":"text"},{"type":"text","text":" "},{"text":"Create an in-memory ForkedResource with the given forks, and initial value.","type":"text"},{"text":" ","type":"text"},{"text":"The initial value is optional. If not provided, the main fork will be empty.","type":"text"},{"text":" ","type":"text"},{"text":"The setup ensures that all forks are synced up with the initial value, which is different to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the default behavior when you first create a ForkedResource. (In a forked resource,"},{"text":" ","type":"text"},{"type":"text","text":"a new fork is initially empty, and may not be in sync with the main fork until merged.)"}],"metadata":{"roleHeading":"Initializer","externalID":"s:6Forked0A8ResourceC12initialValue5forksACyAA16AtomicRepositoryCyqd__GGqd__Sg_SayAA4ForkVGtcAHRszs8SendableRd__lufc","extendedModule":"Forked","title":"init(initialValue:forks:)","modules":[{"name":"Forked"}],"fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialValue"},{"kind":"text","text":": "},{"text":"R","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"forks","kind":"externalParam"},{"kind":"text","text":": ["},{"text":"Fork","kind":"typeIdentifier","preciseIdentifier":"s:6Forked4ForkV"},{"text":"])","kind":"text"}],"symbolKind":"init","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"RepositoryType","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Repository"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"RepositoryType.Resource"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}]},"role":"symbol"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"text":"init","kind":"keyword"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"initialValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"? = nil, "},{"text":"forks","kind":"externalParam"},{"text":": [","kind":"text"},{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Fork","kind":"typeIdentifier","preciseIdentifier":"s:6Forked4ForkV","text":"Fork"},{"text":"]) ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"RepositoryType","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:6Forked16AtomicRepositoryC","kind":"typeIdentifier","identifier":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository","text":"AtomicRepository"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"R"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/forkedresource\/init(initialvalue:forks:)"]}],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forks:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/ForkedResource"]]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://Forked/documentation/Forked/ForkedResource":{"abstract":[{"text":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and","type":"text"},{"type":"text","text":" "},{"text":"provides a systematic approach for merging changes, with support for 3-way merging.","type":"text"}],"navigatorTitle":[{"text":"ForkedResource","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ForkedResource","kind":"identifier"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource","title":"ForkedResource","role":"symbol","url":"\/documentation\/forked\/forkedresource","kind":"symbol","type":"topic"},"doc://Forked/documentation/Forked/ForkedResource/init(initialValue:forks:)":{"fragments":[{"text":"convenience","kind":"keyword"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialValue"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"forks"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:6Forked4ForkV","text":"Fork","kind":"typeIdentifier"},{"kind":"text","text":"])"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forks:)","kind":"symbol","title":"init(initialValue:forks:)","url":"\/documentation\/forked\/forkedresource\/init(initialvalue:forks:)","conformance":{"constraints":[{"code":"RepositoryType","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Repository"},{"type":"text","text":" and "},{"code":"RepositoryType.Resource","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","abstract":[{"text":"Convenience for creating simple forked resource for in-memory use.","type":"text"},{"type":"text","text":" "},{"text":"Create an in-memory ForkedResource with the given forks, and initial value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The initial value is optional. If not provided, the main fork will be empty."},{"text":" ","type":"text"},{"text":"The setup ensures that all forks are synced up with the initial value, which is different to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the default behavior when you first create a ForkedResource. (In a forked resource,"},{"type":"text","text":" "},{"text":"a new fork is initially empty, and may not be in sync with the main fork until merged.)","type":"text"}],"type":"topic"},"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","type":"topic","kind":"symbol","role":"collection","title":"Forked","abstract":[{"text":"A framework for handling forked data structures and merge operations.","type":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Fork":{"kind":"symbol","abstract":[{"type":"text","text":"A  type representing a named fork."}],"title":"Fork","identifier":"doc:\/\/Forked\/documentation\/Forked\/Fork","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Fork","kind":"identifier"}],"role":"symbol","url":"\/documentation\/forked\/fork","navigatorTitle":[{"text":"Fork","kind":"identifier"}],"type":"topic"},"doc://Forked/documentation/Forked/AtomicRepository":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicRepository"}],"role":"symbol","title":"AtomicRepository","identifier":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository","navigatorTitle":[{"kind":"identifier","text":"AtomicRepository"}],"url":"\/documentation\/forked\/atomicrepository","abstract":[{"text":"An atomic repository is one that gets loaded completely into memory.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"code":"Resource","type":"codeVoice"},{"text":" it contains conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":", the ","type":"text"},{"type":"codeVoice","code":"AtomicRepository"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"also "},{"code":"Codable","type":"codeVoice"},{"text":", and can be converted to a serialized form and saved as a file.","type":"text"},{"type":"text","text":" "},{"text":"Saving and loading are atomic, that is, the whole repository is loaded from file, and the whole","type":"text"},{"type":"text","text":" "},{"text":"file is written to disk.","type":"text"}],"type":"topic","kind":"symbol"}}}