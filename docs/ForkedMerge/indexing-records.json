[{"kind":"symbol","title":"init(rawValue:)","headings":[],"rawIndexableTextContent":" ","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/init(rawValue:)"},"type":"topLevelPage"}},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/startIndex"},"type":"topLevelPage"},"kind":"symbol","headings":[],"summary":"","rawIndexableTextContent":" ","title":"startIndex"},{"headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/trimmingPrefix(while:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","platforms":[{"introducedAt":"16.0","unavailable":false,"beta":false,"deprecated":false,"name":"iOS"},{"deprecated":false,"unavailable":false,"name":"macOS","beta":false,"introducedAt":"13.0"},{"beta":false,"name":"tvOS","unavailable":false,"introducedAt":"16.0","deprecated":false},{"name":"watchOS","unavailable":false,"beta":false,"introducedAt":"9.0","deprecated":false}],"summary":"","kind":"symbol","title":"trimmingPrefix(while:)"},{"platforms":[{"deprecated":false,"beta":false,"name":"iOS","unavailable":false,"introducedAt":"18.0"},{"beta":false,"deprecated":false,"introducedAt":"15.0","name":"macOS","unavailable":false},{"name":"tvOS","deprecated":false,"unavailable":false,"beta":false,"introducedAt":"18.0"},{"deprecated":false,"introducedAt":"2.0","unavailable":false,"beta":false,"name":"visionOS"},{"name":"watchOS","introducedAt":"11.0","deprecated":false,"unavailable":false,"beta":false}],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/indices(where:)","interfaceLanguage":"swift"}},"summary":"Returns the indices of all the elements that match the given predicate.","kind":"symbol","title":"indices(where:)","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the indices of all the elements that match the given predicate.  A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match. Return Value A set of the indices of the elements for which predicate returns true. Discussion For example, you can use this method to find all the places that a vowel occurs in a string.  O(n), where n is the length of the collection."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","interfaceLanguage":"swift"}},"title":"entriesUniquelyIdentified()","rawIndexableTextContent":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element. The relative order of the remaining elements is preserved. ","summary":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element. The relative order of the remaining elements is preserved.","headings":[],"kind":"symbol"},{"headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/min(by:)"}},"summary":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements.","kind":"symbol","rawIndexableTextContent":"Returns the minimum element in the sequence, using the given predicate as the comparison between elements.  A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Return Value The sequence’s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the min(by:) method on a dictionary to find the key-value pair with the lowest value.  O(n), where n is the length of the sequence.","title":"min(by:)"},{"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/ExpressibleByDictionaryLiteral-Implementations","interfaceLanguage":"swift"}},"headings":[],"title":"ExpressibleByDictionaryLiteral Implementations","kind":"article","summary":""},{"summary":"Default merge, when elements are not mergeable. Eg chars in a string","headings":[],"rawIndexableTextContent":"Default merge, when elements are not mergeable. Eg chars in a string ","title":"merged(withSubordinate:commonAncestor:)","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-6fkpk","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/!=(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":["Discussion"],"kind":"symbol","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."},{"title":"PropertyMerge","summary":"The algorithm used to merge changes to a property. Some properties know how to merge themselves; they conform to Mergeable. Other types have no intrinsic merge, but can be merged by a Merger.","headings":[],"rawIndexableTextContent":"The algorithm used to merge changes to a property. Some properties know how to merge themselves; they conform to Mergeable. Other types have no intrinsic merge, but can be merged by a Merger. ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","interfaceLanguage":"swift"}}},{"summary":"The last element of the collection.","kind":"symbol","title":"last","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last","interfaceLanguage":"swift"}},"headings":["Discussion"],"rawIndexableTextContent":"The last element of the collection.  Discussion If the collection is empty, the value of this property is nil.  O(1)"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/suffix(_:)"}},"summary":"Returns a subsequence, up to the given maximum length, containing the final elements of the collection.","title":"suffix(_:)","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a subsequence, up to the given maximum length, containing the final elements of the collection.  The maximum number of elements to return. maxLength must be greater than or equal to zero. Return Value A subsequence terminating at the end of the collection with at most maxLength elements. Discussion If the maximum length exceeds the number of elements in the collection, the result contains the entire collection.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is equal to maxLength.","kind":"symbol"},{"title":"merged(withSubordinate:commonAncestor:)","rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/merged(withSubordinate:commonAncestor:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","headings":[]},{"headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"},"type":"topLevelPage"},"title":"Collection Implementations","kind":"article","summary":"","rawIndexableTextContent":""},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","interfaceLanguage":"swift"}},"title":"init(rawValue:)","kind":"symbol","summary":"","headings":[],"rawIndexableTextContent":" "},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/!=(_:_:)"}},"title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal.","headings":["Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."},{"headings":["Discussion"],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/!=(_:_:)"}},"summary":"Returns a Boolean value indicating whether two values are not equal.","title":"!=(_:_:)","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."},{"title":"init(_:)","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/init(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":" ","summary":""},{"kind":"symbol","summary":"Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.","rawIndexableTextContent":"Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.  A sequence to insert between each of this sequence’s elements. Return Value The joined sequence of elements. Discussion This example shows how an array of [Int] instances can be joined, using another [Int] instance as the separator: ","title":"joined(separator:)","headings":["Return Value","Discussion"],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined(separator:)-6mvci"},"type":"topLevelPage"}},{"headings":[],"rawIndexableTextContent":" ","title":"endIndex","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/endIndex","interfaceLanguage":"swift"}},"summary":""},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(while:)","interfaceLanguage":"swift"}},"kind":"symbol","title":"prefix(while:)","summary":"Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.","headings":["Discussion"],"rawIndexableTextContent":"Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.  A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again. Discussion O(n), where n is the length of the collection."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/contains(_:)","interfaceLanguage":"swift"}},"title":"contains(_:)","headings":[],"summary":"","rawIndexableTextContent":" ","kind":"symbol"},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/starts(with:)"}},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.","title":"starts(with:)","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.  A sequence to compare to this sequence. Return Value true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. Discussion This example tests whether one countable range begins with the elements of another countable range.  Passing a sequence with no elements or an empty collection as possiblePrefix always results in true.  O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix."},{"kind":"symbol","summary":"","title":"init()","rawIndexableTextContent":" ","headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"title":"Mergeable Implementations","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/Mergeable-Implementations"}},"summary":"","rawIndexableTextContent":"","headings":[],"kind":"article"},{"rawIndexableTextContent":"Returns the difference needed to produce this collection’s ordered elements from the given collection.  The base state. Return Value The difference needed to produce this collection’s ordered elements from the given collection. Discussion This function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference. Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements, or if Element conforms to Hashable.","summary":"Returns the difference needed to produce this collection’s ordered elements from the given collection.","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)","interfaceLanguage":"swift"}},"kind":"symbol","title":"difference(from:)","platforms":[{"introducedAt":"13.0","deprecated":false,"name":"iOS","unavailable":false,"beta":false},{"name":"macOS","introducedAt":"10.15","unavailable":false,"deprecated":false,"beta":false},{"unavailable":false,"beta":false,"deprecated":false,"introducedAt":"13.0","name":"tvOS"},{"deprecated":false,"unavailable":false,"name":"watchOS","introducedAt":"6.0","beta":false}]},{"summary":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.","title":"flatMap(_:)","headings":["Return Value","Discussion"],"kind":"symbol","rawIndexableTextContent":"Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.  A closure that accepts an element of this sequence as its argument and returns a sequence or collection. Return Value The resulting flattened array. Discussion Use this method to receive a single-level collection when your transformation produces a sequence or collection for each element. In this example, note the difference in the result of using map and flatMap with a transformation that returns an array.  In fact, s.flatMap(transform)  is equivalent to Array(s.map(transform).joined()). O(m + n), where n is the length of this sequence and m is the length of the result.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/flatMap(_:)-6q035","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"title":"formIndex(after:)","summary":"Replaces the given index with its successor.","rawIndexableTextContent":"Replaces the given index with its successor.  A valid index of the collection. i must be less than endIndex.","kind":"symbol","headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(after:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"kind":"symbol","summary":"Returns a random element of the collection.","rawIndexableTextContent":"Returns a random element of the collection.  Return Value A random element from the collection. If the collection is empty, the method returns nil. Discussion Call randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:  This method is equivalent to calling randomElement(using:), passing in the system’s default random generator. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","title":"randomElement()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/randomElement()"}}},{"title":"prefix(_:)","kind":"symbol","headings":["Return Value","Discussion"],"summary":"Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.","rawIndexableTextContent":"Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.  The maximum number of elements to return. maxLength must be greater than or equal to zero. Return Value A subsequence starting at the beginning of this collection with at most maxLength elements. Discussion If the maximum length exceeds the number of elements in the collection, the result contains all the elements in the collection.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to select from the beginning of the collection.","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(_:)"},"type":"topLevelPage"}},{"kind":"symbol","platforms":[{"unavailable":false,"deprecated":false,"beta":false,"name":"iOS","introducedAt":"16.0"},{"name":"macOS","beta":false,"introducedAt":"13.0","deprecated":false,"unavailable":false},{"unavailable":false,"name":"tvOS","introducedAt":"16.0","beta":false,"deprecated":false},{"introducedAt":"9.0","name":"watchOS","deprecated":false,"beta":false,"unavailable":false}],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/trimmingPrefix(_:)"}},"summary":"Returns a new collection of the same type by removing prefix from the start of the collection.","headings":["Return Value"],"rawIndexableTextContent":"Returns a new collection of the same type by removing prefix from the start of the collection.  The collection to remove from this collection. Return Value A collection containing the elements of the collection that are not removed by prefix.","title":"trimmingPrefix(_:)"},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/subscript(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","summary":"","headings":[],"rawIndexableTextContent":" ","title":"subscript(_:)"},{"kind":"symbol","headings":["Return Value","Discussion"],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/allSatisfy(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"allSatisfy(_:)","summary":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.","rawIndexableTextContent":"Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.  A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition. Return Value true if the sequence contains only elements that satisfy predicate; otherwise, false. Discussion The following code uses this method to test whether all the names in an array have at least five characters:  If the sequence is empty, this method returns true. O(n), where n is the length of the sequence."},{"headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":"Represents a CRDT for an array of values, such as characters in a string. The stress here is on values, because this array does not guarantee that uniqueness of elements is preserverd. After a merge, it is possible that multiple copies of the same element may be present. Think about merging changes to text: If the user types the same word on two devices at the same time, after the merge, you will have the same word twice — the value is inserted twice, and there is no check that the value already exists in the array. This type is typically useful for strings in collaborative environments, and less useful for storing identifiable objects, since you can end up with duplicates. If you use it for this purpose, you should dedupe after every merge. This type represesnts the array internally as a tree, which generally leads to more intuitive merging of conflicting versions. You could use this as the basis of a basic collaborative editor. Note that it contains a complete history of changes, including deletions, so it grows over time. If you need a more compact representation, consider using a merger instead. ","title":"MergeableArray","summary":"Represents a CRDT for an array of values, such as characters in a string. The stress here is on values, because this array does not guarantee that uniqueness of elements is preserverd. After a merge, it is possible that multiple copies of the same element may be present. Think about merging changes to text: If the user types the same word on two devices at the same time, after the merge, you will have the same word twice — the value is inserted twice, and there is no check that the value already exists in the array. This type is typically useful for strings in collaborative environments, and less useful for storing identifiable objects, since you can end up with duplicates. If you use it for this purpose, you should dedupe after every merge. This type represesnts the array internally as a tree, which generally leads to more intuitive merging of conflicting versions. You could use this as the basis of a basic collaborative editor. Note that it contains a complete history of changes, including deletions, so it grows over time. If you need a more compact representation, consider using a merger instead."},{"rawIndexableTextContent":"Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.  A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again. Discussion O(n), where n is the length of the collection.","kind":"symbol","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/drop(while:)"}},"summary":"Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.","title":"drop(while:)"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol"}},"summary":"The property must be a Mergeable type, and will be merged accordingly to the Mergeable protocol. This is the default algorithm if @Merged has been applied with no algorithm stated.","rawIndexableTextContent":"The property must be a Mergeable type, and will be merged accordingly to the Mergeable protocol. This is the default algorithm if @Merged has been applied with no algorithm stated. ","kind":"symbol","headings":[],"title":"PropertyMerge.mergeableProtocol"},{"rawIndexableTextContent":"Handles merging of forked data structures. Overview ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"}},"title":"ForkedMerge","kind":"symbol","summary":"Handles merging of forked data structures."},{"summary":"Returns a collection of the elements in this collection that are not represented by the given range set.","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/removingSubranges(_:)"},"type":"topLevelPage"},"headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a collection of the elements in this collection that are not represented by the given range set.  A range set representing the indices of the elements to remove. Return Value A collection of the elements that are not in subranges. Discussion For example, this code sample finds the indices of all the vowel characters in the string, and then retrieves a collection that omits those characters.  O(n), where n is the length of the collection.","title":"removingSubranges(_:)","platforms":[{"unavailable":false,"beta":false,"introducedAt":"18.0","name":"iOS","deprecated":false},{"unavailable":false,"name":"macOS","beta":false,"deprecated":false,"introducedAt":"15.0"},{"deprecated":false,"beta":false,"introducedAt":"18.0","name":"tvOS","unavailable":false},{"unavailable":false,"introducedAt":"2.0","name":"visionOS","beta":false,"deprecated":false},{"unavailable":false,"introducedAt":"11.0","beta":false,"name":"watchOS","deprecated":false}]},{"kind":"symbol","summary":"Returns a Boolean value indicating whether two values are not equal.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/!=(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":["Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","title":"!=(_:_:)"},{"headings":[],"rawIndexableTextContent":"This is a non-recursive version used when the values are not mergeable. ","title":"merged(withSubordinate:commonAncestor:)","summary":"This is a non-recursive version used when the values are not mergeable.","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/merged(withSubordinate:commonAncestor:)-2fr3y"},"type":"topLevelPage"}},{"kind":"symbol","summary":"","title":"merge(_:withSubordinate:commonAncestor:)","headings":[],"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger\/merge(_:withSubordinate:commonAncestor:)","interfaceLanguage":"swift"}}},{"rawIndexableTextContent":"Returns a view presenting the elements of the collection in reverse order.  Discussion You can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:  If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.  O(1)","kind":"symbol","title":"reversed()","headings":["Discussion"],"summary":"Returns a view presenting the elements of the collection in reverse order.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"title":"compare(_:_:)","summary":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators","headings":["Discussion"],"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/compare(_:_:)","interfaceLanguage":"swift"}},"platforms":[{"beta":false,"name":"iOS","introducedAt":"15.0","deprecated":false,"unavailable":false},{"deprecated":false,"name":"macOS","beta":false,"introducedAt":"12.0","unavailable":false},{"introducedAt":"15.0","deprecated":false,"name":"tvOS","unavailable":false,"beta":false},{"name":"watchOS","unavailable":false,"deprecated":false,"beta":false,"introducedAt":"8.0"}],"rawIndexableTextContent":"If lhs is ordered before rhs in the ordering described by the given sequence of SortComparators  Discussion The first element of the sequence of comparators specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values."},{"title":"hash(into:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/hash(into:)","interfaceLanguage":"swift"}},"headings":[],"kind":"symbol","rawIndexableTextContent":" ","summary":""},{"kind":"article","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations"}},"summary":"","title":"Mergeable Implementations","rawIndexableTextContent":""},{"kind":"symbol","title":"init()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger\/init()","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","summary":"","headings":[]},{"headings":["Return Value","Discussion"],"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(_:_:)","interfaceLanguage":"swift"}},"title":"reduce(_:_:)","summary":"Returns the result of combining the elements of the sequence using the given closure.","rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed. A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller. Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. Discussion Use the reduce(_:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of numbers to find their sum or product. The nextPartialResult closure is called sequentially with an accumulating value initialized to initialResult and each element of the sequence. This example shows how to find the sum of an array of numbers.  When numbers.reduce(_:_:) is called, the following steps occur: The nextPartialResult closure is called with initialResult—0 in this case—and the first element of numbers, returning the sum: 1. The closure is called again repeatedly with the previous call’s return value and each element of the sequence. When the sequence is exhausted, the last value returned from the closure is returned to the caller. If the sequence has no elements, nextPartialResult is never executed and initialResult is the result of the call to reduce(_:_:). O(n), where n is the length of the sequence."},{"title":"flatMap(_:)","summary":"","rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/flatMap(_:)-7nexl"},"type":"topLevelPage"},"platforms":[],"headings":[]},{"title":"lexicographicallyPrecedes(_:)","kind":"symbol","rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.  A sequence to compare to this sequence. Return Value true if this sequence precedes other in a dictionary ordering; otherwise, false. Discussion This example uses the lexicographicallyPrecedes method to test which array of integers comes first in a lexicographical ordering.  This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.  If you are sorting strings to present to the end user, use String APIs that perform localized comparison. O(m), where m is the lesser of the length of the sequence and the length of other.","summary":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":["Return Value","Discussion"]},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/count","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"kind":"symbol","rawIndexableTextContent":" ","summary":"","title":"count"},{"kind":"symbol","summary":"If the values are themselves Mergeable, but not conflict-free, we can only use 3-way merge with common ancestor. You get a recursive merge, as the dictionary merges, but also the values in the dictionary","headings":[],"rawIndexableTextContent":"If the values are themselves Mergeable, but not conflict-free, we can only use 3-way merge with common ancestor. You get a recursive merge, as the dictionary merges, but also the values in the dictionary ","title":"merged(withSubordinate:commonAncestor:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/merged(withSubordinate:commonAncestor:)-7j2cc"}}},{"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value indicating whether two values are not equal.","kind":"symbol","title":"!=(_:_:)","headings":["Discussion"]},{"kind":"article","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"},"type":"topLevelPage"},"summary":"","headings":[],"title":"BidirectionalCollection Implementations","rawIndexableTextContent":""},{"title":"indices(of:)","headings":["Return Value","Discussion"],"kind":"symbol","summary":"Returns the indices of all the elements that are equal to the given element.","rawIndexableTextContent":"Returns the indices of all the elements that are equal to the given element.  An element to look for in the collection. Return Value A set of the indices of the elements that are equal to element. Discussion For example, you can use this method to find all the places that a particular letter occurs in a string.  O(n), where n is the length of the collection.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/indices(of:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"platforms":[{"introducedAt":"18.0","name":"iOS","unavailable":false,"deprecated":false,"beta":false},{"name":"macOS","unavailable":false,"beta":false,"deprecated":false,"introducedAt":"15.0"},{"introducedAt":"18.0","deprecated":false,"name":"tvOS","beta":false,"unavailable":false},{"deprecated":false,"beta":false,"introducedAt":"2.0","unavailable":false,"name":"visionOS"},{"deprecated":false,"name":"watchOS","unavailable":false,"beta":false,"introducedAt":"11.0"}]},{"rawIndexableTextContent":" ","headings":[],"title":"merge(_:withSubordinate:commonAncestor:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger\/merge(_:withSubordinate:commonAncestor:)"}},"summary":"","kind":"symbol"},{"summary":"Returns the elements of the sequence, sorted using the given comparator to compare elements.","headings":["Return Value"],"rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given comparator to compare elements.  The comparator to use in ordering elements Return Value An array of the elements sorted using comparator.","platforms":[{"deprecated":false,"name":"iOS","beta":false,"introducedAt":"15.0","unavailable":false},{"unavailable":false,"beta":false,"deprecated":false,"name":"macOS","introducedAt":"12.0"},{"beta":false,"introducedAt":"15.0","deprecated":false,"name":"tvOS","unavailable":false},{"introducedAt":"8.0","beta":false,"unavailable":false,"name":"watchOS","deprecated":false}],"title":"sorted(using:)","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/sorted(using:)-745kq"}}},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropFirst(_:)"},"type":"topLevelPage"},"summary":"Returns a subsequence containing all but the given number of initial elements.","title":"dropFirst(_:)","kind":"symbol","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a subsequence containing all but the given number of initial elements.  The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero. Return Value A subsequence starting after the specified number of elements. Discussion If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop from the beginning of the collection."},{"title":"ExpressibleByArrayLiteral Implementations","kind":"article","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/ExpressibleByArrayLiteral-Implementations"},"type":"topLevelPage"},"rawIndexableTextContent":"","headings":[]},{"summary":"","kind":"symbol","headings":[],"rawIndexableTextContent":" ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger\/init()"},"type":"topLevelPage"},"title":"init()"},{"rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"TextMerger","kind":"symbol","summary":"","headings":[]},{"kind":"symbol","summary":"","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/init(from:)"}},"rawIndexableTextContent":" "},{"title":"withContiguousStorageIfAvailable(_:)","rawIndexableTextContent":" ","headings":[],"kind":"symbol","summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/withContiguousStorageIfAvailable(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"kind":"symbol","summary":"Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.","title":"index(_:offsetBy:limitedBy:)","rawIndexableTextContent":"Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.  A valid index of the array. The distance to offset i. A valid index of the collection to use as a limit. If distance > 0, limit should be greater than i to have any effect. Likewise, if distance < 0, limit should be less than i to have any effect. Return Value An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil. Discussion The following example obtains an index advanced four positions from an array’s starting index and then prints the element at that position. The operation doesn’t require going beyond the limiting numbers.endIndex value, so it succeeds.  The next example attempts to retrieve an index ten positions from numbers.startIndex, but fails, because that distance is beyond the index passed as limit.  The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds. O(1)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"}},"headings":["Return Value","Discussion"]},{"title":"suffix(from:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/suffix(from:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Returns a subsequence from the specified position to the end of the collection.  The index at which to start the resulting subsequence. start must be a valid index of the collection. Return Value A subsequence starting at the start position. Discussion The following example searches for the index of the number 40 in an array of integers, and then prints the suffix of the array starting at that index:  Passing the collection’s endIndex as the start parameter results in an empty subsequence.  Using the suffix(from:) method is equivalent to using a partial range from the index as the collection’s subscript. The subscript notation is preferred over suffix(from:).  O(1)","summary":"Returns a subsequence from the specified position to the end of the collection.","kind":"symbol"},{"headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/hash(into:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"hash(into:)","summary":"","rawIndexableTextContent":" "},{"rawIndexableTextContent":"","kind":"article","title":"ExpressibleByArrayLiteral Implementations","summary":"","headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"title":"PropertyMerge.arrayMerge","kind":"symbol","summary":"Will merge as an array of values. Elements must be Equatable. When there is a conflict, it will determine the changes made to each version, and merge with an algorithm that keeps related changes together (eg editing a word). Does not guarantee uniqueness of elements after merge: there can be duplicates created, so it is more suitable to value types like characters in a string. than it is to identifiable types.","rawIndexableTextContent":"Will merge as an array of values. Elements must be Equatable. When there is a conflict, it will determine the changes made to each version, and merge with an algorithm that keeps related changes together (eg editing a word). Does not guarantee uniqueness of elements after merge: there can be duplicates created, so it is more suitable to value types like characters in a string. than it is to identifiable types. ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge"}}},{"headings":["Return Value"],"kind":"symbol","title":"firstRange(of:)","platforms":[{"deprecated":false,"unavailable":false,"introducedAt":"16.0","beta":false,"name":"iOS"},{"deprecated":false,"beta":false,"name":"macOS","introducedAt":"13.0","unavailable":false},{"unavailable":false,"introducedAt":"16.0","deprecated":false,"name":"tvOS","beta":false},{"deprecated":false,"beta":false,"name":"watchOS","unavailable":false,"introducedAt":"9.0"}],"summary":"Finds and returns the range of the first occurrence of a given collection within this collection.","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstRange(of:)-6sfhc"},"type":"topLevelPage"},"rawIndexableTextContent":"Finds and returns the range of the first occurrence of a given collection within this collection.  The collection to search for. Return Value A range in the collection of the first occurrence of sequence. Returns nil if sequence is not found."},{"rawIndexableTextContent":"Returns a subsequence from the start of the collection through the specified position.  The index of the last element to include in the resulting subsequence. position must be a valid index of the collection that is not equal to the endIndex property. Return Value A subsequence up to, and including, the given position. Discussion The resulting subsequence includes the element at the position specified by the through parameter. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, and including, that index:  Using the prefix(through:) method is equivalent to using a partial closed range as the collection’s subscript. The subscript notation is preferred over prefix(through:).  O(1)","headings":["Return Value","Discussion"],"summary":"Returns a subsequence from the start of the collection through the specified position.","kind":"symbol","title":"prefix(through:)","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":["Return Value","Discussion"],"title":"map(_:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/map(_:)-8i05f"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Return Value An array containing the transformed elements of this sequence. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters.  O(n), where n is the length of the sequence.","summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements."},{"title":"Equatable Implementations","kind":"article","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations"}},"summary":"","rawIndexableTextContent":"","headings":[]},{"title":"merge(_:withSubordinate:commonAncestor:)","headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger\/merge(_:withSubordinate:commonAncestor:)"},"type":"topLevelPage"},"summary":""},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/filter(_:)-1vis2","interfaceLanguage":"swift"},"type":"topLevelPage"},"platforms":[{"introducedAt":"17.0","beta":false,"deprecated":false,"name":"iOS","unavailable":false},{"name":"macOS","deprecated":false,"beta":false,"unavailable":false,"introducedAt":"14.0"},{"unavailable":false,"deprecated":false,"introducedAt":"17.0","name":"tvOS","beta":false},{"deprecated":false,"name":"watchOS","unavailable":false,"beta":false,"introducedAt":"10.0"}],"summary":"","headings":[],"title":"filter(_:)","kind":"symbol","rawIndexableTextContent":" "},{"rawIndexableTextContent":" ","kind":"symbol","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/init(dictionaryLiteral:)"},"type":"topLevelPage"},"headings":[],"title":"init(dictionaryLiteral:)"},{"headings":["Return Value","Discussion"],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/sorted(by:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.","rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.  A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Return Value A sorted array of the sequence’s elements. Discussion When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate. In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.  You also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.  Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.  The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) The sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order. O(n log n), where n is the length of the sequence.","title":"sorted(by:)","kind":"symbol"},{"title":"SetMerger","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger"},"type":"topLevelPage"},"summary":"Merges an array by treating the contained elements as values.","headings":[],"rawIndexableTextContent":"Merges an array by treating the contained elements as values. "},{"summary":"","headings":[],"rawIndexableTextContent":"","kind":"article","title":"Decodable Implementations","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/Decodable-Implementations"},"type":"topLevelPage"}},{"summary":"Offsets the given index by the specified distance.","rawIndexableTextContent":"Offsets the given index by the specified distance.  A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. Discussion The value passed as distance must not offset i beyond the bounds of the collection. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","kind":"symbol","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:)","interfaceLanguage":"swift"}},"title":"formIndex(_:offsetBy:)"},{"summary":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:by:)","interfaceLanguage":"swift"}},"headings":["Return Value","Discussion"],"title":"lexicographicallyPrecedes(_:by:)","rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.  A sequence to compare to this sequence. A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Return Value true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This method implements the mathematical notion of lexicographical ordering, which has no connection to Unicode.  If you are sorting strings to present to the end user, use String APIs that perform localized comparison instead. O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/mergeableArray","interfaceLanguage":"swift"}},"kind":"symbol","headings":[],"rawIndexableTextContent":"Uses a MergeableArray type as the backing of the variable. ","title":"PropertyBacking.mergeableArray","summary":"Uses a MergeableArray type as the backing of the variable."},{"rawIndexableTextContent":"","summary":"","kind":"article","title":"Equatable Implementations","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations"}},"headings":[]},{"kind":"symbol","headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/keys","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"keys","summary":"","rawIndexableTextContent":" "},{"kind":"symbol","summary":"Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)"},"type":"topLevelPage"},"headings":["Return Value","Discussion"],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","rawIndexableTextContent":"Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.  The element that should be split upon. The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true. Return Value An array of subsequences, split from this collection’s elements. Discussion The resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the collection are not returned as part of any subsequence. The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string at each space character (” “). The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the collection."},{"summary":"","title":"Equatable Implementations","kind":"article","headings":[],"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/Equatable-Implementations","interfaceLanguage":"swift"}}},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last(where:)"}},"rawIndexableTextContent":"Returns the last element of the sequence that satisfies the given predicate.  A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match. Return Value The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate. Discussion This example uses the last(where:) method to find the last negative number in an array of integers:  O(n), where n is the length of the collection.","headings":["Return Value","Discussion"],"title":"last(where:)","summary":"Returns the last element of the sequence that satisfies the given predicate."},{"rawIndexableTextContent":"Returns the result of combining the elements of the sequence using the given closure.  The value to use as the initial accumulating value. A closure that updates the accumulating value with an element of the sequence. Return Value The final accumulated value. If the sequence has no elements, the result is initialResult. Discussion Use the reduce(into:_:) method to produce a single value from the elements of an entire sequence. For example, you can use this method on an array of integers to filter adjacent equal entries or count frequencies. This method is preferred over reduce(_:_:) for efficiency when the result is a copy-on-write type, for example an Array or a Dictionary. The updateAccumulatingResult closure is called sequentially with a mutable accumulating value initialized to initialResult and each element of the sequence. This example shows how to build a dictionary of letter frequencies of a string.  When letters.reduce(into:_:) is called, the following steps occur: The updateAccumulatingResult closure is called with the initial accumulating value—[:] in this case—and the first character of letters, modifying the accumulating value by setting 1 for the key \"a\". The closure is called again repeatedly with the updated accumulating value and each element of the sequence. When the sequence is exhausted, the accumulating value is returned to the caller. If the sequence has no elements, updateAccumulatingResult is never executed and initialResult is the result of the call to reduce(into:_:). O(n), where n is the length of the sequence.","kind":"symbol","summary":"Returns the result of combining the elements of the sequence using the given closure.","title":"reduce(into:_:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(into:_:)"},"type":"topLevelPage"},"headings":["Return Value","Discussion"]},{"kind":"symbol","title":"merge(_:withSubordinate:commonAncestor:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2"},"type":"topLevelPage"},"summary":"This function merges two arrays of elements that are identifiable and mergeable. The result is different to merging where the elements are not mergeable. This call will recurse the merge.","rawIndexableTextContent":"This function merges two arrays of elements that are identifiable and mergeable. The result is different to merging where the elements are not mergeable. This call will recurse the merge. ","headings":[]},{"summary":"","kind":"article","title":"Mergeable Implementations","headings":[],"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/Mergeable-Implementations","interfaceLanguage":"swift"}}},{"rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains the given element.  The element to find in the sequence. Return Value true if the element was found in the sequence; otherwise, false. Discussion This example checks to see whether a favorite actor is in an array storing a movie’s cast.  O(n), where n is the length of the sequence.","headings":["Return Value","Discussion"],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/contains(_:)"},"type":"topLevelPage"},"title":"contains(_:)","summary":"Returns a Boolean value indicating whether the sequence contains the given element.","kind":"symbol"},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/contains(where:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"contains(where:)","rawIndexableTextContent":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.  A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match. Return Value true if the sequence contains an element that satisfies predicate; otherwise, false. Discussion You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.  Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.  O(n), where n is the length of the sequence.","headings":["Return Value","Discussion"],"summary":"Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate."},{"headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the last index where the specified value appears in the collection.  An element to search for in the collection. Return Value The last index where element is found. If element is not found in the collection, this method returns nil. Discussion After using lastIndex(of:) to find the position of the last instance of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.  O(n), where n is the length of the collection.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(of:)"}},"summary":"Returns the last index where the specified value appears in the collection.","title":"lastIndex(of:)","kind":"symbol"},{"kind":"symbol","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the first element of the sequence that satisfies the given predicate.  A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match. Return Value The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate. Discussion The following example uses the first(where:) method to find the first negative number in an array of integers:  O(n), where n is the length of the sequence.","summary":"Returns the first element of the sequence that satisfies the given predicate.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/first(where:)","interfaceLanguage":"swift"}},"title":"first(where:)"},{"summary":"Represents a mergable type for a dictionary of values. Uses a CRDT algorithm.","rawIndexableTextContent":"Represents a mergable type for a dictionary of values. Uses a CRDT algorithm. ","title":"MergeableDictionary","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","interfaceLanguage":"swift"}},"headings":[]},{"title":"MergeableValue","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue"},"type":"topLevelPage"},"summary":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it. This allows the type to automatically merge simply by choosing the value that was written later. Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely. Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","headings":[],"rawIndexableTextContent":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it. This allows the type to automatically merge simply by choosing the value that was written later. Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely. Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr "},{"rawIndexableTextContent":"Returns a subsequence from the start of the collection up to, but not including, the specified position.  The “past the end” index of the resulting subsequence. end must be a valid index of the collection. Return Value A subsequence up to, but not including, the end position. Discussion The resulting subsequence does not include the element at the position end. The following example searches for the index of the number 40 in an array of integers, and then prints the prefix of the array up to, but not including, that index:  Passing the collection’s starting index as the end parameter results in an empty subsequence.  Using the prefix(upTo:) method is equivalent to using a partial half-open range as the collection’s subscript. The subscript notation is preferred over prefix(upTo:).  O(1)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(upTo:)"},"type":"topLevelPage"},"title":"prefix(upTo:)","kind":"symbol","headings":["Return Value","Discussion"],"summary":"Returns a subsequence from the start of the collection up to, but not including, the specified position."},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","kind":"symbol","headings":[],"title":"values","rawIndexableTextContent":" "},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"}},"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","summary":"Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.  The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max. If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true. A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element. Return Value An array of subsequences, split from this collection’s elements. Discussion The resulting array consists of at most maxSplits + 1 subsequences. Elements that are used to split the sequence are not returned as part of any subsequence. The following examples show the effects of the maxSplits and omittingEmptySubsequences parameters when splitting a string using a closure that matches spaces. The first use of split returns each word that was originally separated by one or more spaces.  The second example passes 1 for the maxSplits parameter, so the original string is split just once, into two new strings.  The final example passes false for the omittingEmptySubsequences parameter, so the returned array contains empty strings where spaces were repeated.  O(n), where n is the length of the collection.","kind":"symbol"},{"title":"joined(separator:)","headings":["Return Value","Discussion"],"summary":"Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined(separator:)-75cc1","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":"Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.  A string to insert between each of the elements in this sequence. The default separator is an empty string. Return Value A single, concatenated string. Discussion The following example shows how an array of strings can be joined to a single, comma-separated string: "},{"platforms":[{"deprecated":false,"unavailable":false,"beta":false,"name":"iOS","introducedAt":"15.0"},{"unavailable":false,"deprecated":false,"name":"macOS","beta":false,"introducedAt":"12.0"},{"unavailable":false,"beta":false,"name":"tvOS","deprecated":false,"introducedAt":"15.0"},{"name":"watchOS","introducedAt":"8.0","deprecated":false,"unavailable":false,"beta":false}],"summary":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements.","title":"sorted(using:)","rawIndexableTextContent":"Returns the elements of the sequence, sorted using the given array of SortComparators to compare elements.  An array of comparators used to compare elements. The first comparator specifies the primary comparator to be used in sorting the sequence’s elements. Any subsequent comparators are used to further refine the order of elements with equal values. Return Value An array of the elements sorted using comparators.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/sorted(using:)-4ox5r","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":["Return Value"],"kind":"symbol"},{"summary":"","rawIndexableTextContent":" ","title":"subscript(_:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/subscript(_:)","interfaceLanguage":"swift"}},"headings":[],"kind":"symbol"},{"summary":"Uses a MergeableDictionary type as the backing of the variable.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/mergeableDictionary","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"PropertyBacking.mergeableDictionary","headings":[],"rawIndexableTextContent":"Uses a MergeableDictionary type as the backing of the variable. "},{"title":"MergeableSet","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","interfaceLanguage":"swift"}},"headings":[],"summary":"Observed-Remove Set. Can add and remove like a normal set. Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","rawIndexableTextContent":"Observed-Remove Set. Can add and remove like a normal set. Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr ","kind":"symbol"},{"title":"merged(withSubordinate:commonAncestor:)","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/merged(withSubordinate:commonAncestor:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","summary":"","headings":[],"rawIndexableTextContent":" "},{"summary":"","title":"init(from:)","rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(from:)"},"type":"topLevelPage"},"headings":[]},{"kind":"symbol","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Offsets the given index by the specified distance, or so that it equals the given limiting index.  A valid index of the collection. The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol. A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect. Return Value true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit. Discussion The value passed as distance must not offset i beyond the bounds of the collection, unless the index passed as limit prevents offsetting beyond those bounds. O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the absolute value of distance.","summary":"Offsets the given index by the specified distance, or so that it equals the given limiting index.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(_:offsetBy:limitedBy:)"}},"title":"formIndex(_:offsetBy:limitedBy:)"},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count(where:)","interfaceLanguage":"swift"}},"title":"count(where:)","rawIndexableTextContent":"Returns the number of elements in the sequence that satisfy the given predicate.  A closure that takes each element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the count. Return Value The number of elements in the sequence that satisfy the given predicate. Discussion You can use this method to count the number of elements that pass a test. The following example finds the number of names that are fewer than five characters long:  To find the number of times a specific element appears in the sequence, use the equal to operator (==) in the closure to test for a match.  The sequence must be finite.","headings":["Return Value","Discussion"],"summary":"Returns the number of elements in the sequence that satisfy the given predicate.","kind":"symbol"},{"summary":"Applies the array merge algorithm to the characters in a string. This is suitable for any type of shared text, which may have conflicting edits, like a collaborative editor. The variable must be a String.","headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"Applies the array merge algorithm to the characters in a string. This is suitable for any type of shared text, which may have conflicting edits, like a collaborative editor. The variable must be a String. ","kind":"symbol","title":"PropertyMerge.textMerge"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(after:)"}},"headings":[],"title":"index(after:)","summary":"","rawIndexableTextContent":" ","kind":"symbol"},{"summary":"","headings":[],"kind":"symbol","rawIndexableTextContent":" ","title":"dictionary","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/dictionary","interfaceLanguage":"swift"}}},{"title":"insert(_:)","summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/insert(_:)","interfaceLanguage":"swift"}}},{"headings":[],"rawIndexableTextContent":"","kind":"article","title":"Merger Implementations","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations"}},"summary":""},{"summary":"For non-mergeables that are identifiable and equatable. Here we can at least see which branch has changed, and choose that branch, even if we can’t “fuse” the elements.","rawIndexableTextContent":"For non-mergeables that are identifiable and equatable. Here we can at least see which branch has changed, and choose that branch, even if we can’t “fuse” the elements. ","kind":"symbol","headings":[],"title":"merged(withSubordinate:commonAncestor:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f"},"type":"topLevelPage"}},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled.  Return Value A shuffled array of this sequence’s elements. Discussion For example, you can shuffle the numbers between 0 and 9 by calling the shuffled() method on that range:  This method is equivalent to calling shuffled(using:), passing in the system’s default random generator. O(n), where n is the length of the sequence.","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/shuffled()","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"shuffled()","summary":"Returns the elements of the sequence, shuffled.","headings":["Return Value","Discussion"]},{"headings":[],"title":"init(_:)","rawIndexableTextContent":" ","kind":"symbol","summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/init(_:)","interfaceLanguage":"swift"}}},{"kind":"symbol","title":"insert(_:at:)","headings":[],"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","interfaceLanguage":"swift"}},"summary":""},{"title":"Equatable Implementations","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/Equatable-Implementations"},"type":"topLevelPage"},"headings":[],"kind":"article","rawIndexableTextContent":""},{"rawIndexableTextContent":"","title":"Decodable Implementations","kind":"article","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/Decodable-Implementations"}},"headings":[],"summary":""},{"kind":"symbol","rawIndexableTextContent":"The storage used for a property. These storage types have built in systems for merging. They maintain the information they need (eg history) to properly merge even if with copies that have conflicting changes. ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking"}},"title":"PropertyBacking","summary":"The storage used for a property. These storage types have built in systems for merging. They maintain the information they need (eg history) to properly merge even if with copies that have conflicting changes."},{"summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":" ","title":"init(_:)","kind":"symbol"},{"kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ranges(of:)"},"type":"topLevelPage"},"summary":"Finds and returns the ranges of the all occurrences of a given sequence within the collection.","platforms":[{"beta":false,"introducedAt":"16.0","name":"iOS","deprecated":false,"unavailable":false},{"unavailable":false,"beta":false,"introducedAt":"13.0","name":"macOS","deprecated":false},{"deprecated":false,"unavailable":false,"beta":false,"name":"tvOS","introducedAt":"16.0"},{"unavailable":false,"introducedAt":"9.0","name":"watchOS","beta":false,"deprecated":false}],"headings":["Return Value"],"rawIndexableTextContent":"Finds and returns the ranges of the all occurrences of a given sequence within the collection.  The sequence to search for. Return Value A collection of ranges of all occurrences of other. Returns an empty collection if other is not found.","title":"ranges(of:)"},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)","interfaceLanguage":"swift"}},"headings":[],"summary":"","title":"remove(at:)","rawIndexableTextContent":" "},{"rawIndexableTextContent":"Returns an iterator over the elements of the collection. ","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/makeIterator()","interfaceLanguage":"swift"}},"title":"makeIterator()","summary":"Returns an iterator over the elements of the collection."},{"kind":"symbol","title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal.","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/!=(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":["Discussion"]},{"summary":"Returns the elements of the sequence, sorted.","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the elements of the sequence, sorted.  Return Value A sorted array of the sequence’s elements. Discussion You can sort any sequence of elements that conform to the Comparable protocol by calling this method. Elements are sorted in ascending order. Here’s an example of sorting a list of students’ names. Strings in Swift conform to the Comparable protocol, so the names are sorted in ascending order according to the less-than operator (<).  To sort the elements of your sequence in descending order, pass the greater-than operator (>) to the sorted(by:) method.  The sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements that compare as equal. O(n log n), where n is the length of the sequence.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/sorted()"}},"kind":"symbol","title":"sorted()"},{"headings":[],"summary":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.","rawIndexableTextContent":"A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily. ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lazy"},"type":"topLevelPage"},"kind":"symbol","title":"lazy"},{"platforms":[{"beta":false,"introducedAt":"13.0","deprecated":false,"name":"iOS","unavailable":false},{"introducedAt":"10.15","beta":false,"deprecated":false,"name":"macOS","unavailable":false},{"introducedAt":"13.0","unavailable":false,"name":"tvOS","beta":false,"deprecated":false},{"deprecated":false,"beta":false,"name":"watchOS","unavailable":false,"introducedAt":"6.0"}],"rawIndexableTextContent":"Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.  The base state. A closure that returns a Boolean value indicating whether two elements are equivalent. Return Value The difference needed to produce the receiver’s state from the parameter’s state. Discussion This function does not infer element moves. If you need to infer moves, call the inferringMoves() method on the resulting difference. Worst case performance is O(n * m), where n is the count of this collection and m is other.count. You can expect faster execution when the collections share many common elements.","title":"difference(from:by:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:by:)"},"type":"topLevelPage"},"headings":["Return Value","Discussion"],"kind":"symbol","summary":"Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test."},{"rawIndexableTextContent":"A Boolean value indicating whether the collection is empty.  Discussion When you need to check whether your collection is empty, use the isEmpty property instead of checking that the count property is equal to zero. For collections that don’t conform to RandomAccessCollection, accessing the count property iterates through the elements of the collection.  O(1)","title":"isEmpty","kind":"symbol","summary":"A Boolean value indicating whether the collection is empty.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/isEmpty"}},"headings":["Discussion"]},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/map(_:)-4ccaf"},"type":"topLevelPage"},"title":"map(_:)","headings":["Return Value","Discussion"],"summary":"Returns an array containing the results of mapping the given closure over the sequence’s elements.","kind":"symbol","rawIndexableTextContent":"Returns an array containing the results of mapping the given closure over the sequence’s elements.  A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type. Return Value An array containing the transformed elements of this sequence. Discussion In this example, map is used first to convert the names in the array to lowercase strings and then to count their characters. "},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/init()"}},"title":"init()","summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol"},{"summary":"","headings":[],"kind":"symbol","rawIndexableTextContent":" ","title":"init()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger\/init()","interfaceLanguage":"swift"}}},{"kind":"symbol","rawIndexableTextContent":" ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/count"},"type":"topLevelPage"},"title":"count","summary":"","headings":[]},{"kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-98zh8","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"merge(_:withSubordinate:commonAncestor:)","summary":"This is the default for when the elements are note mergeable.","headings":[],"rawIndexableTextContent":"This is the default for when the elements are note mergeable. "},{"title":"formatted()","kind":"symbol","rawIndexableTextContent":" ","headings":[],"summary":"","platforms":[{"name":"iOS","deprecated":false,"unavailable":false,"beta":false,"introducedAt":"15.0"},{"beta":false,"introducedAt":"12.0","name":"macOS","unavailable":false,"deprecated":false},{"name":"tvOS","deprecated":false,"introducedAt":"15.0","beta":false,"unavailable":false},{"beta":false,"unavailable":false,"introducedAt":"8.0","deprecated":false,"name":"watchOS"}],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formatted()","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/Equatable-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","rawIndexableTextContent":"","title":"Equatable Implementations","kind":"article"},{"rawIndexableTextContent":"Returns the minimum element in the sequence.  Return Value The sequence’s minimum element. If the sequence has no elements, returns nil. Discussion This example finds the smallest value in an array of height measurements.  O(n), where n is the length of the sequence.","headings":["Return Value","Discussion"],"title":"min()","kind":"symbol","summary":"Returns the minimum element in the sequence.","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/min()"},"type":"topLevelPage"}},{"title":"enumerated()","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/enumerated()","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","summary":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.  Return Value A sequence of pairs enumerating the sequence. Discussion This example enumerates the characters of the string “Swift” and prints each character along with its place in the string.  When you enumerate a collection, the integer part of each pair is a counter for the enumeration, but is not necessarily the index of the paired value. These counters can be used as indices only in instances of zero-based, integer-indexed collections, such as Array and ContiguousArray. For other collections the counters may be out of range or of the wrong type to use as an index. To iterate over the elements of a collection with its indices, use the zip(_:_:) function. This example iterates over the indices and elements of a set, building a list consisting of indices of names with five or fewer letters.  Now that the shorterIndices array holds the indices of the shorter names in the names set, you can use those indices to access elements in the set.  O(1)"},{"headings":[],"title":"merge(_:withSubordinate:commonAncestor:)","rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger\/merge(_:withSubordinate:commonAncestor:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","summary":""},{"rawIndexableTextContent":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness.  The random number generator to use when shuffling the sequence. Return Value An array of this sequence’s elements in a shuffled order. Discussion You use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:  O(n), where n is the length of the sequence. The algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","title":"shuffled(using:)","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/shuffled(using:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":["Return Value","Discussion"],"summary":"Returns the elements of the sequence, shuffled using the given generator as a source for randomness."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/filter(_:)-77qlu","interfaceLanguage":"swift"}},"summary":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.","kind":"symbol","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.  A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array. Return Value An array of the elements that isIncluded allowed. Discussion In this example, filter(_:) is used to include only names shorter than five characters.  O(n), where n is the length of the sequence.","title":"filter(_:)"},{"summary":"Merges dictionaries. When there is a conflict, it will merge using a MergeableDictionary for each dictionary. If the value type is Mergeable, the dictionary will be merged recursing into the values.","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Merges dictionaries. When there is a conflict, it will merge using a MergeableDictionary for each dictionary. If the value type is Mergeable, the dictionary will be merged recursing into the values. ","title":"PropertyMerge.dictionaryMerge"},{"kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":"Merges an array by treating the contained elements as values. ","summary":"Merges an array by treating the contained elements as values.","title":"DictionaryMerger"},{"headings":[],"rawIndexableTextContent":"A merger is a type that applies a merging algorithm to merge two values together. The values are typically of a simple type. The algorithm could be anything, from a simple most recent edit wins, to more advanced CRDT based approaches that use diffing against a common ancestor. ","kind":"symbol","title":"Merger","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","interfaceLanguage":"swift"}},"summary":"A merger is a type that applies a merging algorithm to merge two values together. The values are typically of a simple type. The algorithm could be anything, from a simple most recent edit wins, to more advanced CRDT based approaches that use diffing against a common ancestor."},{"title":"init()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger\/init()","interfaceLanguage":"swift"}},"kind":"symbol","summary":"","rawIndexableTextContent":" ","headings":[]},{"title":"formIndex(before:)","kind":"symbol","headings":[],"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(before:)"}},"summary":""},{"kind":"symbol","headings":[],"title":"value","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/value"}},"summary":"","rawIndexableTextContent":" "},{"summary":"","kind":"symbol","title":"init()","rawIndexableTextContent":" ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()"},"type":"topLevelPage"},"headings":[]},{"kind":"symbol","title":"init(array:)","summary":"","rawIndexableTextContent":" ","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/init(array:)","interfaceLanguage":"swift"}}},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/elementsEqual(_:)"},"type":"topLevelPage"},"title":"elementsEqual(_:)","rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.  A sequence to compare to this sequence. Return Value true if this sequence and other contain the same elements in the same order. Discussion At least one of the sequences must be finite. This example tests whether one countable range shares the same elements as another countable range and an array.  O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","summary":"Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.","headings":["Return Value","Discussion"]},{"rawIndexableTextContent":" ","kind":"symbol","summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(arrayLiteral:)","interfaceLanguage":"swift"}},"headings":[],"title":"init(arrayLiteral:)"},{"title":"first","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/first"}},"headings":["Discussion"],"summary":"The first element of the collection.","rawIndexableTextContent":"The first element of the collection.  Discussion If the collection is empty, the value of this property is nil. ","kind":"symbol"},{"headings":[],"kind":"symbol","title":"merge(_:withSubordinate:commonAncestor:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger\/merge(_:withSubordinate:commonAncestor:)-5llcd"},"type":"topLevelPage"},"summary":"This overload is used when the value of the dictionary is Mergeable, and ensures that the contained values get merged properly. Without this, the contained values would be merged atomically.","rawIndexableTextContent":"This overload is used when the value of the dictionary is Mergeable, and ensures that the contained values get merged properly. Without this, the contained values would be merged atomically. "},{"kind":"symbol","headings":[],"rawIndexableTextContent":" ","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)"},"type":"topLevelPage"},"title":"append(_:)"},{"kind":"article","title":"Sequence Implementations","summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":""},{"title":"randomElement(using:)","headings":["Return Value","Discussion"],"summary":"Returns a random element of the collection, using the given generator as a source for randomness.","rawIndexableTextContent":"Returns a random element of the collection, using the given generator as a source for randomness.  The random number generator to use when choosing a random element. Return Value A random element from the collection. If the collection is empty, the method returns nil. Discussion Call randomElement(using:) to select a random element from an array or another collection when you are using a custom random number generator. This example picks a name at random from an array:  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection. The algorithm used to select a random element may change in a future version of Swift. If you’re passing a generator that results in the same sequence of elements each time you run your program, that sequence may change when your program is compiled using a different version of Swift.","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/randomElement(using:)"},"type":"topLevelPage"}},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/elementsEqual(_:by:)","interfaceLanguage":"swift"}},"headings":["Return Value","Discussion"],"summary":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.","rawIndexableTextContent":"Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.  A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Return Value true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false. Discussion At least one of the sequences must be finite. The predicate must be an equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of other.","kind":"symbol","title":"elementsEqual(_:by:)"},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"merged(withSubordinate:commonAncestor:)","kind":"symbol","summary":"Merge when elements are mergeable and identifiable. More object-like. Will ensure uniqueness of identifiers, and merge together elements with the same identifier.","headings":[],"rawIndexableTextContent":"Merge when elements are mergeable and identifiable. More object-like. Will ensure uniqueness of identifiers, and merge together elements with the same identifier. "},{"kind":"symbol","title":"PropertyMerge.setMerge","summary":"Will merge sets of values. When there is a conflict, it will handle it using a MergeableSet for each set of changes.","headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge"},"type":"topLevelPage"},"rawIndexableTextContent":"Will merge sets of values. When there is a conflict, it will handle it using a MergeableSet for each set of changes. "},{"title":"RawRepresentable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"}},"kind":"article","summary":"","rawIndexableTextContent":""},{"platforms":[{"unavailable":false,"introducedAt":"15.0","name":"iOS","deprecated":false,"beta":false},{"unavailable":false,"deprecated":false,"beta":false,"introducedAt":"12.0","name":"macOS"},{"name":"tvOS","deprecated":false,"unavailable":false,"introducedAt":"15.0","beta":false},{"introducedAt":"8.0","name":"watchOS","beta":false,"unavailable":false,"deprecated":false}],"title":"formatted(_:)","headings":[],"rawIndexableTextContent":" ","kind":"symbol","summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formatted(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"kind":"symbol","rawIndexableTextContent":" ","title":"remove(_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/remove(_:)"}},"summary":"","headings":[]},{"rawIndexableTextContent":" ","summary":"","title":"init()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/init()","interfaceLanguage":"swift"}},"kind":"symbol","headings":[]},{"rawIndexableTextContent":"Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.  A string to insert between each of the elements in this sequence. The default separator is an empty string. Return Value A single, concatenated string. Discussion The following example shows how an array of strings can be joined to a single, comma-separated string: ","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined(separator:)-5xpf","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"joined(separator:)","summary":"Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.","headings":["Return Value","Discussion"]},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/values","interfaceLanguage":"swift"}},"title":"values","summary":"","rawIndexableTextContent":" ","headings":[],"kind":"symbol"},{"platforms":[{"deprecated":false,"unavailable":false,"beta":false,"name":"iOS","introducedAt":"16.0"},{"deprecated":false,"unavailable":false,"name":"macOS","introducedAt":"13.0","beta":false},{"beta":false,"name":"tvOS","deprecated":false,"unavailable":false,"introducedAt":"16.0"},{"name":"watchOS","beta":false,"deprecated":false,"unavailable":false,"introducedAt":"9.0"}],"summary":"Finds and returns the range of the first occurrence of a given collection within this collection.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstRange(of:)-8xuqu"}},"headings":["Return Value"],"title":"firstRange(of:)","kind":"symbol","rawIndexableTextContent":"Finds and returns the range of the first occurrence of a given collection within this collection.  The collection to search for. Return Value A range in the collection of the first occurrence of sequence. Returns nil if sequence is not found."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/max(by:)","interfaceLanguage":"swift"}},"summary":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements.","kind":"symbol","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the maximum element in the sequence, using the given predicate as the comparison between elements.  A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. Return Value The sequence’s maximum element if the sequence is not empty; otherwise, nil. Discussion The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold: areInIncreasingOrder(a, a) is always false. (Irreflexivity) If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability) Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability) This example shows how to use the max(by:) method on a dictionary to find the key-value pair with the highest value.  O(n), where n is the length of the sequence.","title":"max(by:)"},{"headings":[],"kind":"symbol","rawIndexableTextContent":"Merges an array, ensuring that the result has elements with unqiue identifiers. ","summary":"Merges an array, ensuring that the result has elements with unqiue identifiers.","title":"ArrayOfIdentifiableMerger","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","interfaceLanguage":"swift"}}},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/starts(with:by:)"},"type":"topLevelPage"},"summary":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.","headings":["Return Value","Discussion"],"kind":"symbol","rawIndexableTextContent":"Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.  A sequence to compare to this sequence. A predicate that returns true if its two arguments are equivalent; otherwise, false. Return Value true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true. Discussion The predicate must be an equivalence relation over the elements. That is, for any elements a, b, and c, the following conditions must hold: areEquivalent(a, a) is always true. (Reflexivity) areEquivalent(a, b) implies areEquivalent(b, a). (Symmetry) If areEquivalent(a, b) and areEquivalent(b, c) are both true, then areEquivalent(a, c) is also true. (Transitivity) O(m), where m is the lesser of the length of the sequence and the length of possiblePrefix.","title":"starts(with:by:)"},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","interfaceLanguage":"swift"}},"title":"ArrayMerger","kind":"symbol","summary":"Merges an array by treating the contained elements as values.","headings":[],"rawIndexableTextContent":"Merges an array by treating the contained elements as values. "},{"rawIndexableTextContent":"Returns the first index where the specified value appears in the collection. ","title":"index(of:)","summary":"Returns the first index where the specified value appears in the collection.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(of:)"}},"platforms":[],"headings":[],"kind":"symbol"},{"rawIndexableTextContent":" ","title":"init(from:)","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/init(from:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","headings":[]},{"rawIndexableTextContent":"A value less than or equal to the number of elements in the collection.  Discussion O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.","title":"underestimatedCount","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/underestimatedCount","interfaceLanguage":"swift"}},"summary":"A value less than or equal to the number of elements in the collection.","headings":["Discussion"]},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstIndex(of:)"}},"summary":"Returns the first index where the specified value appears in the collection.","kind":"symbol","headings":["Return Value","Discussion"],"title":"firstIndex(of:)","rawIndexableTextContent":"Returns the first index where the specified value appears in the collection.  An element to search for in the collection. Return Value The first index where element is found. If element is not found in the collection, returns nil. Discussion After using firstIndex(of:) to find the position of a particular element in a collection, you can use it to access the element by subscripting. This example shows how you can modify one of the names in an array of students.  O(n), where n is the length of the collection."},{"headings":[],"rawIndexableTextContent":" ","title":"publisher","kind":"symbol","platforms":[{"unavailable":false,"name":"iOS","introducedAt":"13.0","deprecated":false,"beta":false},{"name":"macOS","unavailable":false,"beta":false,"deprecated":false,"introducedAt":"10.15"},{"deprecated":false,"introducedAt":"13.0","name":"tvOS","unavailable":false,"beta":false},{"name":"watchOS","unavailable":false,"beta":false,"introducedAt":"6.0","deprecated":false}],"summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/publisher","interfaceLanguage":"swift"}}},{"summary":"Returns the maximum element in the sequence.","headings":["Return Value","Discussion"],"title":"max()","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/max()"}},"kind":"symbol","rawIndexableTextContent":"Returns the maximum element in the sequence.  Return Value The sequence’s maximum element. If the sequence has no elements, returns nil. Discussion This example finds the largest value in an array of height measurements.  O(n), where n is the length of the sequence."},{"kind":"symbol","summary":"Returns the elements of this sequence of sequences, concatenated.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined()","interfaceLanguage":"swift"}},"headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns the elements of this sequence of sequences, concatenated.  Return Value A flattened view of the elements of this sequence of sequences. Discussion In this example, an array of three ranges is flattened so that the elements of each range can be iterated in turn. ","title":"joined()"},{"kind":"article","title":"Decodable Implementations","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations"},"type":"topLevelPage"},"summary":"","headings":[],"rawIndexableTextContent":""},{"kind":"symbol","title":"PropertyBacking.mergeableSet","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/mergeableSet","interfaceLanguage":"swift"}},"summary":"Uses a MergeableSet type as the backing of the variable.","headings":[],"rawIndexableTextContent":"Uses a MergeableSet type as the backing of the variable. "},{"title":"Decodable Implementations","kind":"article","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"","headings":[],"rawIndexableTextContent":""},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","interfaceLanguage":"swift"}},"kind":"article","summary":"","title":"RandomAccessCollection Implementations","rawIndexableTextContent":"","headings":[]},{"headings":[],"title":"Mergeable Implementations","kind":"article","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/Mergeable-Implementations"}},"rawIndexableTextContent":"","summary":""},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/init(from:)"}},"summary":"","headings":[],"rawIndexableTextContent":" ","title":"init(from:)"},{"summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger\/T","interfaceLanguage":"swift"}},"title":"T"},{"rawIndexableTextContent":" ","kind":"symbol","summary":"","title":"count","headings":[],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"rawIndexableTextContent":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.  A closure that accepts an element of this sequence as its argument and returns an optional value. Return Value An array of the non-nil results of calling transform with each element of the sequence. Discussion Use this method to receive an array of non-optional values when your transformation produces an optional value. In this example, note the difference in the result of using map and compactMap with a transformation that returns an optional Int value.  O(n), where n is the length of this sequence.","headings":["Return Value","Discussion"],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/compactMap(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"compactMap(_:)","summary":"Returns an array containing the non-nil results of calling the given transformation with each element of this sequence."},{"summary":"Returns the first index in which an element of the collection satisfies the given predicate.","headings":["Return Value","Discussion"],"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstIndex(where:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":"Returns the first index in which an element of the collection satisfies the given predicate.  A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match. Return Value The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil. Discussion You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. Here’s an example that finds a student name that begins with the letter “A”:  O(n), where n is the length of the collection.","title":"firstIndex(where:)"},{"kind":"symbol","summary":"Will merge as an array of values. Elements must be Equatable and Identifiable. It will ensure that there are no duplicated identifiers following a merge. When there is a conflict, it will determine the changes made to each version, and merge with an algorithm that keeps related changes together (eg editing a word). Guarantees uniqueness of identifiers after merge, but does not enforce uniqueness of identifiers through updates made directly to the property.","rawIndexableTextContent":"Will merge as an array of values. Elements must be Equatable and Identifiable. It will ensure that there are no duplicated identifiers following a merge. When there is a conflict, it will determine the changes made to each version, and merge with an algorithm that keeps related changes together (eg editing a word). Guarantees uniqueness of identifiers after merge, but does not enforce uniqueness of identifiers through updates made directly to the property. ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge"}},"title":"PropertyMerge.arrayOfIdentifiableMerge"},{"summary":"Returns the index of the last element in the collection that matches the given predicate.","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Returns the index of the last element in the collection that matches the given predicate.  A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match. Return Value The index of the last element in the collection that matches predicate, or nil if no elements match. Discussion You can use the predicate to find an element of a type that doesn’t conform to the Equatable protocol or to find an element that matches particular criteria. This example finds the index of the last name that begins with the letter A:  O(n), where n is the length of the collection.","title":"lastIndex(where:)","headings":["Return Value","Discussion"]},{"rawIndexableTextContent":" ","kind":"symbol","headings":[],"summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/init(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"init(_:)"},{"summary":"","title":"RawRepresentable Implementations","headings":[],"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/RawRepresentable-Implementations","interfaceLanguage":"swift"}},"kind":"article"},{"summary":"","title":"init(arrayLiteral:)","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/init(arrayLiteral:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":" ","headings":[]},{"location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropLast(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"dropLast(_:)","summary":"Returns a subsequence containing all but the specified number of final elements.","rawIndexableTextContent":"Returns a subsequence containing all but the specified number of final elements.  The number of elements to drop off the end of the collection. k must be greater than or equal to zero. Return Value A subsequence that leaves off k elements from the end. Discussion If the number of elements to drop exceeds the number of elements in the collection, the result is an empty subsequence.  O(1) if the collection conforms to RandomAccessCollection; otherwise, O(k), where k is the number of elements to drop.","headings":["Return Value","Discussion"]},{"title":"merge(_:withSubordinate:commonAncestor:)","summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger\/merge(_:withSubordinate:commonAncestor:)-7u4jn","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"kind":"symbol","rawIndexableTextContent":" "},{"kind":"article","headings":[],"summary":"","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary\/Equatable-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"Equatable Implementations","rawIndexableTextContent":""},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/hashValue","interfaceLanguage":"swift"}},"summary":"","kind":"symbol","title":"hashValue","headings":[],"rawIndexableTextContent":" "},{"rawIndexableTextContent":"Calls the given closure on each element in the sequence in the same order as a for-in loop.  A closure that takes an element of the sequence as a parameter. Discussion The two loops in the following example produce the same output:  Using the forEach method is distinct from a for-in loop in two important ways: You cannot use a break or continue statement to exit the current call of the body closure or skip subsequent calls. Using the return statement in the body closure will exit only from the current call to body, not from any outer scope, and won’t skip subsequent calls.","title":"forEach(_:)","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"Calls the given closure on each element in the sequence in the same order as a for-in loop.","headings":["Discussion"]},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/hashValue"}},"rawIndexableTextContent":" ","headings":[],"title":"hashValue","summary":""},{"kind":"symbol","summary":"This uses a MergeableValue type as the backing of the variable. The mergeableValue stores a timestamp with the value whenever there is an update. A merge will choose the most recent updated value.","headings":[],"title":"PropertyBacking.mergeableValue","rawIndexableTextContent":"This uses a MergeableValue type as the backing of the variable. The mergeableValue stores a timestamp with the value whenever there is an update. A merge will choose the most recent updated value. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking\/mergeableValue"}}},{"title":"values","summary":"","kind":"symbol","location":{"reference":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet\/values","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":" ","headings":[]}]