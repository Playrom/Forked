{"kind":"symbol","relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/SY"],"title":"Conforms To"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}]}]}],"variants":[{"paths":["\/documentation\/forkedmerge\/propertymerge"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"code":"Merger","type":"codeVoice"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"},"topicSections":[{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"],"title":"Enumeration Cases","anchor":"Enumeration-Cases"},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)"],"anchor":"Initializers","title":"Initializers","generated":true},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"],"generated":true}],"metadata":{"roleHeading":"Enumeration","title":"PropertyMerge","symbolKind":"enum","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}],"role":"symbol","externalID":"s:11ForkedMerge08PropertyB0O","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"modules":[{"name":"ForkedMerge"}]},"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/mergeableProtocol":{"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mergeableProtocol"}],"type":"topic","abstract":[{"text":"The property must be a ","type":"text"},{"code":"Mergeable","type":"codeVoice"},{"text":" type, and will be merged accordingly","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"text":"This is the default algorithm if ","type":"text"},{"type":"codeVoice","code":"@Merged"},{"text":" has been applied with no","type":"text"},{"type":"text","text":" "},{"text":"algorithm stated.","type":"text"}],"role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","title":"PropertyMerge.mergeableProtocol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/dictionaryMerge":{"title":"PropertyMerge.dictionaryMerge","url":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dictionaryMerge"}],"abstract":[{"type":"text","text":"Merges dictionaries. When there is a conflict, it will merge using"},{"text":" ","type":"text"},{"type":"text","text":"a MergeableDictionary for each dictionary. If the value type is"},{"type":"text","text":" "},{"type":"codeVoice","code":"Mergeable"},{"text":", the dictionary will be merged recursing into the values.","type":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/RawRepresentable-Implementations":{"title":"RawRepresentable Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations"},"doc://ForkedMerge/SH":{"identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/setMerge":{"title":"PropertyMerge.setMerge","abstract":[{"text":"Will merge sets of values. When there is a conflict, it will handle","type":"text"},{"type":"text","text":" "},{"text":"it using a MergeableSet for each set of changes.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setMerge"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/setmerge"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/textMerge":{"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"textMerge"}],"type":"topic","abstract":[{"type":"text","text":"Applies the "},{"type":"codeVoice","code":"array"},{"type":"text","text":" merge algorithm to the characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"This is suitable for any type of shared text, which may"},{"text":" ","type":"text"},{"type":"text","text":"have conflicting edits, like a collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"The variable must be a "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/textmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge","title":"PropertyMerge.textMerge"},"doc://ForkedMerge/SY":{"title":"Swift.RawRepresentable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SY"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/Equatable-Implementations":{"kind":"article","type":"topic","abstract":[],"role":"collectionGroup","url":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","title":"Equatable Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayOfIdentifiableMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","role":"symbol","kind":"symbol","title":"PropertyMerge.arrayOfIdentifiableMerge","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"arrayOfIdentifiableMerge","kind":"identifier"}],"abstract":[{"text":"Will merge as an array of values. Elements must be Equatable and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Identifiable. It will ensure that there are no duplicated identifiers following"},{"type":"text","text":" "},{"type":"text","text":"a merge. When there is a conflict, it will"},{"text":" ","type":"text"},{"type":"text","text":"determine the changes made to each version, and merge with an"},{"text":" ","type":"text"},{"type":"text","text":"algorithm that keeps related changes together (eg editing a word)."},{"text":" ","type":"text"},{"type":"text","text":"Guarantees uniqueness of identifiers after merge, but does not"},{"type":"text","text":" "},{"text":"enforce uniqueness of identifiers through updates made directly to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"property."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/init(rawValue:)":{"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"rawValue","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":")","kind":"text"}],"type":"topic","abstract":[],"role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","title":"init(rawValue:)"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/propertymerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","type":"topic","kind":"symbol","title":"PropertyMerge","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropertyMerge"}],"abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"type":"codeVoice","code":"Merger"},{"text":".","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/arraymerge","role":"symbol","kind":"symbol","title":"PropertyMerge.arrayMerge","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"arrayMerge","kind":"identifier"}],"abstract":[{"text":"Will merge as an array of values. Elements must be Equatable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When there is a conflict, it will"},{"text":" ","type":"text"},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"algorithm that keeps related changes together (eg editing a word)."},{"text":" ","type":"text"},{"type":"text","text":"Does not guarantee uniqueness of elements after merge:"},{"text":" ","type":"text"},{"type":"text","text":"there can be duplicates created, so it is more suitable to value types"},{"type":"text","text":" "},{"type":"text","text":"like characters in a string. than it is to identifiable types."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge"},"doc://ForkedMerge/SQ":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable"}}}