{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/propertymerge"]}],"topicSections":[{"title":"Enumeration Cases","anchor":"Enumeration-Cases","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"],"generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)"],"anchor":"Initializers","generated":true,"title":"Initializers"},{"title":"Default Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/SY"]}],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropertyMerge"}],"modules":[{"name":"ForkedMerge"}],"title":"PropertyMerge","symbolKind":"enum","roleHeading":"Enumeration","navigatorTitle":[{"kind":"identifier","text":"PropertyMerge"}],"externalID":"s:11ForkedMerge08PropertyB0O"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"type":"text","text":" "},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}]}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/dictionaryMerge":{"title":"PropertyMerge.dictionaryMerge","role":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","abstract":[{"text":"Merges dictionaries. When there is a conflict, it will merge using","type":"text"},{"type":"text","text":" "},{"text":"a MergeableDictionary for each dictionary. If the value type is","type":"text"},{"type":"text","text":" "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":", the dictionary will be merged recursing into the values."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"dictionaryMerge","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/textMerge":{"title":"PropertyMerge.textMerge","url":"\/documentation\/forkedmerge\/propertymerge\/textmerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"textMerge"}],"abstract":[{"type":"text","text":"Applies the "},{"type":"codeVoice","code":"array"},{"type":"text","text":" merge algorithm to the characters in a string."},{"text":" ","type":"text"},{"text":"This is suitable for any type of shared text, which may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have conflicting edits, like a collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"The variable must be a "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"},"doc://ForkedMerge/SQ":{"identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/arraymerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","title":"PropertyMerge.arrayMerge","kind":"symbol","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"arrayMerge","kind":"identifier"}],"abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable."},{"text":" ","type":"text"},{"type":"text","text":"When there is a conflict, it will"},{"text":" ","type":"text"},{"type":"text","text":"determine the changes made to each version, and merge with an"},{"type":"text","text":" "},{"type":"text","text":"algorithm that keeps related changes together (eg editing a word)."},{"text":" ","type":"text"},{"type":"text","text":"Does not guarantee uniqueness of elements after merge:"},{"text":" ","type":"text"},{"type":"text","text":"there can be duplicates created, so it is more suitable to value types"},{"type":"text","text":" "},{"text":"like characters in a string. than it is to identifiable types.","type":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/init(rawValue:)":{"title":"init(rawValue:)","url":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"kind":"symbol","abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"code":"Merger","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/forkedmerge\/propertymerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","role":"symbol","type":"topic","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"title":"PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/Equatable-Implementations":{"type":"topic","title":"Equatable Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations","abstract":[]},"doc://ForkedMerge/SY":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SY","title":"Swift.RawRepresentable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayOfIdentifiableMerge":{"type":"topic","title":"PropertyMerge.arrayOfIdentifiableMerge","url":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable and"},{"type":"text","text":" "},{"text":"Identifiable. It will ensure that there are no duplicated identifiers following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a merge. When there is a conflict, it will"},{"text":" ","type":"text"},{"type":"text","text":"determine the changes made to each version, and merge with an"},{"type":"text","text":" "},{"text":"algorithm that keeps related changes together (eg editing a word).","type":"text"},{"text":" ","type":"text"},{"text":"Guarantees uniqueness of identifiers after merge, but does not","type":"text"},{"text":" ","type":"text"},{"text":"enforce uniqueness of identifiers through updates made directly to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"property."}],"kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"arrayOfIdentifiableMerge","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/mergeableProtocol":{"type":"topic","url":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"mergeableProtocol","kind":"identifier"}],"abstract":[{"type":"text","text":"The property must be a "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":" type, and will be merged accordingly"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"Mergeable"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"text":"This is the default algorithm if ","type":"text"},{"code":"@Merged","type":"codeVoice"},{"type":"text","text":" has been applied with no"},{"type":"text","text":" "},{"text":"algorithm stated.","type":"text"}],"title":"PropertyMerge.mergeableProtocol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/setMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/setmerge","kind":"symbol","title":"PropertyMerge.setMerge","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"setMerge","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","role":"symbol","abstract":[{"type":"text","text":"Will merge sets of values. When there is a conflict, it will handle"},{"text":" ","type":"text"},{"type":"text","text":"it using a MergeableSet for each set of changes."}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/RawRepresentable-Implementations":{"title":"RawRepresentable Implementations","url":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations","role":"collectionGroup","abstract":[],"kind":"article","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"}}}