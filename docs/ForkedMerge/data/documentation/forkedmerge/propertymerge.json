{"topicSections":[{"title":"Enumeration Cases","generated":true,"anchor":"Enumeration-Cases","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"]},{"title":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)"],"anchor":"Initializers","generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"variants":[{"paths":["\/documentation\/forkedmerge\/propertymerge"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"enum","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"title":"PropertyMerge","role":"symbol","modules":[{"name":"ForkedMerge"}],"externalID":"s:11ForkedMerge08PropertyB0O","roleHeading":"Enumeration","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}]},"sections":[],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"text":".","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"}],"relationshipsSections":[{"identifiers":["doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/SY"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/RawRepresentable-Implementations":{"abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations","kind":"article","type":"topic","title":"RawRepresentable Implementations","url":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/arraymerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"arrayMerge"}],"title":"PropertyMerge.arrayMerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","abstract":[{"text":"Will merge as an array of values. Elements must be Equatable.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When there is a conflict, it will"},{"type":"text","text":" "},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"text":" ","type":"text"},{"text":"algorithm that keeps related changes together (eg editing a word).","type":"text"},{"type":"text","text":" "},{"text":"Does not guarantee uniqueness of elements after merge:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there can be duplicates created, so it is more suitable to value types"},{"type":"text","text":" "},{"type":"text","text":"like characters in a string. than it is to identifiable types."}],"kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/textMerge":{"abstract":[{"type":"text","text":"Applies the "},{"code":"array","type":"codeVoice"},{"type":"text","text":" merge algorithm to the characters in a string."},{"type":"text","text":" "},{"text":"This is suitable for any type of shared text, which may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have conflicting edits, like a collaborative editor."},{"text":" ","type":"text"},{"text":"The variable must be a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge","kind":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/textmerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"textMerge","kind":"identifier"}],"title":"PropertyMerge.textMerge","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayOfIdentifiableMerge":{"abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable and"},{"type":"text","text":" "},{"type":"text","text":"Identifiable. It will ensure that there are no duplicated identifiers following"},{"type":"text","text":" "},{"text":"a merge. When there is a conflict, it will","type":"text"},{"type":"text","text":" "},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"text":" ","type":"text"},{"text":"algorithm that keeps related changes together (eg editing a word).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Guarantees uniqueness of identifiers after merge, but does not"},{"text":" ","type":"text"},{"text":"enforce uniqueness of identifiers through updates made directly to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"property."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"arrayOfIdentifiableMerge","kind":"identifier"}],"type":"topic","title":"PropertyMerge.arrayOfIdentifiableMerge","url":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"url":"\/documentation\/forkedmerge\/propertymerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","role":"symbol","abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"code":"Merger","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"kind":"symbol","title":"PropertyMerge","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}]},"doc://ForkedMerge/SH":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/Equatable-Implementations":{"abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","kind":"article","type":"topic","title":"Equatable Implementations","url":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations","role":"collectionGroup"},"doc://ForkedMerge/SY":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SY","title":"Swift.RawRepresentable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/mergeableProtocol":{"title":"PropertyMerge.mergeableProtocol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mergeableProtocol","kind":"identifier"}],"abstract":[{"type":"text","text":"The property must be a "},{"type":"codeVoice","code":"Mergeable"},{"text":" type, and will be merged accordingly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"Mergeable"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is the default algorithm if "},{"type":"codeVoice","code":"@Merged"},{"text":" has been applied with no","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"algorithm stated."}],"url":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","role":"symbol","type":"topic","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/dictionaryMerge":{"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dictionaryMerge"}],"abstract":[{"type":"text","text":"Merges dictionaries. When there is a conflict, it will merge using"},{"text":" ","type":"text"},{"text":"a MergeableDictionary for each dictionary. If the value type is","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":", the dictionary will be merged recursing into the values."}],"url":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","role":"symbol","title":"PropertyMerge.dictionaryMerge","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/init(rawValue:)":{"title":"init(rawValue:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"rawValue","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":")","kind":"text"}],"abstract":[],"url":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","role":"symbol","type":"topic","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/setMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/setmerge","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setMerge"}],"title":"PropertyMerge.setMerge","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Will merge sets of values. When there is a conflict, it will handle"},{"text":" ","type":"text"},{"text":"it using a MergeableSet for each set of changes.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","role":"symbol"},"doc://ForkedMerge/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ"}}}