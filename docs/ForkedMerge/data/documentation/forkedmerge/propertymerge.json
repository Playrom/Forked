{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}],"platforms":["macOS"],"languages":["swift"]}]}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/SY"],"type":"conformsTo"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/propertymerge"]}],"topicSections":[{"anchor":"Enumeration-Cases","title":"Enumeration Cases","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge"],"generated":true},{"anchor":"Initializers","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)"],"title":"Initializers"},{"title":"Default Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations"],"anchor":"Default-Implementations","generated":true}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Enumeration","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"modules":[{"name":"ForkedMerge"}],"externalID":"s:11ForkedMerge08PropertyB0O","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"symbolKind":"enum","role":"symbol","title":"PropertyMerge"},"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayMerge":{"title":"PropertyMerge.arrayMerge","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"arrayMerge","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayMerge","abstract":[{"type":"text","text":"Will merge as an array of values. Elements must be Equatable."},{"type":"text","text":" "},{"type":"text","text":"When there is a conflict, it will"},{"type":"text","text":" "},{"text":"determine the changes made to each version, and merge with an","type":"text"},{"text":" ","type":"text"},{"text":"algorithm that keeps related changes together (eg editing a word).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Does not guarantee uniqueness of elements after merge:"},{"text":" ","type":"text"},{"type":"text","text":"there can be duplicates created, so it is more suitable to value types"},{"text":" ","type":"text"},{"text":"like characters in a string. than it is to identifiable types.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/arraymerge"},"doc://ForkedMerge/SY":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SY","title":"Swift.RawRepresentable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/textMerge":{"url":"\/documentation\/forkedmerge\/propertymerge\/textmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/textMerge","kind":"symbol","title":"PropertyMerge.textMerge","abstract":[{"text":"Applies the ","type":"text"},{"code":"array","type":"codeVoice"},{"text":" merge algorithm to the characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is suitable for any type of shared text, which may"},{"text":" ","type":"text"},{"type":"text","text":"have conflicting edits, like a collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"The variable must be a "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"textMerge"}]},"doc://ForkedMerge/SQ":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ","title":"Swift.Equatable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/Equatable-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/Equatable-Implementations","kind":"article","role":"collectionGroup","abstract":[],"type":"topic","url":"\/documentation\/forkedmerge\/propertymerge\/equatable-implementations","title":"Equatable Implementations"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/init(rawValue:)":{"kind":"symbol","title":"init(rawValue:)","url":"\/documentation\/forkedmerge\/propertymerge\/init(rawvalue:)","role":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/init(rawValue:)","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"rawValue","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/RawRepresentable-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/propertymerge\/rawrepresentable-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/RawRepresentable-Implementations","title":"RawRepresentable Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/arrayOfIdentifiableMerge":{"kind":"symbol","abstract":[{"text":"Will merge as an array of values. Elements must be Equatable and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Identifiable. It will ensure that there are no duplicated identifiers following"},{"text":" ","type":"text"},{"type":"text","text":"a merge. When there is a conflict, it will"},{"text":" ","type":"text"},{"type":"text","text":"determine the changes made to each version, and merge with an"},{"text":" ","type":"text"},{"type":"text","text":"algorithm that keeps related changes together (eg editing a word)."},{"text":" ","type":"text"},{"type":"text","text":"Guarantees uniqueness of identifiers after merge, but does not"},{"text":" ","type":"text"},{"text":"enforce uniqueness of identifiers through updates made directly to the","type":"text"},{"type":"text","text":" "},{"text":"property.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/arrayofidentifiablemerge","title":"PropertyMerge.arrayOfIdentifiableMerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/arrayOfIdentifiableMerge","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"arrayOfIdentifiableMerge","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/setMerge":{"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Will merge sets of values. When there is a conflict, it will handle"},{"type":"text","text":" "},{"text":"it using a MergeableSet for each set of changes.","type":"text"}],"url":"\/documentation\/forkedmerge\/propertymerge\/setmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/setMerge","title":"PropertyMerge.setMerge","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"setMerge"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/dictionaryMerge":{"kind":"symbol","role":"symbol","url":"\/documentation\/forkedmerge\/propertymerge\/dictionarymerge","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"dictionaryMerge","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/dictionaryMerge","title":"PropertyMerge.dictionaryMerge","type":"topic","abstract":[{"type":"text","text":"Merges dictionaries. When there is a conflict, it will merge using"},{"text":" ","type":"text"},{"text":"a MergeableDictionary for each dictionary. If the value type is","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":", the dictionary will be merged recursing into the values."}]},"doc://ForkedMerge/SH":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","title":"PropertyMerge","type":"topic","abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PropertyMerge"}],"url":"\/documentation\/forkedmerge\/propertymerge","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge/mergeableProtocol":{"abstract":[{"type":"text","text":"The property must be a "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":" type, and will be merged accordingly"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"text":"This is the default algorithm if ","type":"text"},{"code":"@Merged","type":"codeVoice"},{"type":"text","text":" has been applied with no"},{"text":" ","type":"text"},{"type":"text","text":"algorithm stated."}],"title":"PropertyMerge.mergeableProtocol","kind":"symbol","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mergeableProtocol"}],"url":"\/documentation\/forkedmerge\/propertymerge\/mergeableprotocol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge\/mergeableProtocol","role":"symbol"}}}