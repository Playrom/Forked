{"kind":"article","metadata":{"modules":[{"name":"ForkedMerge"}],"title":"BidirectionalCollection Implementations","role":"collectionGroup","roleHeading":"API Collection"},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"]]},"sections":[],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last"],"anchor":"Instance-Properties"},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:by:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropLast(_:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstRange(of:)-6sfhc","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(before:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined(separator:)-75cc1","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last(where:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(of:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/suffix(_:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/joined(separator:)-75cc1":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined(separator:)-75cc1","title":"joined(separator:)","url":"\/documentation\/forkedmerge\/mergeablearray\/joined(separator:)-75cc1","role":"symbol","kind":"symbol","abstract":[{"text":"Returns a new string by concatenating the elements of the sequence,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"adding the given separator between each element."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"joined","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" is ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/suffix(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"suffix"},{"text":"(","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/suffix(_:)","title":"suffix(_:)","abstract":[{"text":"Returns a subsequence, up to the given maximum length, containing the","type":"text"},{"type":"text","text":" "},{"text":"final elements of the collection.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/suffix(_:)","type":"topic","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/dropLast(_:)":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropLast(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/droplast(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dropLast","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"}],"title":"dropLast(_:)","abstract":[{"type":"text","text":"Returns a subsequence containing all but the specified number of final"},{"text":" ","type":"text"},{"type":"text","text":"elements."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/firstRange(of:)-6sfhc":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstRange(of:)-6sfhc","kind":"symbol","type":"topic","title":"firstRange(of:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"firstRange"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sn","kind":"typeIdentifier","text":"Range"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":">?","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"text":"Finds and returns the range of the first occurrence of a given collection","type":"text"},{"text":" ","type":"text"},{"text":"within this collection.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/firstrange(of:)-6sfhc"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reversed()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reversed"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:s18ReversedCollectionV","text":"ReversedCollection","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"type":"text","text":" "},{"type":"text","text":"order."}],"kind":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","role":"symbol","title":"reversed()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/difference(from:by:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"difference","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s20CollectionDifferenceV","text":"CollectionDifference"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":">","kind":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:by:)","title":"difference(from:by:)","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:by:)","type":"topic","abstract":[{"type":"text","text":"Returns the difference needed to produce this collectionâ€™s ordered"},{"type":"text","text":" "},{"text":"elements from the given collection, using the given predicate as an","type":"text"},{"text":" ","type":"text"},{"text":"equivalence test.","type":"text"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/difference(from:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:)","abstract":[{"text":"Returns the difference needed to produce this collectionâ€™s ordered","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements from the given collection."}],"title":"difference(from:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"difference","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CollectionDifference","preciseIdentifier":"s:s20CollectionDifferenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lastIndex(of:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lastIndex","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"of"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(of:)","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(of:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"text":"Returns the last index where the specified value appears in the","type":"text"},{"type":"text","text":" "},{"text":"collection.","type":"text"}],"kind":"symbol","title":"lastIndex(of:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/formIndex(before:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/formindex(before:)","kind":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/formIndex(before:)","role":"symbol","title":"formIndex(before:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formIndex"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"before"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":")","kind":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/last(where:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/last(where:)","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last(where:)","title":"last(where:)","abstract":[{"text":"Returns the last element of the sequence that satisfies the given","type":"text"},{"type":"text","text":" "},{"text":"predicate.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"last"},{"kind":"text","text":"("},{"kind":"externalParam","text":"where"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"?"}],"type":"topic","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/last":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last","url":"\/documentation\/forkedmerge\/mergeablearray\/last","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"last"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":"?","kind":"text"}],"kind":"symbol","abstract":[{"text":"The last element of the collection.","type":"text"}],"type":"topic","title":"last"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lastIndex(where:)":{"title":"lastIndex(where:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"lastIndex"},{"kind":"text","text":"("},{"text":"where","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","type":"topic","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)","abstract":[{"type":"text","text":"Returns the index of the last element in the collection that matches the"},{"type":"text","text":" "},{"text":"given predicate.","type":"text"}],"role":"symbol"}}}