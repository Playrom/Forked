{"kind":"symbol","abstract":[{"text":"Returns a subsequence containing all but the given number of initial","type":"text"},{"type":"text","text":" "},{"text":"elements.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/dropfirst(_:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"dropFirst"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":" = 1) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The number of elements to drop from the beginning of"},{"type":"text","text":" "},{"text":"the collection. ","type":"text"},{"type":"codeVoice","code":"k"},{"text":" must be greater than or equal to zero.","type":"text"}],"type":"paragraph"}],"name":"k"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"A subsequence starting after the specified number of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"type":"paragraph"}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"If the number of elements to drop exceeds the number of elements in"},{"type":"text","text":" "},{"text":"the collection, the result is an empty subsequence.","type":"text"}],"type":"paragraph"},{"code":["let numbers = [1, 2, 3, 4, 5]","print(numbers.dropFirst(2))","\/\/ Prints \"[3, 4, 5]\"","print(numbers.dropFirst(10))","\/\/ Prints \"[]\""],"type":"codeListing","syntax":null},{"name":"Complexity","style":"note","content":[{"inlineContent":[{"type":"text","text":"O(1) if the collection conforms to"},{"text":" ","type":"text"},{"code":"RandomAccessCollection","type":"codeVoice"},{"type":"text","text":"; otherwise, O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"k","type":"text"}],"type":"emphasis"},{"text":" is the number of","type":"text"},{"text":" ","type":"text"},{"text":"elements to drop from the beginning of the collection.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"metadata":{"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift","title":"dropFirst(_:)","externalID":"s:SlsE9dropFirsty11SubSequenceQzSiF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dropFirst","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"roleHeading":"Instance Method"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropFirst(_:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/dropFirst(_:)":{"title":"dropFirst(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/dropfirst(_:)","abstract":[{"text":"Returns a subsequence containing all but the given number of initial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/dropFirst(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dropFirst"},{"kind":"text","text":"("},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"title":"Collection Implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]}}}