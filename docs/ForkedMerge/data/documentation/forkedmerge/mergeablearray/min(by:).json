{"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@warn_unqualified_access","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"min","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":"?","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A predicate that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"if its first argument should be ordered before its second"},{"text":" ","type":"text"},{"type":"text","text":"argument; otherwise, "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"areInIncreasingOrder"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequenceâ€™s minimum element, according to"},{"type":"text","text":" "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":". If the sequence has no elements, returns"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"The predicate must be a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"strict weak ordering"}]},{"text":" over the elements. That","type":"text"},{"type":"text","text":" "},{"text":"is, for any elements ","type":"text"},{"code":"a","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":", and "},{"code":"c","type":"codeVoice"},{"type":"text","text":", the following conditions must"},{"type":"text","text":" "},{"type":"text","text":"hold:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"areInIncreasingOrder(a, a)","type":"codeVoice"},{"type":"text","text":" is always "},{"code":"false","type":"codeVoice"},{"type":"text","text":". (Irreflexivity)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"areInIncreasingOrder(b, c)","type":"codeVoice"},{"type":"text","text":" are"},{"text":" ","type":"text"},{"type":"text","text":"both "},{"code":"true","type":"codeVoice"},{"text":", then ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"text":" is also","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"text":". (Transitive comparability)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two elements are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"type":"text","text":" if neither is ordered before the other"},{"text":" ","type":"text"},{"type":"text","text":"according to the predicate. If "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"c","type":"codeVoice"},{"type":"text","text":" are incomparable, then "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"c","type":"codeVoice"},{"text":" are also incomparable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}]}]}]},{"inlineContent":[{"type":"text","text":"This example shows how to use the "},{"type":"codeVoice","code":"min(by:)"},{"text":" method on a","type":"text"},{"type":"text","text":" "},{"text":"dictionary to find the key-value pair with the lowest value.","type":"text"}],"type":"paragraph"},{"code":["let hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]","let leastHue = hues.min { a, b in a.value < b.value }","print(leastHue)","\/\/ Prints \"Optional((key: \"Coral\", value: 16))\""],"type":"codeListing","syntax":null},{"style":"note","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the sequence.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"abstract":[{"text":"Returns the minimum element in the sequence, using the given predicate as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the comparison between elements."}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/min(by:)"]}],"metadata":{"symbolKind":"method","title":"min(by:)","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"role":"symbol","extendedModule":"Swift","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"min"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"externalID":"s:STsE3min2by7ElementQzSgSbAD_ADtKXE_tKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method"},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/min(by:)","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","role":"collectionGroup","kind":"article","title":"Sequence Implementations"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/min(by:)":{"title":"min(by:)","abstract":[{"type":"text","text":"Returns the minimum element in the sequence, using the given predicate as"},{"type":"text","text":" "},{"text":"the comparison between elements.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/min(by:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"min","kind":"identifier"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"?"}],"type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/min(by:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]}}}