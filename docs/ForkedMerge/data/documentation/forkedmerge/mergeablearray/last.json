{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"last"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"? { "},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the collection is empty, the value of this property is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":null,"type":"codeListing","code":["let numbers = [10, 20, 30, 40, 50]","if let lastNumber = numbers.last {","    print(lastNumber)","}","\/\/ Prints \"50\""]},{"name":"Complexity","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/last"]}],"sections":[],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"The last element of the collection.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"metadata":{"title":"last","roleHeading":"Instance Property","externalID":"s:SKsE4last7ElementQzSgvp::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"last","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"?","kind":"text"}],"extendedModule":"Swift","symbolKind":"property","role":"symbol"},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last","interfaceLanguage":"swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/last":{"url":"\/documentation\/forkedmerge\/mergeablearray\/last","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"last"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The last element of the collection."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last","role":"symbol","kind":"symbol","title":"last","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"abstract":[],"title":"BidirectionalCollection Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"}}}