{"abstract":[{"text":"The last element of the collection.","type":"text"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","title":"last","externalID":"s:SKsE4last7ElementQzSgvp::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"last","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"roleHeading":"Instance Property","role":"symbol","symbolKind":"property"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"last"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":"? { ","kind":"text"},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"If the collection is empty, the value of this property is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50]","if let lastNumber = numbers.last {","    print(lastNumber)","}","\/\/ Prints \"50\""],"type":"codeListing","syntax":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}],"name":"Complexity","style":"note","type":"aside"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/last"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/last":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/last","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"last"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The last element of the collection."}],"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/last","title":"last"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","role":"collectionGroup","title":"BidirectionalCollection Implementations","type":"topic","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]}}}