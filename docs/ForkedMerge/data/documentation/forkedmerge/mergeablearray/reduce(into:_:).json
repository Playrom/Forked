{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/reduce(into:_:)"]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(into:_:)","interfaceLanguage":"swift"},"abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"text":" ","type":"text"},{"text":"given closure.","type":"text"}],"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"initialResult"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"updateAccumulatingResult"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."}]}],"name":"initialResult"},{"name":"updateAccumulatingResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that updates the accumulating"},{"type":"text","text":" "},{"type":"text","text":"value with an element of the sequence."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The final accumulated value. If the sequence has no elements,"},{"text":" ","type":"text"},{"type":"text","text":"the result is "},{"type":"codeVoice","code":"initialResult"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the "},{"code":"reduce(into:_:)","type":"codeVoice"},{"type":"text","text":" method to produce a single value from the"},{"text":" ","type":"text"},{"text":"elements of an entire sequence. For example, you can use this method on an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array of integers to filter adjacent equal entries or count frequencies."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This method is preferred over "},{"type":"codeVoice","code":"reduce(_:_:)"},{"type":"text","text":" for efficiency when the"},{"text":" ","type":"text"},{"text":"result is a copy-on-write type, for example an Array or a Dictionary.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"type":"text","text":" closure is called sequentially with a"},{"type":"text","text":" "},{"type":"text","text":"mutable accumulating value initialized to "},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":" and each element"},{"text":" ","type":"text"},{"type":"text","text":"of the sequence. This example shows how to build a dictionary of letter"},{"type":"text","text":" "},{"type":"text","text":"frequencies of a string."}]},{"syntax":null,"code":["let letters = \"abracadabra\"","let letterCount = letters.reduce(into: [:]) { counts, letter in","    counts[letter, default: 0] += 1","}","\/\/ letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"code":"letters.reduce(into:_:)","type":"codeVoice"},{"text":" is called, the following steps occur:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"text":" closure is called with the initial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"accumulating value—"},{"type":"codeVoice","code":"[:]"},{"type":"text","text":" in this case—and the first character of"},{"type":"text","text":" "},{"type":"codeVoice","code":"letters"},{"type":"text","text":", modifying the accumulating value by setting "},{"code":"1","type":"codeVoice"},{"text":" for the key","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The closure is called again repeatedly with the updated accumulating","type":"text"},{"text":" ","type":"text"},{"text":"value and each element of the sequence.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When the sequence is exhausted, the accumulating value is returned to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the caller."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"type":"text","text":" is never"},{"type":"text","text":" "},{"text":"executed and ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" is the result of the call to"},{"type":"text","text":" "},{"code":"reduce(into:_:)","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"aside","style":"note","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}]}]}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","externalID":"s:STsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"title":"reduce(into:_:)"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","role":"collectionGroup","abstract":[],"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","title":"Sequence Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reduce(into:_:)":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(into:_:)","title":"reduce(into:_:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"url":"\/documentation\/forkedmerge\/mergeablearray\/reduce(into:_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","role":"collection","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"url":"\/documentation\/forkedmerge","title":"ForkedMerge","kind":"symbol","type":"topic"}}}