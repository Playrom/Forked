{"kind":"symbol","metadata":{"role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"externalID":"s:STsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","title":"lexicographicallyPrecedes(_:)","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"extendedModule":"Swift"},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"text":" ","type":"text"},{"text":"sequence in a lexicographical (dictionary) ordering, using the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"less-than operator ("},{"code":"<","type":"codeVoice"},{"text":") to compare elements.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"other","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sequence","kind":"typeIdentifier","preciseIdentifier":"s:ST"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"name":"other","content":[{"type":"paragraph","inlineContent":[{"text":"A sequence to compare to this sequence.","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"type":"text","text":" if this sequence precedes "},{"type":"codeVoice","code":"other"},{"text":" in a dictionary","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ordering; otherwise, "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses the "},{"code":"lexicographicallyPrecedes","type":"codeVoice"},{"text":" method to test which","type":"text"},{"type":"text","text":" "},{"text":"array of integers comes first in a lexicographical ordering.","type":"text"}]},{"syntax":null,"code":["let a = [1, 2, 2, 2]","let b = [1, 2, 3, 4]","","print(a.lexicographicallyPrecedes(b))","\/\/ Prints \"true\"","print(b.lexicographicallyPrecedes(b))","\/\/ Prints \"false\""],"type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This method implements the mathematical notion of lexicographical","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ordering, which has no connection to Unicode.  If you are sorting"},{"type":"text","text":" "},{"text":"strings to present to the end user, use ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" APIs that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"perform localized comparison."}]}],"name":"Note","style":"note"},{"content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"m","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"type":"text","text":" is the lesser of the length of the"},{"type":"text","text":" "},{"text":"sequence and the length of ","type":"text"},{"code":"other","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"Complexity","type":"aside","style":"note"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"title":"Sequence Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"type":"topic","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lexicographicallyPrecedes(_:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"type":"text","text":" "},{"text":"sequence in a lexicographical (dictionary) ordering, using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"less-than operator ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") to compare elements."}],"title":"lexicographicallyPrecedes(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"kind":"text","text":"<"},{"text":"OtherSequence","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic"}}}