{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"text":" ","type":"text"},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the"},{"type":"text","text":" "},{"type":"text","text":"less-than operator ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") to compare elements."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"externalID":"s:STsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","extendedModule":"Swift","role":"symbol","symbolKind":"method","roleHeading":"Instance Method","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"lexicographicallyPrecedes(_:)"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"other","kind":"internalParam"},{"kind":"text","text":": "},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"OtherSequence"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:ST","text":"Sequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"other","content":[{"inlineContent":[{"type":"text","text":"A sequence to compare to this sequence."}],"type":"paragraph"}]}]},{"content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if this sequence precedes ","type":"text"},{"code":"other","type":"codeVoice"},{"text":" in a dictionary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ordering; otherwise, "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This example uses the ","type":"text"},{"code":"lexicographicallyPrecedes","type":"codeVoice"},{"type":"text","text":" method to test which"},{"text":" ","type":"text"},{"text":"array of integers comes first in a lexicographical ordering.","type":"text"}]},{"syntax":null,"code":["let a = [1, 2, 2, 2]","let b = [1, 2, 3, 4]","","print(a.lexicographicallyPrecedes(b))","\/\/ Prints \"true\"","print(b.lexicographicallyPrecedes(b))","\/\/ Prints \"false\""],"type":"codeListing"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"This method implements the mathematical notion of lexicographical"},{"type":"text","text":" "},{"text":"ordering, which has no connection to Unicode.  If you are sorting","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"strings to present to the end user, use "},{"type":"codeVoice","code":"String"},{"type":"text","text":" APIs that"},{"text":" ","type":"text"},{"text":"perform localized comparison.","type":"text"}],"type":"paragraph"}]},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"text":" is the lesser of the length of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequence and the length of "},{"type":"codeVoice","code":"other"},{"text":".","type":"text"}]}],"type":"aside","style":"note"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:)"]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:)"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lexicographicallyPrecedes(_:)":{"abstract":[{"text":"Returns a Boolean value indicating whether the sequence precedes another","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the"},{"type":"text","text":" "},{"type":"text","text":"less-than operator ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") to compare elements."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:)","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"title":"lexicographicallyPrecedes(_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"title":"Sequence Implementations","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","abstract":[]}}}