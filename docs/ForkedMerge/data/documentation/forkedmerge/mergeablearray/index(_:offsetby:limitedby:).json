{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"index"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"i","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"text":" ","kind":"text"},{"text":"distance","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"limitedBy"},{"text":" ","kind":"text"},{"text":"limit","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":"?","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"i","content":[{"inlineContent":[{"text":"A valid index of the array.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The distance to offset ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"distance"},{"name":"limit","content":[{"inlineContent":[{"type":"text","text":"A valid index of the collection to use as a limit. If"},{"text":" ","type":"text"},{"code":"distance > 0","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"limit"},{"text":" should be greater than ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":" to have any"},{"text":" ","type":"text"},{"text":"effect. Likewise, if ","type":"text"},{"code":"distance < 0","type":"codeVoice"},{"type":"text","text":", "},{"code":"limit","type":"codeVoice"},{"type":"text","text":" should be less than "},{"type":"codeVoice","code":"i"},{"text":" ","type":"text"},{"type":"text","text":"to have any effect."}],"type":"paragraph"}]}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"text":"An index offset by ","type":"text"},{"type":"codeVoice","code":"distance"},{"text":" from the index ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":", unless that"},{"type":"text","text":" "},{"text":"index would be beyond ","type":"text"},{"type":"codeVoice","code":"limit"},{"text":" in the direction of movement. In that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"case, the method returns "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"The following example obtains an index advanced four positions from an"},{"type":"text","text":" "},{"text":"array’s starting index and then prints the element at that position. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation doesn’t require going beyond the limiting "},{"type":"codeVoice","code":"numbers.endIndex"},{"type":"text","text":" "},{"type":"text","text":"value, so it succeeds."}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50]","let i = numbers.index(numbers.startIndex, offsetBy: 4)","print(numbers[i])","\/\/ Prints \"50\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"The next example attempts to retrieve an index ten positions from","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"numbers.startIndex"},{"text":", but fails, because that distance is beyond the","type":"text"},{"type":"text","text":" "},{"text":"index passed as ","type":"text"},{"type":"codeVoice","code":"limit"},{"type":"text","text":"."}]},{"syntax":null,"code":["let j = numbers.index(numbers.startIndex,","                      offsetBy: 10,","                      limitedBy: numbers.endIndex)","print(j)","\/\/ Prints \"nil\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The value passed as ","type":"text"},{"type":"codeVoice","code":"distance"},{"text":" must not offset ","type":"text"},{"code":"i","type":"codeVoice"},{"type":"text","text":" beyond the bounds of"},{"type":"text","text":" "},{"text":"the collection, unless the index passed as ","type":"text"},{"type":"codeVoice","code":"limit"},{"text":" prevents offsetting","type":"text"},{"type":"text","text":" "},{"text":"beyond those bounds.","type":"text"}]},{"type":"aside","style":"note","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Returns an index that is the specified distance from the given index,"},{"text":" ","type":"text"},{"type":"text","text":"unless that distance is beyond a given limiting index."}],"metadata":{"extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"index(_:offsetBy:limitedBy:)","symbolKind":"method","roleHeading":"Instance Method","role":"symbol","externalID":"s:SksE5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"index"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"text":", ","kind":"text"},{"text":"offsetBy","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"limitedBy","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/index(_:offsetby:limitedby:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(_:offsetBy:limitedBy:)"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations"]]},"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/RandomAccessCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","title":"RandomAccessCollection Implementations","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","abstract":[],"kind":"article","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/index(_:offsetBy:limitedBy:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"index","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"limitedBy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":"?","kind":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/index(_:offsetby:limitedby:)","kind":"symbol","title":"index(_:offsetBy:limitedBy:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/index(_:offsetBy:limitedBy:)","abstract":[{"type":"text","text":"Returns an index that is the specified distance from the given index,"},{"type":"text","text":" "},{"type":"text","text":"unless that distance is beyond a given limiting index."}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"title":"MergeableArray","type":"topic"}}}