{"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"compare"},{"text":"<","kind":"text"},{"text":"Comparator","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Comparator","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Compared","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation14SortComparatorP8ComparedQa"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Comparator","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Compared","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation14SortComparatorP8ComparedQa"},{"text":") -> ","kind":"text"},{"text":"ComparisonResult","preciseIdentifier":"c:@E@NSComparisonResult","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Comparator","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"SortComparator","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation14SortComparatorP"},{"text":", ","kind":"text"},{"text":"Comparator","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The first element of the sequence of comparators specifies the primary"},{"text":" ","type":"text"},{"text":"comparator to be used in sorting the sequence’s elements. Any subsequent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"comparators are used to further refine the order of elements with equal"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"paragraph"}]}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"compare"},{"text":"<","kind":"text"},{"text":"Comparator","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Comparator"},{"kind":"text","text":"."},{"preciseIdentifier":"s:10Foundation14SortComparatorP8ComparedQa","text":"Compared","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Comparator","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:10Foundation14SortComparatorP8ComparedQa","text":"Compared","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ComparisonResult","kind":"typeIdentifier","preciseIdentifier":"c:@E@NSComparisonResult"}],"extendedModule":"Swift","title":"compare(_:_:)","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"roleHeading":"Instance Method","platforms":[{"introducedAt":"15.0","deprecated":false,"unavailable":false,"name":"iOS","beta":false},{"introducedAt":"12.0","deprecated":false,"beta":false,"name":"macOS","unavailable":false},{"introducedAt":"15.0","beta":false,"name":"tvOS","unavailable":false,"deprecated":false},{"unavailable":false,"deprecated":false,"introducedAt":"8.0","beta":false,"name":"watchOS"}],"symbolKind":"method","role":"symbol","externalID":"s:ST10FoundationE7compareySo18NSComparisonResultV8ComparedQyd___AFtAA14SortComparatorRd__7ElementQzRsd__lF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/compare(_:_:)"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"abstract":[{"type":"text","text":"If "},{"code":"lhs","type":"codeVoice"},{"type":"text","text":" is ordered before "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" in the ordering described by the given"},{"text":" ","type":"text"},{"text":"sequence of ","type":"text"},{"code":"SortComparator","type":"codeVoice"},{"type":"text","text":"s"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/compare(_:_:)"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"title":"Sequence Implementations","type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/compare(_:_:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"compare"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Comparator"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Comparator"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation14SortComparatorP8ComparedQa","text":"Compared"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Comparator"},{"text":".","kind":"text"},{"preciseIdentifier":"s:10Foundation14SortComparatorP8ComparedQa","text":"Compared","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ComparisonResult","preciseIdentifier":"c:@E@NSComparisonResult"}],"title":"compare(_:_:)","abstract":[{"type":"text","text":"If "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" is ordered before "},{"type":"codeVoice","code":"rhs"},{"text":" in the ordering described by the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequence of "},{"type":"codeVoice","code":"SortComparator"},{"type":"text","text":"s"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/compare(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/compare(_:_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"}}}