{"abstract":[{"text":"Returns a view presenting the elements of the collection in reverse","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"order."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reversed","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier","text":"ReversedCollection"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can reverse a collection without allocating new space for its"},{"text":" ","type":"text"},{"text":"elements by calling this ","type":"text"},{"type":"codeVoice","code":"reversed()"},{"text":" method. A ","type":"text"},{"code":"ReversedCollection","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"instance wraps an underlying collection and provides access to its"},{"type":"text","text":" "},{"text":"elements in reverse order. This example prints the characters of a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"string in reverse order:"}]},{"code":["let word = \"Backwards\"","for char in word.reversed() {","    print(char, terminator: \"\")","}","\/\/ Prints \"sdrawkcaB\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you need a reversed collection of the same type, you may be able to","type":"text"},{"type":"text","text":" "},{"text":"use the collection’s sequence-based or collection-based initializer. For","type":"text"},{"type":"text","text":" "},{"type":"text","text":"example, to get the reversed version of a string, reverse its"},{"type":"text","text":" "},{"type":"text","text":"characters and initialize a new "},{"code":"String","type":"codeVoice"},{"type":"text","text":" instance from the result."}]},{"code":["let reversedWord = String(word.reversed())","print(reversedWord)","\/\/ Prints \"sdrawkcaB\""],"type":"codeListing","syntax":null},{"type":"aside","style":"note","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/reversed()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","interfaceLanguage":"swift"},"metadata":{"title":"reversed()","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reversed","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"ReversedCollection","kind":"typeIdentifier","preciseIdentifier":"s:s18ReversedCollectionV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"externalID":"s:SKsE8reverseds18ReversedCollectionVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","role":"symbol"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","role":"collectionGroup","kind":"article","type":"topic","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reversed()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reversed"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:s18ReversedCollectionV","text":"ReversedCollection","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"type":"text","text":" "},{"type":"text","text":"order."}],"kind":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","role":"symbol","title":"reversed()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"}}}