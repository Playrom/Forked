{"abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"text":" ","type":"text"},{"text":"order.","type":"text"}],"metadata":{"title":"reversed()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reversed"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:s18ReversedCollectionV","text":"ReversedCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"role":"symbol","externalID":"s:SKsE8reverseds18ReversedCollectionVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"roleHeading":"Instance Method","extendedModule":"Swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reversed"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s18ReversedCollectionV","text":"ReversedCollection"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can reverse a collection without allocating new space for its"},{"text":" ","type":"text"},{"text":"elements by calling this ","type":"text"},{"type":"codeVoice","code":"reversed()"},{"text":" method. A ","type":"text"},{"type":"codeVoice","code":"ReversedCollection"},{"text":" ","type":"text"},{"type":"text","text":"instance wraps an underlying collection and provides access to its"},{"type":"text","text":" "},{"type":"text","text":"elements in reverse order. This example prints the characters of a"},{"text":" ","type":"text"},{"text":"string in reverse order:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let word = \"Backwards\"","for char in word.reversed() {","    print(char, terminator: \"\")","}","\/\/ Prints \"sdrawkcaB\""]},{"inlineContent":[{"text":"If you need a reversed collection of the same type, you may be able to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the collection’s sequence-based or collection-based initializer. For"},{"text":" ","type":"text"},{"type":"text","text":"example, to get the reversed version of a string, reverse its"},{"text":" ","type":"text"},{"type":"text","text":"characters and initialize a new "},{"type":"codeVoice","code":"String"},{"text":" instance from the result.","type":"text"}],"type":"paragraph"},{"code":["let reversedWord = String(word.reversed())","print(reversedWord)","\/\/ Prints \"sdrawkcaB\""],"type":"codeListing","syntax":null},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}],"type":"aside","style":"note"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/reversed()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reversed()":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns a view presenting the elements of the collection in reverse"},{"type":"text","text":" "},{"text":"order.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reversed","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18ReversedCollectionV","text":"ReversedCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","role":"symbol","title":"reversed()"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}]}}}