{"sections":[],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/reversed()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Returns a view presenting the elements of the collection in reverse","type":"text"},{"type":"text","text":" "},{"text":"order.","type":"text"}],"metadata":{"role":"symbol","extendedModule":"Swift","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"externalID":"s:SKsE8reverseds18ReversedCollectionVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reversed"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier","text":"ReversedCollection"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Method","title":"reversed()"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reversed","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:s18ReversedCollectionV","kind":"typeIdentifier","text":"ReversedCollection"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can reverse a collection without allocating new space for its"},{"type":"text","text":" "},{"text":"elements by calling this ","type":"text"},{"type":"codeVoice","code":"reversed()"},{"type":"text","text":" method. A "},{"code":"ReversedCollection","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance wraps an underlying collection and provides access to its"},{"text":" ","type":"text"},{"type":"text","text":"elements in reverse order. This example prints the characters of a"},{"text":" ","type":"text"},{"text":"string in reverse order:","type":"text"}]},{"code":["let word = \"Backwards\"","for char in word.reversed() {","    print(char, terminator: \"\")","}","\/\/ Prints \"sdrawkcaB\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need a reversed collection of the same type, you may be able to"},{"type":"text","text":" "},{"text":"use the collection’s sequence-based or collection-based initializer. For","type":"text"},{"type":"text","text":" "},{"type":"text","text":"example, to get the reversed version of a string, reverse its"},{"type":"text","text":" "},{"text":"characters and initialize a new ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" instance from the result."}]},{"type":"codeListing","syntax":null,"code":["let reversedWord = String(word.reversed())","print(reversedWord)","\/\/ Prints \"sdrawkcaB\""]},{"type":"aside","name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}]}],"kind":"content"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reversed()":{"url":"\/documentation\/forkedmerge\/mergeablearray\/reversed()","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reversed()","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reversed"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"ReversedCollection","preciseIdentifier":"s:s18ReversedCollectionV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a view presenting the elements of the collection in reverse","type":"text"},{"type":"text","text":" "},{"type":"text","text":"order."}],"title":"reversed()"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic","abstract":[],"title":"BidirectionalCollection Implementations"}}}