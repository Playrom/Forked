{"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(_:_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"sections":[],"abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"roleHeading":"Instance Method","externalID":"s:STsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","title":"reduce(_:_:)","extendedModule":"Swift","role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"initialResult","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"nextPartialResult","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"initialResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."},{"type":"text","text":" "},{"code":"initialResult","type":"codeVoice"},{"text":" is passed to ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" the first time the"},{"type":"text","text":" "},{"text":"closure is executed.","type":"text"}]}]},{"name":"nextPartialResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that combines an accumulating value and"},{"text":" ","type":"text"},{"text":"an element of the sequence into a new accumulating value, to be used","type":"text"},{"type":"text","text":" "},{"text":"in the next call of the ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"text":" closure or returned to","type":"text"},{"type":"text","text":" "},{"text":"the caller.","type":"text"}]}]}]},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The final accumulated value. If the sequence has no elements,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the result is "},{"code":"initialResult","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"reduce(_:_:)"},{"type":"text","text":" method to produce a single value from the elements"},{"type":"text","text":" "},{"type":"text","text":"of an entire sequence. For example, you can use this method on an array"},{"type":"text","text":" "},{"text":"of numbers to find their sum or product.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"nextPartialResult"},{"text":" closure is called sequentially with an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"accumulating value initialized to "},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" and each element of"},{"text":" ","type":"text"},{"type":"text","text":"the sequence. This example shows how to find the sum of an array of"},{"text":" ","type":"text"},{"type":"text","text":"numbers."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [1, 2, 3, 4]","let numberSum = numbers.reduce(0, { x, y in","    x + y","})","\/\/ numberSum == 10"],"type":"codeListing"},{"inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"numbers.reduce(_:_:)"},{"text":" is called, the following steps occur:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"nextPartialResult"},{"text":" closure is called with ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"text":"—","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"in this case—and the first element of "},{"code":"numbers","type":"codeVoice"},{"type":"text","text":", returning the sum:"},{"text":" ","type":"text"},{"code":"1","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The closure is called again repeatedly with the previous call’s return"},{"type":"text","text":" "},{"type":"text","text":"value and each element of the sequence."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the sequence is exhausted, the last value returned from the"},{"type":"text","text":" "},{"type":"text","text":"closure is returned to the caller."}]}]}]},{"inlineContent":[{"text":"If the sequence has no elements, ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" is never executed"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"initialResult","type":"codeVoice"},{"text":" is the result of the call to ","type":"text"},{"type":"codeVoice","code":"reduce(_:_:)"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}]}],"style":"note","name":"Complexity"}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/reduce(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/reduce(_:_:)":{"type":"topic","abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"title":"reduce(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", ("},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/reduce(_:_:)","kind":"symbol","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/reduce(_:_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","role":"collectionGroup","type":"topic","kind":"article","title":"Sequence Implementations"}}}