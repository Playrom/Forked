{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:by:)"},"abstract":[{"type":"text","text":"Returns the difference needed to produce this collection’s ordered"},{"type":"text","text":" "},{"type":"text","text":"elements from the given collection, using the given predicate as an"},{"type":"text","text":" "},{"text":"equivalence test.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/difference(from:by:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"metadata":{"externalID":"s:SKsE10difference4from2bys20CollectionDifferenceVy7ElementQzGqd___SbAG_AGtXEtSKRd__AFQyd__AGRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","platforms":[{"introducedAt":"13.0","name":"iOS","unavailable":false,"beta":false,"deprecated":false},{"deprecated":false,"introducedAt":"10.15","name":"macOS","unavailable":false,"beta":false},{"unavailable":false,"beta":false,"introducedAt":"13.0","deprecated":false,"name":"tvOS"},{"introducedAt":"6.0","deprecated":false,"unavailable":false,"name":"watchOS","beta":false}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"difference"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"CollectionDifference","preciseIdentifier":"s:s20CollectionDifferenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":">"}],"extendedModule":"Swift","role":"symbol","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"roleHeading":"Instance Method","symbolKind":"method","title":"difference(from:by:)"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"difference"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"from"},{"text":" ","kind":"text"},{"text":"other","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areEquivalent"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"C"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s20CollectionDifferenceV","text":"CollectionDifference"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"C","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"BidirectionalCollection","kind":"typeIdentifier","preciseIdentifier":"s:SK"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"C"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"other","content":[{"type":"paragraph","inlineContent":[{"text":"The base state.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that returns a Boolean value indicating"},{"type":"text","text":" "},{"text":"whether two elements are equivalent.","type":"text"}]}],"name":"areEquivalent"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"The difference needed to produce the receiver’s state from"},{"text":" ","type":"text"},{"text":"the parameter’s state.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function does not infer element moves. If you need to infer moves,"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"codeVoice","code":"inferringMoves()"},{"type":"text","text":" method on the resulting difference."}]},{"content":[{"inlineContent":[{"type":"text","text":"Worst case performance is O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" * ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"m","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the"},{"type":"text","text":" "},{"text":"count of this collection and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"text":" is ","type":"text"},{"code":"other.count","type":"codeVoice"},{"text":". You can expect","type":"text"},{"type":"text","text":" "},{"text":"faster execution when the collections share many common elements.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Complexity","type":"aside"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/difference(from:by:)":{"title":"difference(from:by:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"difference","kind":"identifier"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"C"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s20CollectionDifferenceV","text":"CollectionDifference"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":">","kind":"text"}],"abstract":[{"text":"Returns the difference needed to produce this collection’s ordered","type":"text"},{"text":" ","type":"text"},{"text":"elements from the given collection, using the given predicate as an","type":"text"},{"type":"text","text":" "},{"text":"equivalence test.","type":"text"}],"role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:by:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:by:)","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"abstract":[],"title":"BidirectionalCollection Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic"}}}