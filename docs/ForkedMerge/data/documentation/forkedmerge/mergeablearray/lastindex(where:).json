{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)"]}],"abstract":[{"text":"Returns the index of the last element in the collection that matches the","type":"text"},{"type":"text","text":" "},{"text":"given predicate.","type":"text"}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"lastIndex","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"where"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":"?"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element as its argument"},{"text":" ","type":"text"},{"type":"text","text":"and returns a Boolean value that indicates whether the passed element"},{"text":" ","type":"text"},{"text":"represents a match.","type":"text"}]}],"name":"predicate"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"The index of the last element in the collection that matches","type":"text"},{"type":"text","text":" "},{"code":"predicate","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if no elements match.","type":"text"}],"type":"paragraph"}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"You can use the predicate to find an element of a type that doesn’t","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conform to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol or to find an element that matches"},{"type":"text","text":" "},{"text":"particular criteria. This example finds the index of the last name that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"begins with the letter "},{"inlineContent":[{"text":"A:","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"code":["let students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","if let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {","    print(\"\\(students[i]) starts with 'A'!\")","}","\/\/ Prints \"Akosua starts with 'A'!\""],"syntax":null,"type":"codeListing"},{"style":"note","name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"metadata":{"role":"symbol","title":"lastIndex(where:)","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lastIndex"},{"text":"(","kind":"text"},{"text":"where","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"externalID":"s:SKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic","kind":"article","title":"BidirectionalCollection Implementations","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lastIndex(where:)":{"abstract":[{"type":"text","text":"Returns the index of the last element in the collection that matches the"},{"type":"text","text":" "},{"type":"text","text":"given predicate."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)","role":"symbol","title":"lastIndex(where:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"lastIndex"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"where"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":"?"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","role":"collection","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"url":"\/documentation\/forkedmerge","title":"ForkedMerge","kind":"symbol","type":"topic"}}}