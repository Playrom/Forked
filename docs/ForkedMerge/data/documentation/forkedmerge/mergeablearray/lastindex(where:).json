{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lastIndex","kind":"identifier"},{"text":"(","kind":"text"},{"text":"where","kind":"externalParam"},{"kind":"text","text":" "},{"text":"predicate","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"predicate","content":[{"inlineContent":[{"type":"text","text":"A closure that takes an element as its argument"},{"type":"text","text":" "},{"type":"text","text":"and returns a Boolean value that indicates whether the passed element"},{"text":" ","type":"text"},{"type":"text","text":"represents a match."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The index of the last element in the collection that matches"},{"text":" ","type":"text"},{"type":"codeVoice","code":"predicate"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if no elements match.","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"You can use the predicate to find an element of a type that doesn’t","type":"text"},{"type":"text","text":" "},{"text":"conform to the ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" protocol or to find an element that matches","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"particular criteria. This example finds the index of the last name that"},{"text":" ","type":"text"},{"text":"begins with the letter ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"A:"}]}]},{"code":["let students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","if let i = students.lastIndex(where: { $0.hasPrefix(\"A\") }) {","    print(\"\\(students[i]) starts with 'A'!\")","}","\/\/ Prints \"Akosua starts with 'A'!\""],"syntax":null,"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the collection."}]}],"name":"Complexity","style":"note","type":"aside"}],"kind":"content"}],"metadata":{"externalID":"s:SKsE9lastIndex5where0B0QzSgSb7ElementQzKXE_tKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"lastIndex","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"where"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"kind":"text","text":"?"}],"extendedModule":"Swift","title":"lastIndex(where:)","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"symbolKind":"method","role":"symbol"},"abstract":[{"type":"text","text":"Returns the index of the last element in the collection that matches the"},{"text":" ","type":"text"},{"text":"given predicate.","type":"text"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lastIndex(where:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/lastindex(where:)","abstract":[{"text":"Returns the index of the last element in the collection that matches the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given predicate."}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lastIndex"},{"kind":"text","text":"("},{"text":"where","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lastIndex(where:)","title":"lastIndex(where:)"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic","abstract":[],"title":"BidirectionalCollection Implementations"}}}