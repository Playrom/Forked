{"sections":[],"abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop.","type":"text"}],"metadata":{"roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"forEach(_:)","extendedModule":"Swift","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"externalID":"s:STsE7forEachyyy7ElementQzKXEKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence as a"},{"type":"text","text":" "},{"text":"parameter.","type":"text"}]}],"name":"body"}]},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"The two loops in the following example produce the same output:","type":"text"}],"type":"paragraph"},{"code":["let numberWords = [\"one\", \"two\", \"three\"]","for word in numberWords {","    print(word)","}","\/\/ Prints \"one\"","\/\/ Prints \"two\"","\/\/ Prints \"three\"","","numberWords.forEach { word in","    print(word)","}","\/\/ Same as above"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"forEach"},{"text":" method is distinct from a ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loop in two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"important ways:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot use a "},{"code":"break","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"continue"},{"text":" statement to exit the current","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call of the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" closure or skip subsequent calls."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Using the "},{"code":"return","type":"codeVoice"},{"text":" statement in the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure will exit only from"},{"type":"text","text":" "},{"text":"the current call to ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":", not from any outer scope, and won’t skip"},{"text":" ","type":"text"},{"text":"subsequent calls.","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/forEach(_:)":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)","title":"forEach(_:)","abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"type":"text","text":" "},{"text":"as a ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop."}],"url":"\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","role":"collectionGroup","kind":"article","title":"Sequence Implementations"}}}