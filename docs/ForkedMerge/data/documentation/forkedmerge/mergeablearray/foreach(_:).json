{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element of the sequence as a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parameter."}]}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The two loops in the following example produce the same output:"}]},{"code":["let numberWords = [\"one\", \"two\", \"three\"]","for word in numberWords {","    print(word)","}","\/\/ Prints \"one\"","\/\/ Prints \"two\"","\/\/ Prints \"three\"","","numberWords.forEach { word in","    print(word)","}","\/\/ Same as above"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"Using the ","type":"text"},{"code":"forEach","type":"codeVoice"},{"text":" method is distinct from a ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop in two"},{"text":" ","type":"text"},{"text":"important ways:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You cannot use a ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" or "},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statement to exit the current"},{"text":" ","type":"text"},{"type":"text","text":"call of the "},{"code":"body","type":"codeVoice"},{"text":" closure or skip subsequent calls.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement in the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" closure will exit only from"},{"text":" ","type":"text"},{"text":"the current call to ","type":"text"},{"code":"body","type":"codeVoice"},{"text":", not from any outer scope, and won’t skip","type":"text"},{"type":"text","text":" "},{"type":"text","text":"subsequent calls."}]}]}]}]}],"abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)"]}],"metadata":{"symbolKind":"method","roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"role":"symbol","externalID":"s:STsE7forEachyyy7ElementQzKXEKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","title":"forEach(_:)","extendedModule":"Swift","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}]},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)","interfaceLanguage":"swift"},"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/forEach(_:)":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/forEach(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/foreach(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"kind":"symbol","type":"topic","title":"forEach(_:)","abstract":[{"text":"Calls the given closure on each element in the sequence in the same order","type":"text"},{"text":" ","type":"text"},{"text":"as a ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","role":"collectionGroup","abstract":[],"kind":"article","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","title":"Sequence Implementations"},"doc://ForkedMerge/documentation/ForkedMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","role":"collection","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"url":"\/documentation\/forkedmerge","title":"ForkedMerge","kind":"symbol","type":"topic"}}}