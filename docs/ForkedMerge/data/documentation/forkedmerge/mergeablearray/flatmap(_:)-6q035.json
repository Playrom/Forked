{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"metadata":{"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"title":"flatMap(_:)","externalID":"s:STsE7flatMapySay7ElementQyd__Gqd__ABQzKXEKSTRd__lF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"flatMap"},{"text":"<","kind":"text"},{"text":"SegmentOfResult","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SegmentOfResult"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"SegmentOfResult"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":"]","kind":"text"}],"symbolKind":"method","role":"symbol"},"abstract":[{"text":"Returns an array containing the concatenated results of calling the","type":"text"},{"text":" ","type":"text"},{"text":"given transformation with each element of this sequence.","type":"text"}],"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/flatMap(_:)-6q035","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/flatmap(_:)-6q035"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"flatMap","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SegmentOfResult"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"] ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sequence","kind":"typeIdentifier","preciseIdentifier":"s:ST"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that accepts an element of this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequence as its argument and returns a sequence or collection."}]}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"The resulting flattened array.","type":"text"}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"Use this method to receive a single-level collection when your"},{"type":"text","text":" "},{"type":"text","text":"transformation produces a sequence or collection for each element."}],"type":"paragraph"},{"inlineContent":[{"text":"In this example, note the difference in the result of using ","type":"text"},{"type":"codeVoice","code":"map"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"flatMap"},{"type":"text","text":" with a transformation that returns an array."}],"type":"paragraph"},{"code":["let numbers = [1, 2, 3, 4]","","let mapped = numbers.map { Array(repeating: $0, count: $0) }","\/\/ [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]","","let flatMapped = numbers.flatMap { Array(repeating: $0, count: $0) }","\/\/ [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In fact, ","type":"text"},{"code":"s.flatMap(transform)","type":"codeVoice"},{"text":"  is equivalent to","type":"text"},{"type":"text","text":" "},{"code":"Array(s.map(transform).joined())","type":"codeVoice"},{"type":"text","text":"."}]},{"style":"note","type":"aside","name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"text":" + ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of this sequence"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"text":"m","type":"text"}]},{"text":" is the length of the result.","type":"text"}],"type":"paragraph"}]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","title":"ForkedMerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/flatMap(_:)-6q035":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"kind":"text","text":"<"},{"text":"SegmentOfResult","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"SegmentOfResult"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"]","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/flatMap(_:)-6q035","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/flatmap(_:)-6q035","abstract":[{"text":"Returns an array containing the concatenated results of calling the","type":"text"},{"type":"text","text":" "},{"text":"given transformation with each element of this sequence.","type":"text"}],"kind":"symbol","role":"symbol","title":"flatMap(_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","title":"Sequence Implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","role":"collectionGroup","abstract":[],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"url":"\/documentation\/forkedmerge\/mergeablearray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"title":"MergeableArray","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"type":"topic"}}}