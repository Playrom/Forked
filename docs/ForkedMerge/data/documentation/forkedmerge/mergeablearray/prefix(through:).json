{"sections":[],"abstract":[{"text":"Returns a subsequence from the start of the collection through the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified position."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"text":"through","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"extendedModule":"Swift","title":"prefix(through:)","externalID":"s:SlsE6prefix7through11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"roleHeading":"Instance Method"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"prefix","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"through"},{"text":" ","kind":"text"},{"text":"position","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The index of the last element to include in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"resulting subsequence. "},{"type":"codeVoice","code":"position"},{"text":" must be a valid index of the collection","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that is not equal to the "},{"code":"endIndex","type":"codeVoice"},{"type":"text","text":" property."}]}],"name":"position"}]},{"content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A subsequence up to, and including, the given position."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The resulting subsequence ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"includes","type":"text"}]},{"text":" the element at the position","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified by the "},{"type":"codeVoice","code":"through"},{"type":"text","text":" parameter."},{"type":"text","text":" "},{"text":"The following example searches for the index of the number ","type":"text"},{"code":"40","type":"codeVoice"},{"type":"text","text":" in an"},{"type":"text","text":" "},{"type":"text","text":"array of integers, and then prints the prefix of the array up to, and"},{"type":"text","text":" "},{"type":"text","text":"including, that index:"}]},{"type":"codeListing","code":["let numbers = [10, 20, 30, 40, 50, 60]","if let i = numbers.firstIndex(of: 40) {","    print(numbers.prefix(through: i))","}","\/\/ Prints \"[10, 20, 30, 40]\""],"syntax":null},{"inlineContent":[{"type":"text","text":"Using the "},{"code":"prefix(through:)","type":"codeVoice"},{"type":"text","text":" method is equivalent to using a partial"},{"text":" ","type":"text"},{"text":"closed range as the collection’s subscript. The subscript notation is","type":"text"},{"type":"text","text":" "},{"text":"preferred over ","type":"text"},{"type":"codeVoice","code":"prefix(through:)"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"code":["if let i = numbers.firstIndex(of: 40) {","    print(numbers[...i])","}","\/\/ Prints \"[10, 20, 30, 40]\""],"type":"codeListing"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}],"name":"Complexity"}]}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/prefix(through:)":{"title":"prefix(through:)","url":"\/documentation\/forkedmerge\/mergeablearray\/prefix(through:)","abstract":[{"type":"text","text":"Returns a subsequence from the start of the collection through the"},{"type":"text","text":" "},{"type":"text","text":"specified position."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(through:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"text":"through","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"title":"Collection Implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","role":"collectionGroup"}}}