{"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":" = true) -> ["},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"text":"The element that should be split upon.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one less than the number of subsequences to return. If"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original collection containing the remaining elements."},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"maxSplits"},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"type":"codeVoice","code":"separator"},{"text":" ","type":"text"},{"type":"text","text":"elements in the collection and for each instance of "},{"code":"separator","type":"codeVoice"},{"type":"text","text":" at"},{"text":" ","type":"text"},{"type":"text","text":"the start or end of the collection. If "},{"type":"codeVoice","code":"true"},{"text":", only nonempty","type":"text"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An array of subsequences, split from this collection’s"},{"text":" ","type":"text"},{"type":"text","text":"elements."}]}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"inlineContent":[{"text":"The resulting array consists of at most ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences."},{"text":" ","type":"text"},{"type":"text","text":"Elements that are used to split the collection are not returned as part"},{"type":"text","text":" "},{"text":"of any subsequence.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string at each"},{"text":" ","type":"text"},{"type":"text","text":"space character (” “). The first use of "},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word that"},{"type":"text","text":" "},{"type":"text","text":"was originally separated by one or more spaces."}]},{"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \"))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"text":" ","type":"text"},{"type":"text","text":"original string is split just once, into two new strings."}]},{"syntax":null,"code":["print(line.split(separator: \" \", maxSplits: 1))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The final example passes "},{"type":"codeVoice","code":"false"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"text":" ","type":"text"},{"type":"text","text":"were repeated."}],"type":"paragraph"},{"code":["print(line.split(separator: \" \", omittingEmptySubsequences: false))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing","syntax":null},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}],"type":"aside","name":"Complexity","style":"note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"extendedModule":"Swift","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","externalID":"s:SlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence"},{"kind":"text","text":"]"}],"roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)"},"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"},"abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/split(separator:maxSplits:omittingEmptySubsequences:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)","kind":"symbol","abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic","kind":"article","abstract":[],"role":"collectionGroup","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]}}}