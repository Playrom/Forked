{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = true) -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"},{"text":"]","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The element that should be split upon."}]}]},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"type":"text","text":" "},{"text":"one less than the number of subsequences to return. If","type":"text"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each consecutive pair of "},{"type":"codeVoice","code":"separator"},{"text":" ","type":"text"},{"text":"elements in the collection and for each instance of ","type":"text"},{"type":"codeVoice","code":"separator"},{"type":"text","text":" at"},{"type":"text","text":" "},{"type":"text","text":"the start or end of the collection. If "},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Elements that are used to split the collection are not returned as part"},{"text":" ","type":"text"},{"type":"text","text":"of any subsequence."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string at each","type":"text"},{"type":"text","text":" "},{"text":"space character (” “). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each word that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"was originally separated by one or more spaces."}]},{"syntax":null,"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \"))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["print(line.split(separator: \" \", maxSplits: 1))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""]},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"text":"were repeated.","type":"text"}],"type":"paragraph"},{"code":["print(line.split(separator: \" \", omittingEmptySubsequences: false))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing","syntax":null},{"type":"aside","style":"note","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","externalID":"s:SlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> ["},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}],"role":"symbol"},"abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"text":" ","type":"text"},{"text":"around elements equal to the given element.","type":"text"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/split(separator:maxSplits:omittingEmptySubsequences:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"text":" ","type":"text"},{"type":"text","text":"around elements equal to the given element."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(separator:maxSplits:omittingEmptySubsequences:)","title":"split(separator:maxSplits:omittingEmptySubsequences:)","kind":"symbol","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/split(separator:maxsplits:omittingemptysubsequences:)","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://ForkedMerge/documentation/ForkedMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","role":"collection","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"url":"\/documentation\/forkedmerge","title":"ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","role":"collectionGroup","kind":"article","title":"Collection Implementations","type":"topic"}}}