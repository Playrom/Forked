{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"metadata":{"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"role":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","roleHeading":"Instance Method","symbolKind":"method","externalID":"s:SlsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSay11SubSequenceQzGSi_S2b7ElementQzKXEtKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":" = true, ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"isSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"text":" ","type":"text"},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"type":"text","text":" "},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}]},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"text":" ","type":"text"},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"text":" predicate and for each element at the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"start or end of the collection satisfying the "},{"code":"isSeparator","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"predicate. The default value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns a Boolean value indicating whether the collection should be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"split at that element."}],"type":"paragraph"}],"name":"isSeparator"}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this collection’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements."}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences."},{"type":"text","text":" "},{"text":"Elements that are used to split the sequence are not returned as part of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any subsequence."}]},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when splitting a string using a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure that matches spaces. The first use of "},{"code":"split","type":"codeVoice"},{"text":" returns each word","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that was originally separated by one or more spaces."}],"type":"paragraph"},{"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"text":" ","type":"text"},{"type":"text","text":"original string is split just once, into two new strings."}]},{"code":["print(line.split(maxSplits: 1, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"type":"text","text":"were repeated."}]},{"syntax":null,"code":["print(line.split(omittingEmptySubsequences: false, whereSeparator: { $0 == \" \" }))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the length of the collection."}]}],"style":"note","name":"Complexity","type":"aside"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"text":"that don’t contain elements satisfying the given predicate.","type":"text"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","type":"topic","title":"Collection Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","title":"MergeableArray","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","url":"\/documentation\/forkedmerge\/mergeablearray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns the longest possible subsequences of the collection, in order,"},{"type":"text","text":" "},{"type":"text","text":"that don’t contain elements satisfying the given predicate."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"kind":"symbol"}}}