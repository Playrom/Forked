{"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstRange(of:)-6sfhc","interfaceLanguage":"swift"},"metadata":{"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"externalID":"s:SK17_StringProcessingSL7ElementRpzrlE10firstRange2ofSny5IndexQzGSgqd___tSlRd__ABQyd__ACRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","platforms":[{"introducedAt":"16.0","name":"iOS","deprecated":false,"beta":false,"unavailable":false},{"introducedAt":"13.0","name":"macOS","unavailable":false,"beta":false,"deprecated":false},{"unavailable":false,"deprecated":false,"introducedAt":"16.0","beta":false,"name":"tvOS"},{"deprecated":false,"introducedAt":"9.0","name":"watchOS","unavailable":false,"beta":false}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"title":"firstRange(of:)","extendedModule":"Swift","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"firstRange"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":">?"}],"role":"symbol"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/firstrange(of:)-6sfhc"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"abstract":[{"text":"Finds and returns the range of the first occurrence of a given collection","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within this collection."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"firstRange","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"kind":"text","text":" "},{"text":"other","kind":"internalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier","text":"Index"},{"text":">? ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":" == ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The collection to search for.","type":"text"}]}],"name":"other"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A range in the collection of the first occurrence of "},{"code":"sequence","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Returns "},{"code":"nil","type":"codeVoice"},{"text":" if ","type":"text"},{"type":"codeVoice","code":"sequence"},{"type":"text","text":" is not found."}],"type":"paragraph"}]}],"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic","kind":"article","title":"BidirectionalCollection Implementations","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/firstRange(of:)-6sfhc":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"firstRange","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sn","kind":"typeIdentifier","text":"Range"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"kind":"text","text":">?"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/firstRange(of:)-6sfhc","title":"firstRange(of:)","abstract":[{"text":"Finds and returns the range of the first occurrence of a given collection","type":"text"},{"type":"text","text":" "},{"text":"within this collection.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/firstrange(of:)-6sfhc","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]}},"doc://ForkedMerge/documentation/ForkedMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","role":"collection","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"url":"\/documentation\/forkedmerge","title":"ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]}}}