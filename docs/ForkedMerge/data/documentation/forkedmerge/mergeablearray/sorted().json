{"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"symbolKind":"method","title":"sorted()","role":"symbol","roleHeading":"Instance Method","externalID":"s:STsSL7ElementRpzrlE6sortedSayABGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"sorted"},{"kind":"text","text":"() -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"]","kind":"text"}],"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/sorted()"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/sorted()"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sorted","kind":"identifier"},{"kind":"text","text":"() -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sorted array of the sequence’s elements."}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can sort any sequence of elements that conform to the "},{"type":"codeVoice","code":"Comparable"},{"text":" ","type":"text"},{"text":"protocol by calling this method. Elements are sorted in ascending order.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of sorting a list of students’ names. Strings in Swift","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conform to the "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol, so the names are sorted in"},{"text":" ","type":"text"},{"text":"ascending order according to the less-than operator (","type":"text"},{"code":"<","type":"codeVoice"},{"type":"text","text":")."}]},{"code":["let students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","let sortedStudents = students.sorted()","print(sortedStudents)","\/\/ Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\""],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To sort the elements of your sequence in descending order, pass the"},{"type":"text","text":" "},{"type":"text","text":"greater-than operator ("},{"type":"codeVoice","code":">"},{"text":") to the ","type":"text"},{"type":"codeVoice","code":"sorted(by:)"},{"text":" method.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let descendingStudents = students.sorted(by: >)","print(descendingStudents)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""]},{"inlineContent":[{"type":"text","text":"The sorting algorithm is guaranteed to be stable. A stable sort"},{"text":" ","type":"text"},{"text":"preserves the relative order of elements that compare as equal.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" log "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the sequence.","type":"text"}]}]}]}],"abstract":[{"type":"text","text":"Returns the elements of the sequence, sorted."}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"title":"Sequence Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","abstract":[],"type":"topic","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/sorted()":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}]},"title":"sorted()","url":"\/documentation\/forkedmerge\/mergeablearray\/sorted()","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/sorted()","abstract":[{"type":"text","text":"Returns the elements of the sequence, sorted."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sorted"},{"text":"() -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"]"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"}}}