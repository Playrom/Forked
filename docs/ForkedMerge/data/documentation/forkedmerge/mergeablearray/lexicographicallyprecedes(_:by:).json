{"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Instance Method","extendedModule":"Swift","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lexicographicallyPrecedes"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"symbolKind":"method","role":"symbol","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"lexicographicallyPrecedes(_:by:)","externalID":"s:STsE25lexicographicallyPrecedes_2bySbqd___Sb7ElementQz_ADtKXEtKSTRd__ACQyd__ADRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"abstract":[{"text":"Returns a Boolean value indicating whether the sequence precedes another","type":"text"},{"type":"text","text":" "},{"text":"sequence in a lexicographical (dictionary) ordering, using the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"predicate to compare elements."}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:by:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:by:)"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"lexicographicallyPrecedes"},{"kind":"text","text":"<"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"other"},{"text":": ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","text":"Sequence"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":" == "},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"}],"languages":["swift"]}]},{"parameters":[{"name":"other","content":[{"inlineContent":[{"type":"text","text":"A sequence to compare to this sequence."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its first"},{"text":" ","type":"text"},{"type":"text","text":"argument should be ordered before its second argument; otherwise,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}],"name":"areInIncreasingOrder"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if this sequence precedes ","type":"text"},{"code":"other","type":"codeVoice"},{"type":"text","text":" in a dictionary"},{"type":"text","text":" "},{"text":"ordering as ordered by ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":"; otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"text":"The predicate must be a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"strict weak ordering"}]},{"type":"text","text":" over the elements. That"},{"type":"text","text":" "},{"type":"text","text":"is, for any elements "},{"code":"a","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"c"},{"type":"text","text":", the following conditions must"},{"type":"text","text":" "},{"text":"hold:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder(a, a)"},{"type":"text","text":" is always "},{"code":"false","type":"codeVoice"},{"text":". (Irreflexivity)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(a, b)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"text":" are","type":"text"},{"type":"text","text":" "},{"text":"both ","type":"text"},{"type":"codeVoice","code":"true"},{"text":", then ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"text":" is also","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"text":". (Transitive comparability)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two elements are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"text":" if neither is ordered before the other","type":"text"},{"type":"text","text":" "},{"text":"according to the predicate. If ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"c"},{"text":" are incomparable, then ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"text":" are also incomparable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}]}]}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This method implements the mathematical notion of lexicographical","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ordering, which has no connection to Unicode.  If you are sorting"},{"text":" ","type":"text"},{"text":"strings to present to the end user, use ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" APIs that perform","type":"text"},{"type":"text","text":" "},{"text":"localized comparison instead.","type":"text"}]}],"style":"note","type":"aside"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":"), where "},{"inlineContent":[{"text":"m","type":"text"}],"type":"emphasis"},{"text":" is the lesser of the length of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence and the length of "},{"code":"other","type":"codeVoice"},{"type":"text","text":"."}]}],"style":"note","type":"aside","name":"Complexity"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"title":"Sequence Implementations","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/lexicographicallyPrecedes(_:by:)":{"role":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/lexicographicallyprecedes(_:by:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"OtherSequence"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"lexicographicallyPrecedes(_:by:)","abstract":[{"text":"Returns a Boolean value indicating whether the sequence precedes another","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the given"},{"type":"text","text":" "},{"type":"text","text":"predicate to compare elements."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/lexicographicallyPrecedes(_:by:)"}}}