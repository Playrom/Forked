{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/max(by:)"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@warn_unqualified_access"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":"?","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"type":"text","text":"first argument should be ordered before its second argument;"},{"type":"text","text":" "},{"text":"otherwise, ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sequence’s maximum element if the sequence is not empty;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise, "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The predicate must be a "},{"inlineContent":[{"type":"text","text":"strict weak ordering"}],"type":"emphasis"},{"type":"text","text":" over the elements. That"},{"type":"text","text":" "},{"type":"text","text":"is, for any elements "},{"type":"codeVoice","code":"a"},{"type":"text","text":", "},{"code":"b","type":"codeVoice"},{"type":"text","text":", and "},{"code":"c","type":"codeVoice"},{"type":"text","text":", the following conditions must"},{"type":"text","text":" "},{"type":"text","text":"hold:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"areInIncreasingOrder(a, a)","type":"codeVoice"},{"text":" is always ","type":"text"},{"code":"false","type":"codeVoice"},{"text":". (Irreflexivity)","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"areInIncreasingOrder(b, c)","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"true"},{"type":"text","text":", then "},{"code":"areInIncreasingOrder(a, c)","type":"codeVoice"},{"text":" is also","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":". (Transitive comparability)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Two elements are "},{"inlineContent":[{"type":"text","text":"incomparable"}],"type":"emphasis"},{"type":"text","text":" if neither is ordered before the other"},{"type":"text","text":" "},{"type":"text","text":"according to the predicate. If "},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" are incomparable, and "},{"code":"b","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are incomparable, then "},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are also incomparable."},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This example shows how to use the ","type":"text"},{"code":"max(by:)","type":"codeVoice"},{"type":"text","text":" method on a"},{"text":" ","type":"text"},{"text":"dictionary to find the key-value pair with the highest value.","type":"text"}]},{"code":["let hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]","let greatestHue = hues.max { a, b in a.value < b.value }","print(greatestHue)","\/\/ Prints \"Optional((key: \"Heliotrope\", value: 296))\""],"type":"codeListing","syntax":null},{"name":"Complexity","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}]}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/max(by:)"},"abstract":[{"type":"text","text":"Returns the maximum element in the sequence, using the given predicate"},{"type":"text","text":" "},{"type":"text","text":"as the comparison between elements."}],"metadata":{"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"?"}],"symbolKind":"method","role":"symbol","title":"max(by:)","externalID":"s:STsE3max2by7ElementQzSgSbAD_ADtKXE_tKF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Method","extendedModule":"Swift"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/max(by:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/max(by:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/max(by:)","type":"topic","title":"max(by:)","abstract":[{"text":"Returns the maximum element in the sequence, using the given predicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the comparison between elements."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":"?","kind":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","title":"Sequence Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}]}}}