{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"joined"},{"kind":"text","text":"() -> "},{"text":"FlattenSequence","preciseIdentifier":"s:s15FlattenSequenceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"A flattened view of the elements of this","type":"text"},{"text":" ","type":"text"},{"text":"sequence of sequences.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"In this example, an array of three ranges is flattened so that the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements of each range can be iterated in turn."}]},{"code":["let ranges = [0..<3, 8..<10, 15..<17]","","\/\/ A for-in loop over 'ranges' accesses each range:","for range in ranges {","  print(range)","}","\/\/ Prints \"0..<3\"","\/\/ Prints \"8..<10\"","\/\/ Prints \"15..<17\"","","\/\/ Use 'joined()' to access each element of each range:","for index in ranges.joined() {","    print(index, terminator: \" \")","}","\/\/ Prints: \"0 1 2 8 9 15 16\""],"type":"codeListing","syntax":null}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined()","interfaceLanguage":"swift"},"metadata":{"extendedModule":"Swift","role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s15FlattenSequenceV","text":"FlattenSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Method","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"title":"joined()","externalID":"s:STsST7ElementRpzrlE6joineds15FlattenSequenceVyxGyF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV"},"sections":[],"abstract":[{"type":"text","text":"Returns the elements of this sequence of sequences, concatenated."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/joined()"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/joined()":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/joined()","abstract":[{"text":"Returns the elements of this sequence of sequences, concatenated.","type":"text"}],"title":"joined()","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/joined()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"joined"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s15FlattenSequenceV","text":"FlattenSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"role":"collectionGroup","title":"Sequence Implementations","kind":"article","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","title":"MergeableArray","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice â€” the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]}}}