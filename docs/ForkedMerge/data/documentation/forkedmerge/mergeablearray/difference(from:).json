{"metadata":{"platforms":[{"beta":false,"introducedAt":"13.0","name":"iOS","deprecated":false,"unavailable":false},{"deprecated":false,"name":"macOS","beta":false,"introducedAt":"10.15","unavailable":false},{"name":"tvOS","unavailable":false,"deprecated":false,"introducedAt":"13.0","beta":false},{"name":"watchOS","deprecated":false,"beta":false,"unavailable":false,"introducedAt":"6.0"}],"symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"difference","kind":"identifier"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"CollectionDifference","kind":"typeIdentifier","preciseIdentifier":"s:s20CollectionDifferenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"title":"difference(from:)","roleHeading":"Instance Method","externalID":"s:SKsSQ7ElementRpzrlE10difference4froms20CollectionDifferenceVyABGqd___tSKRd__AAQyd__ABRSlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","role":"symbol","extendedModule":"Swift","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}]},"abstract":[{"type":"text","text":"Returns the difference needed to produce this collection’s ordered"},{"type":"text","text":" "},{"type":"text","text":"elements from the given collection."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"difference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":" "},{"text":"other","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"text":"CollectionDifference","kind":"typeIdentifier","preciseIdentifier":"s:s20CollectionDifferenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"C"},{"text":" : ","kind":"text"},{"text":"BidirectionalCollection","kind":"typeIdentifier","preciseIdentifier":"s:SK"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The base state."}]}],"name":"other"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"The difference needed to produce this collection’s ordered"},{"text":" ","type":"text"},{"text":"elements from the given collection.","type":"text"}],"type":"paragraph"}]},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This function does not infer element moves. If you need to infer moves,"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"code":"inferringMoves()","type":"codeVoice"},{"text":" method on the resulting difference.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Worst case performance is O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" * ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the"},{"text":" ","type":"text"},{"text":"count of this collection and ","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"type":"text","text":" is "},{"type":"codeVoice","code":"other.count"},{"type":"text","text":". You can expect"},{"type":"text","text":" "},{"text":"faster execution when the collections share many common elements, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]}],"name":"Complexity","type":"aside"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/difference(from:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"]]},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/difference(from:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"difference","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CollectionDifference","preciseIdentifier":"s:s20CollectionDifferenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"difference(from:)","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/difference(from:)","abstract":[{"text":"Returns the difference needed to produce this collection’s ordered","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements from the given collection."}],"url":"\/documentation\/forkedmerge\/mergeablearray\/difference(from:)","kind":"symbol"}}}