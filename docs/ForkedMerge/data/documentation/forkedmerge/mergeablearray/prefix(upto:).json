{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"sections":[],"kind":"symbol","abstract":[{"text":"Returns a subsequence from the start of the collection up to, but not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including, the specified position."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/prefix(upto:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(upTo:)"},"metadata":{"externalID":"s:SlsE6prefix4upTo11SubSequenceQz5IndexQz_tF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","role":"symbol","title":"prefix(upTo:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"text":"upTo","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"}],"extendedModule":"Swift","symbolKind":"method","modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"upTo"},{"text":" ","kind":"text"},{"text":"end","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl11SubSequenceQa","text":"SubSequence","kind":"typeIdentifier"}],"platforms":["macOS"]}]},{"parameters":[{"name":"end","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The “past the end” index of the resulting subsequence."},{"text":" ","type":"text"},{"code":"end","type":"codeVoice"},{"type":"text","text":" must be a valid index of the collection."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subsequence up to, but not including, the "},{"type":"codeVoice","code":"end"},{"type":"text","text":" position."}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The resulting subsequence ","type":"text"},{"inlineContent":[{"text":"does not include","type":"text"}],"type":"emphasis"},{"type":"text","text":" the element at the position"},{"type":"text","text":" "},{"type":"codeVoice","code":"end"},{"text":". The following example searches for the index of the number ","type":"text"},{"type":"codeVoice","code":"40"},{"type":"text","text":" "},{"type":"text","text":"in an array of integers, and then prints the prefix of the array up to,"},{"type":"text","text":" "},{"type":"text","text":"but not including, that index:"}]},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60]","if let i = numbers.firstIndex(of: 40) {","    print(numbers.prefix(upTo: i))","}","\/\/ Prints \"[10, 20, 30]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing the collection’s starting index as the "},{"type":"codeVoice","code":"end"},{"text":" parameter results in","type":"text"},{"text":" ","type":"text"},{"text":"an empty subsequence.","type":"text"}]},{"syntax":null,"code":["print(numbers.prefix(upTo: numbers.startIndex))","\/\/ Prints \"[]\""],"type":"codeListing"},{"inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"prefix(upTo:)"},{"text":" method is equivalent to using a partial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"half-open range as the collection’s subscript. The subscript notation is"},{"type":"text","text":" "},{"text":"preferred over ","type":"text"},{"code":"prefix(upTo:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["if let i = numbers.firstIndex(of: 40) {","    print(numbers[..<i])","}","\/\/ Prints \"[10, 20, 30]\""],"syntax":null,"type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}],"type":"aside","name":"Complexity"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/prefix(upTo:)":{"url":"\/documentation\/forkedmerge\/mergeablearray\/prefix(upto:)","role":"symbol","kind":"symbol","title":"prefix(upTo:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/prefix(upTo:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"text":"upTo","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sl5IndexQa","text":"Index","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Returns a subsequence from the start of the collection up to, but not"},{"type":"text","text":" "},{"text":"including, the specified position.","type":"text"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic","abstract":[],"kind":"article","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","role":"collectionGroup"}}}