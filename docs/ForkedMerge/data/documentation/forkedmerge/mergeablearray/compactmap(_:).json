{"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementOfResult"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"kind":"text","text":"]"}]}],"kind":"declarations"},{"parameters":[{"name":"transform","content":[{"inlineContent":[{"type":"text","text":"A closure that accepts an element of this"},{"text":" ","type":"text"},{"type":"text","text":"sequence as its argument and returns an optional value."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"text":"An array of the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results of calling ","type":"text"},{"code":"transform","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"with each element of the sequence."}],"type":"paragraph"}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use this method to receive an array of non-optional values when your"},{"text":" ","type":"text"},{"type":"text","text":"transformation produces an optional value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this example, note the difference in the result of using ","type":"text"},{"code":"map","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"compactMap"},{"text":" with a transformation that returns an optional ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value."}]},{"type":"codeListing","code":["let possibleNumbers = [\"1\", \"2\", \"three\", \"\/\/\/4\/\/\/\", \"5\"]","","let mapped: [Int?] = possibleNumbers.map { str in Int(str) }","\/\/ [1, 2, nil, nil, 5]","","let compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }","\/\/ [1, 2, 5]"],"syntax":null},{"style":"note","name":"Complexity","type":"aside","content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of this sequence.","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/compactMap(_:)","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Instance Method","symbolKind":"method","title":"compactMap(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementOfResult"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"extendedModule":"Swift","externalID":"s:STsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","role":"symbol"},"abstract":[{"type":"text","text":"Returns an array containing the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" results of calling the given"},{"type":"text","text":" "},{"type":"text","text":"transformation with each element of this sequence."}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/compactmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","title":"Sequence Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice â€” the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/compactMap(_:)":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/compactMap(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/compactmap(_:)","kind":"symbol","title":"compactMap(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ElementOfResult","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"ElementOfResult"},{"kind":"text","text":"?) "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns an array containing the non-"},{"type":"codeVoice","code":"nil"},{"text":" results of calling the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"transformation with each element of this sequence."}]},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}]}}}