{"kind":"symbol","identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/contains(_:)","interfaceLanguage":"swift"},"abstract":[{"text":"Returns a Boolean value indicating whether the sequence contains the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given element."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"contains","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"element","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"element","content":[{"inlineContent":[{"text":"The element to find in the sequence.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the element was found in the sequence; otherwise,","type":"text"},{"type":"text","text":" "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"This example checks to see whether a favorite actor is in an array","type":"text"},{"text":" ","type":"text"},{"text":"storing a movie’s cast.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]","print(cast.contains(\"Marlon\"))","\/\/ Prints \"true\"","print(cast.contains(\"James\"))","\/\/ Prints \"false\""],"type":"codeListing"},{"type":"aside","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the sequence.","type":"text"}],"type":"paragraph"}],"style":"note"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray\/contains(_:)"]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"]]},"metadata":{"role":"symbol","extendedModule":"Swift","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"contains"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"title":"contains(_:)","roleHeading":"Instance Method","symbolKind":"method","externalID":"s:STsSQ7ElementRpzrlE8containsySbABF::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV"},"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"url":"\/documentation\/forkedmerge\/mergeablearray","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"title":"MergeableArray","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/contains(_:)":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence contains the"},{"type":"text","text":" "},{"type":"text","text":"given element."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/contains(_:)","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/contains(_:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"title":"contains(_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"title":"Sequence Implementations","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","abstract":[]}}}