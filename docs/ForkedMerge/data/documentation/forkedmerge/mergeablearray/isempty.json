{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isEmpty"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"When you need to check whether your collection is empty, use the","type":"text"},{"type":"text","text":" "},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property instead of checking that the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is"},{"type":"text","text":" "},{"type":"text","text":"equal to zero. For collections that don’t conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":", accessing the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property iterates","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"through the elements of the collection."}],"type":"paragraph"},{"code":["let horseName = \"Silver\"","if horseName.isEmpty {","    print(\"My horse has no name.\")","} else {","    print(\"Hi ho, \\(horseName)!\")","}","\/\/ Prints \"Hi ho, Silver!\")"],"type":"codeListing","syntax":null},{"type":"aside","content":[{"inlineContent":[{"text":"O(1)","type":"text"}],"type":"paragraph"}],"style":"note","name":"Complexity"}]}],"sections":[],"variants":[{"paths":["\/documentation\/forkedmerge\/mergeablearray\/isempty"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"A Boolean value indicating whether the collection is empty.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"role":"symbol","extendedModule":"Swift","title":"isEmpty","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isEmpty"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"symbolKind":"property","modules":[{"relatedModules":["Swift"],"name":"ForkedMerge"}],"externalID":"s:SlsE7isEmptySbvp::SYNTHESIZED::s:11ForkedMerge14MergeableArrayV","roleHeading":"Instance Property"},"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/isEmpty","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"]]},"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/isEmpty":{"title":"isEmpty","url":"\/documentation\/forkedmerge\/mergeablearray\/isempty","abstract":[{"type":"text","text":"A Boolean value indicating whether the collection is empty."}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/isEmpty","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isEmpty","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","type":"topic","title":"Collection Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","title":"MergeableArray","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]}}}