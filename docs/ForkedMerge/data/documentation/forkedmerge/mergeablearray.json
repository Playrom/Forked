{"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","interfaceLanguage":"swift"},"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)"],"generated":true,"anchor":"Initializers"},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"],"anchor":"Instance-Methods","generated":true},{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"kind":"symbol","relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/ForkedMerge\/6Forked9MergeableP","doc:\/\/ForkedMerge\/SK","doc:\/\/ForkedMerge\/Sl","doc:\/\/ForkedMerge\/s8CopyableP","doc:\/\/ForkedMerge\/Se","doc:\/\/ForkedMerge\/SE","doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/Sk","doc:\/\/ForkedMerge\/ST"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SQ","text":"Equatable","kind":"typeIdentifier"}]}]}],"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"metadata":{"title":"MergeableArray","roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"ForkedMerge"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"externalID":"s:11ForkedMerge14MergeableArrayV","role":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray"]}],"abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/remove(at:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"remove","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"remove(at:)","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/remove(at:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/values":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values","title":"values","abstract":[],"role":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"values","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Array","kind":"typeIdentifier","preciseIdentifier":"s:Sa"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/values"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/RandomAccessCollection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","title":"RandomAccessCollection Implementations","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","type":"topic","kind":"article","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Mergeable-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","title":"Mergeable Implementations","abstract":[],"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/forkedmerge\/mergeablearray\/mergeable-implementations"},"doc://ForkedMerge/6Forked9MergeableP":{"title":"Forked.Mergeable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/6Forked9MergeableP"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations","role":"collectionGroup","type":"topic","kind":"article","title":"Sequence Implementations"},"doc://ForkedMerge/Sk":{"title":"Swift.RandomAccessCollection","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sk"},"doc://ForkedMerge/SK":{"title":"Swift.BidirectionalCollection","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SK"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/ExpressibleByArrayLiteral-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/expressiblebyarrayliteral-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","role":"collectionGroup","type":"topic","title":"ExpressibleByArrayLiteral Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","type":"topic","abstract":[],"kind":"article","title":"Collection Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","role":"collectionGroup"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/count":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","title":"count","abstract":[],"role":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"count","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt64V","text":"UInt64","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/count"},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"},"doc://ForkedMerge/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol"},"doc://ForkedMerge/s25ExpressibleByArrayLiteralP":{"title":"Swift.ExpressibleByArrayLiteral","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/insert(_:at:)":{"kind":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"url":"\/documentation\/forkedmerge\/mergeablearray\/insert(_:at:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"insert","kind":"identifier"},{"kind":"text","text":"("},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","title":"insert(_:at:)","role":"symbol"},"doc://ForkedMerge/Se":{"title":"Swift.Decodable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Se"},"doc://ForkedMerge/Sl":{"title":"Swift.Collection","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sl"},"doc://ForkedMerge/ST":{"title":"Swift.Sequence","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/ST"},"doc://ForkedMerge/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SQ"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-4xgxi":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","title":"merged(withSubordinate:commonAncestor:)","abstract":[{"type":"text","text":"Merge when elements are mergeable and identifiable. More object-like."},{"text":" ","type":"text"},{"text":"Will ensure uniqueness of identifiers, and merge together elements with the same identifier.","type":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-4xgxi","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mergeable"},{"text":", ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"merged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"withSubordinate","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"commonAncestor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","kind":"typeIdentifier","text":"MergeableArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/append(_:)":{"title":"append(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"append","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":")","kind":"text"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/append(_:)","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","abstract":[],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init()":{"abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","type":"topic","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"url":"\/documentation\/forkedmerge\/mergeablearray\/init()","title":"init()","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"abstract":[],"title":"BidirectionalCollection Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/entriesUniquelyIdentified()":{"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","title":"entriesUniquelyIdentified()","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"entriesUniquelyIdentified"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Identifiable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"type":"text","text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element."},{"type":"text","text":" "},{"type":"text","text":"The relative order of the remaining elements is preserved."}],"kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-8913f":{"title":"merged(withSubordinate:commonAncestor:)","url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-8913f","kind":"symbol","abstract":[{"type":"text","text":"For non-mergeables that are identifiable and equatable. Here we can at least see"},{"text":" ","type":"text"},{"type":"text","text":"which branch has changed, and choose that branch, even if we can’t “fuse” the elements."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merged"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"withSubordinate"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"code":"Identifiable","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Decodable-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","title":"Decodable Implementations","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/decodable-implementations","type":"topic","kind":"article","role":"collectionGroup"},"doc://ForkedMerge/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s8CopyableP","title":"Swift.Copyable"},"doc://ForkedMerge/SE":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SE","title":"Swift.Encodable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Equatable-Implementations":{"role":"collectionGroup","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/equatable-implementations","title":"Equatable Implementations","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init(_:)":{"title":"init(_:)","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/init(_:)","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(["},{"text":"Element","kind":"typeIdentifier"},{"text":"])","kind":"text"}]}}}