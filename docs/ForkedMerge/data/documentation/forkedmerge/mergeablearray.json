{"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/ForkedMerge\/6Forked9MergeableP","doc:\/\/ForkedMerge\/SK","doc:\/\/ForkedMerge\/Sl","doc:\/\/ForkedMerge\/s8CopyableP","doc:\/\/ForkedMerge\/Se","doc:\/\/ForkedMerge\/SE","doc:\/\/ForkedMerge\/SQ","doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP","doc:\/\/ForkedMerge\/SH","doc:\/\/ForkedMerge\/Sk","doc:\/\/ForkedMerge\/ST"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SQ","text":"Equatable"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)"],"anchor":"Initializers","title":"Initializers"},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)"],"generated":true,"title":"Instance Methods","anchor":"Instance-Methods"},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"],"generated":true}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablearray"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"},"metadata":{"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"title":"MergeableArray","symbolKind":"struct","role":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"externalID":"s:11ForkedMerge14MergeableArrayV","modules":[{"name":"ForkedMerge"}]},"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-4xgxi":{"title":"merged(withSubordinate:commonAncestor:)","type":"topic","abstract":[{"text":"Merge when elements are mergeable and identifiable. More object-like.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Will ensure uniqueness of identifiers, and merge together elements with the same identifier."}],"url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-4xgxi","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":", "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merged","kind":"identifier"},{"kind":"text","text":"("},{"text":"withSubordinate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">, "},{"text":"commonAncestor","kind":"externalParam"},{"kind":"text","text":": "},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"MergeableArray","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-4xgxi","kind":"symbol"},"doc://ForkedMerge/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/ForkedMerge\/SQ","type":"unresolvable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/count":{"title":"count","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/count","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"count"},{"kind":"text","text":": "},{"text":"UInt64","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/count","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","title":"MergeableArray","type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"text":"The stress here is on values, because this array does not guarantee that uniqueness of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableArray","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]},"doc://ForkedMerge/6Forked9MergeableP":{"title":"Forked.Mergeable","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/6Forked9MergeableP"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/RandomAccessCollection-Implementations":{"title":"RandomAccessCollection Implementations","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/randomaccesscollection-implementations","role":"collectionGroup","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/RandomAccessCollection-Implementations","kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/merged(withSubordinate:commonAncestor:)-8913f":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merged"},{"text":"(","kind":"text"},{"text":"withSubordinate","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"commonAncestor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","text":"MergeableArray"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"MergeableArray","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge14MergeableArrayV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/merged(withSubordinate:commonAncestor:)-8913f","type":"topic","title":"merged(withSubordinate:commonAncestor:)","role":"symbol","abstract":[{"type":"text","text":"For non-mergeables that are identifiable and equatable. Here we can at least see"},{"text":" ","type":"text"},{"type":"text","text":"which branch has changed, and choose that branch, even if we can’t “fuse” the elements."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/merged(withsubordinate:commonancestor:)-8913f"},"doc://ForkedMerge/Se":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Se","title":"Swift.Decodable"},"doc://ForkedMerge/ST":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/ST","title":"Swift.Sequence"},"doc://ForkedMerge/Sl":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sl","title":"Swift.Collection"},"doc://ForkedMerge/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s8CopyableP","title":"Swift.Copyable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/values":{"title":"values","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/values","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"values"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sa","text":"Array"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/values","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/remove(at:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remove","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Element"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/remove(at:)","type":"topic","title":"remove(at:)","role":"symbol","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/remove(at:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/BidirectionalCollection-Implementations":{"title":"BidirectionalCollection Implementations","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/bidirectionalcollection-implementations","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/BidirectionalCollection-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Equatable-Implementations":{"type":"topic","url":"\/documentation\/forkedmerge\/mergeablearray\/equatable-implementations","role":"collectionGroup","kind":"article","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Equatable-Implementations","title":"Equatable Implementations"},"doc://ForkedMerge/s25ExpressibleByArrayLiteralP":{"title":"Swift.ExpressibleByArrayLiteral","type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/s25ExpressibleByArrayLiteralP"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/append(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/append(_:)","type":"topic","title":"append(_:)","role":"symbol","abstract":[],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/append(_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/entriesUniquelyIdentified()":{"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Returns a new array with entries uniquely identified, keeping only the most recently modified instance of each uniquely identified element."},{"type":"text","text":" "},{"text":"The relative order of the remaining elements is preserved.","type":"text"}],"title":"entriesUniquelyIdentified()","url":"\/documentation\/forkedmerge\/mergeablearray\/entriesuniquelyidentified()","type":"topic","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/entriesUniquelyIdentified()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"entriesUniquelyIdentified"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:11ForkedMerge14MergeableArrayV","kind":"typeIdentifier","text":"MergeableArray"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Collection-Implementations":{"kind":"article","role":"collectionGroup","url":"\/documentation\/forkedmerge\/mergeablearray\/collection-implementations","type":"topic","title":"Collection Implementations","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Collection-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Sequence-Implementations":{"role":"collectionGroup","title":"Sequence Implementations","kind":"article","type":"topic","abstract":[],"url":"\/documentation\/forkedmerge\/mergeablearray\/sequence-implementations","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Sequence-Implementations"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/insert(_:at:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"insert","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/insert(_:at:)","type":"topic","title":"insert(_:at:)","role":"symbol","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/insert(_:at:)"},"doc://ForkedMerge/SK":{"type":"unresolvable","title":"Swift.BidirectionalCollection","identifier":"doc:\/\/ForkedMerge\/SK"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Mergeable-Implementations":{"url":"\/documentation\/forkedmerge\/mergeablearray\/mergeable-implementations","type":"topic","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Mergeable-Implementations","role":"collectionGroup","title":"Mergeable Implementations","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init()":{"fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init()","type":"topic","title":"init()","role":"symbol","abstract":[],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray\/init()"},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol"},"doc://ForkedMerge/Sk":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/Sk","title":"Swift.RandomAccessCollection"},"doc://ForkedMerge/SH":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SH","title":"Swift.Hashable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/init(_:)":{"kind":"symbol","abstract":[],"type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"Element"},{"text":"])","kind":"text"}],"title":"init(_:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/init(_:)","url":"\/documentation\/forkedmerge\/mergeablearray\/init(_:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/ExpressibleByArrayLiteral-Implementations":{"role":"collectionGroup","abstract":[],"title":"ExpressibleByArrayLiteral Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/expressiblebyarrayliteral-implementations","type":"topic","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/ExpressibleByArrayLiteral-Implementations"},"doc://ForkedMerge/SE":{"type":"unresolvable","identifier":"doc:\/\/ForkedMerge\/SE","title":"Swift.Encodable"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray/Decodable-Implementations":{"role":"collectionGroup","abstract":[],"title":"Decodable Implementations","url":"\/documentation\/forkedmerge\/mergeablearray\/decodable-implementations","type":"topic","kind":"article","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray\/Decodable-Implementations"}}}