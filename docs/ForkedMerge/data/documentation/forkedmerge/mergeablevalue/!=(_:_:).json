{"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A value to compare."}]}]},{"content":[{"inlineContent":[{"text":"Another value to compare.","type":"text"}],"type":"paragraph"}],"name":"rhs"}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"Inequality is the inverse of equality. For any values ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":", "},{"type":"codeVoice","code":"a != b"},{"type":"text","text":" "},{"text":"implies that ","type":"text"},{"type":"codeVoice","code":"a == b"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is the default implementation of the not-equal-to operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"for any type that conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/!=(_:_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/mergeablevalue\/!=(_:_:)"]}],"metadata":{"title":"!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"modules":[{"name":"ForkedMerge","relatedModules":["Swift"]}],"extendedModule":"Swift","roleHeading":"Operator","symbolKind":"op","externalID":"s:SQsE2neoiySbx_xtFZ::SYNTHESIZED::s:11ForkedMerge14MergeableValueV","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/Equatable-Implementations"]]},"abstract":[{"text":"Returns a Boolean value indicating whether two values are not equal.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue/Equatable-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/Equatable-Implementations","abstract":[],"title":"Equatable Implementations","type":"topic","url":"\/documentation\/forkedmerge\/mergeablevalue\/equatable-implementations","role":"collectionGroup","kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableValue"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"title":"MergeableValue","url":"\/documentation\/forkedmerge\/mergeablevalue","abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"text":" ","type":"text"},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"type":"text","text":" "},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N PreguiÃ§a, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue/!=(_:_:)":{"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"!=(_:_:)","abstract":[{"text":"Returns a Boolean value indicating whether two values are not equal.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue\/!=(_:_:)","url":"\/documentation\/forkedmerge\/mergeablevalue\/!=(_:_:)","role":"symbol","kind":"symbol"}}}