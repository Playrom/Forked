{"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"symbolKind":"struct","modules":[{"name":"ForkedMerge"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"title":"ArrayOfIdentifiableMerger","externalID":"s:11ForkedMerge25ArrayOfIdentifiableMergerV","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"roleHeading":"Structure","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()"],"generated":true,"anchor":"Initializers"},{"title":"Instance Methods","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2"],"generated":true,"anchor":"Instance-Methods"},{"generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations"}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Element","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Equatable","preciseIdentifier":"s:SQ","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12IdentifiableP","text":"Identifiable"}],"platforms":["macOS"]}]}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","interfaceLanguage":"swift"},"abstract":[{"text":"Merges an array, ensuring that the result has elements with unqiue identifiers.","type":"text"}],"variants":[{"paths":["\/documentation\/forkedmerge\/arrayofidentifiablemerger"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/merge(_:withSubordinate:commonAncestor:)-1pmm2":{"role":"symbol","abstract":[{"type":"text","text":"This function merges two arrays of elements that are identifiable and mergeable."},{"text":" ","type":"text"},{"text":"The result is different to merging where the elements are not mergeable.","type":"text"},{"type":"text","text":" "},{"text":"This call will recurse the merge.","type":"text"}],"title":"merge(_:withSubordinate:commonAncestor:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Equatable"},{"text":", and ","type":"text"},{"code":"Identifiable","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merge(_:withsubordinate:commonancestor:)-1pmm2","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"merge"},{"text":"([","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"withSubordinate","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Element"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"commonAncestor"},{"kind":"text","text":": ["},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"]) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ["},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"]"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/init()":{"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/init()","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"()","kind":"text"}],"title":"init()","role":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/Merger-Implementations":{"role":"collectionGroup","abstract":[],"title":"Merger Implementations","kind":"article","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merger-implementations"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"title":"ArrayOfIdentifiableMerger","kind":"symbol","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"title":"Merger","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"type":"text","text":" "},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}],"url":"\/documentation\/forkedmerge\/merger","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Merger"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Merger","kind":"identifier"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol"}}}