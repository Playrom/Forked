{"metadata":{"symbolKind":"struct","externalID":"s:11ForkedMerge25ArrayOfIdentifiableMergerV","modules":[{"name":"ForkedMerge"}],"title":"ArrayOfIdentifiableMerger","role":"symbol","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}]},"kind":"symbol","abstract":[{"text":"Merges an array, ensuring that the result has elements with unqiue identifiers.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Equatable","preciseIdentifier":"s:SQ"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Identifiable","preciseIdentifier":"s:s12IdentifiableP"}],"languages":["swift"]}],"kind":"declarations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge\/arrayofidentifiablemerger"]}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"title":"Conforms To","kind":"relationships"}],"sections":[],"topicSections":[{"anchor":"Initializers","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()"],"title":"Initializers","generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ForkedMerge\/documentation\/ForkedMerge"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/merge(_:withSubordinate:commonAncestor:)-1pmm2":{"abstract":[{"type":"text","text":"This function merges two arrays of elements that are identifiable and mergeable."},{"text":" ","type":"text"},{"text":"The result is different to merging where the elements are not mergeable.","type":"text"},{"type":"text","text":" "},{"text":"This call will recurse the merge.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"kind":"text","text":"(["},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"], "},{"text":"withSubordinate","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Element"},{"text":"], ","kind":"text"},{"text":"commonAncestor","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"title":"merge(_:withSubordinate:commonAncestor:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Equatable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/merge(_:withSubordinate:commonAncestor:)-1pmm2","type":"topic","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merge(_:withsubordinate:commonancestor:)-1pmm2"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/init()":{"title":"init()","abstract":[],"type":"topic","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/init()","kind":"symbol","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","kind":"symbol","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"title":"ArrayOfIdentifiableMerger","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger/Merger-Implementations":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger\/Merger-Implementations","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger\/merger-implementations","title":"Merger Implementations","type":"topic","role":"collectionGroup","abstract":[],"kind":"article"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"kind":"symbol","url":"\/documentation\/forkedmerge\/merger","title":"Merger","abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"type":"text","text":" "},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"diffing against a common ancestor."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Merger","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"}}}