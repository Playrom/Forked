{"topicSections":[{"generated":true,"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"]},{"anchor":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"],"title":"Structures","generated":true},{"title":"Enumerations","anchor":"Enumerations","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"]}],"variants":[{"paths":["\/documentation\/forkedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"module","role":"collection","title":"ForkedMerge","modules":[{"name":"ForkedMerge"}],"roleHeading":"Framework","externalID":"ForkedMerge"},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"sections":[],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"text":" ","type":"text"},{"type":"text","text":"Uses a CRDT algorithm."}],"title":"MergeableDictionary","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeabledictionary","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableDictionary"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableDictionary"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"kind":"symbol","navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Observed-Remove Set. Can add and remove like a normal set."},{"type":"text","text":" "},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"role":"symbol","url":"\/documentation\/forkedmerge\/mergeableset","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableSet"}],"title":"MergeableSet"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"abstract":[],"role":"symbol","url":"\/documentation\/forkedmerge\/textmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TextMerger"}],"title":"TextMerger"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","role":"symbol","kind":"symbol","title":"Merger","url":"\/documentation\/forkedmerge\/merger","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Merger","kind":"identifier"}],"abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"type":"text","text":" "},{"text":"The values are typically of a simple type. The algorithm could be anything, from a","type":"text"},{"text":" ","type":"text"},{"text":"simple most recent edit wins, to more advanced CRDT based approaches that use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"url":"\/documentation\/forkedmerge\/arraymerger","navigatorTitle":[{"text":"ArrayMerger","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayMerger"}],"kind":"symbol","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"title":"ArrayMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","type":"topic","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"navigatorTitle":[{"text":"PropertyBacking","kind":"identifier"}],"title":"PropertyBacking","type":"topic","abstract":[{"text":"The storage used for a property. These storage types have built in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"systems for merging. They maintain the information they need (eg history)"},{"text":" ","type":"text"},{"text":"to properly merge even if with copies that have conflicting changes.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","kind":"symbol","url":"\/documentation\/forkedmerge\/propertybacking","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"kind":"symbol","title":"DictionaryMerger","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DictionaryMerger","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/dictionarymerger","type":"topic","navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"type":"text","text":" "},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"text":" ","type":"text"},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"title":"MergeableArray","type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"kind":"symbol","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"kind":"symbol","title":"MergeableValue","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"text":" ","type":"text"},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"type":"text","text":" "},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"text":" ","type":"text"},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablevalue","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableValue"}],"navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","type":"topic","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"title":"ForkedMerge","type":"topic","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","url":"\/documentation\/forkedmerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SetMerger"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"navigatorTitle":[{"text":"SetMerger","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/forkedmerge\/setmerger","title":"SetMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"title":"PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PropertyMerge","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/propertymerge","navigatorTitle":[{"kind":"identifier","text":"PropertyMerge"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","role":"symbol","abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"type":"text","text":" "},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"code":"Mergeable","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"type":"codeVoice","code":"Merger"},{"type":"text","text":"."}],"type":"topic"}}}