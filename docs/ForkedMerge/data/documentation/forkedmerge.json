{"hierarchy":{"paths":[[]]},"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state."}]}],"kind":"content"}],"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"generated":true,"anchor":"Protocols","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"title":"Protocols"},{"anchor":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"],"title":"Structures","generated":true},{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"title":"Enumerations","generated":true,"anchor":"Enumerations"}],"metadata":{"symbolKind":"module","roleHeading":"Framework","modules":[{"name":"ForkedMerge"}],"externalID":"ForkedMerge","role":"collection","title":"ForkedMerge"},"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","role":"symbol","kind":"symbol","url":"\/documentation\/forkedmerge\/mergeabledictionary","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MergeableDictionary","kind":"identifier"}],"title":"MergeableDictionary","abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"text":" ","type":"text"},{"type":"text","text":"Uses a CRDT algorithm."}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"title":"MergeableSet","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Observed-Remove Set. Can add and remove like a normal set."},{"type":"text","text":" "},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableSet"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","navigatorTitle":[{"kind":"identifier","text":"MergeableSet"}],"url":"\/documentation\/forkedmerge\/mergeableset","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"kind":"symbol","url":"\/documentation\/forkedmerge\/textmerger","type":"topic","title":"TextMerger","abstract":[],"navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TextMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","url":"\/documentation\/forkedmerge\/arraymerger","kind":"symbol","role":"symbol","title":"ArrayMerger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayMerger","kind":"identifier"}],"navigatorTitle":[{"text":"ArrayMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"text":" ","type":"text"},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"text":"devices at the same time, after the merge, you will have the same word twice — the value is","type":"text"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"text":" ","type":"text"},{"text":"you should dedupe after every merge.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableArray"}],"url":"\/documentation\/forkedmerge\/mergeablearray","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray"},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"type":"topic","url":"\/documentation\/forkedmerge\/setmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"title":"SetMerger","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SetMerger","kind":"identifier"}],"navigatorTitle":[{"text":"SetMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"url":"\/documentation\/forkedmerge\/propertymerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","kind":"symbol","abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"type":"text","text":" "},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"type":"codeVoice","code":"Merger"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PropertyMerge"}],"title":"PropertyMerge"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Merger"}],"role":"symbol","url":"\/documentation\/forkedmerge\/merger","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Merger","kind":"identifier"}],"kind":"symbol","title":"Merger","abstract":[{"text":"A merger is a type that applies a merging algorithm to merge two values together.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"type":"text","text":" "},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"text":" ","type":"text"},{"type":"text","text":"diffing against a common ancestor."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","kind":"symbol","url":"\/documentation\/forkedmerge\/propertybacking","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}],"abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"text":" ","type":"text"},{"type":"text","text":"systems for merging. They maintain the information they need (eg history)"},{"type":"text","text":" "},{"type":"text","text":"to properly merge even if with copies that have conflicting changes."}],"title":"PropertyBacking","role":"symbol","navigatorTitle":[{"text":"PropertyBacking","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"title":"ArrayOfIdentifiableMerger","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"kind":"symbol","title":"DictionaryMerger","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DictionaryMerger","kind":"identifier"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"type":"topic","url":"\/documentation\/forkedmerge\/dictionarymerger"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","url":"\/documentation\/forkedmerge","type":"topic","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","title":"ForkedMerge","role":"collection"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableValue","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","title":"MergeableValue","url":"\/documentation\/forkedmerge\/mergeablevalue","abstract":[{"text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it.","type":"text"},{"text":" ","type":"text"},{"text":"This allows the type to automatically merge simply by choosing the value that was written later.","type":"text"},{"type":"text","text":" "},{"text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely.","type":"text"},{"text":" ","type":"text"},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"kind":"symbol"}}}