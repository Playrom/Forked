{"sections":[],"kind":"symbol","metadata":{"role":"collection","title":"ForkedMerge","roleHeading":"Framework","externalID":"ForkedMerge","symbolKind":"module","modules":[{"name":"ForkedMerge"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"variants":[{"paths":["\/documentation\/forkedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"generated":true,"anchor":"Protocols","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"title":"Protocols"},{"generated":true,"title":"Structures","anchor":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"title":"Functions","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-2t4q4","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx"],"generated":true,"anchor":"Functions"},{"title":"Enumerations","anchor":"Enumerations","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"kind":"symbol","title":"MergeableSet","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableSet","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Observed-Remove Set. Can add and remove like a normal set.","type":"text"},{"text":" ","type":"text"},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Pregui√ßa, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"type":"topic","url":"\/documentation\/forkedmerge\/mergeableset"},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SetMerger"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SetMerger"}],"abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"url":"\/documentation\/forkedmerge\/setmerger","title":"SetMerger","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy":{"url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-18fwy","type":"topic","abstract":[],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"text":"withMergerType","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"subordinate"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"commonAncestor"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"}],"title":"merge(withMergerType:dominant:subordinate:commonAncestor:)"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"navigatorTitle":[{"kind":"identifier","text":"MergeableDictionary"}],"url":"\/documentation\/forkedmerge\/mergeabledictionary","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableDictionary","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","type":"topic","title":"MergeableDictionary","abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"type":"text","text":" "},{"type":"text","text":"Uses a CRDT algorithm."}]},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-2t4q4":{"title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","kind":"symbol","role":"symbol","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"merge","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"M"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"withMergerType"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"subordinate","kind":"externalParam"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"text":"?","kind":"text"}],"type":"topic","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-2t4q4","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-2t4q4"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"url":"\/documentation\/forkedmerge\/propertymerge","type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","role":"symbol","abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"text":" ","type":"text"},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"code":"Merger","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PropertyMerge","kind":"identifier"}],"kind":"symbol","title":"PropertyMerge","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"type":"topic","abstract":[{"type":"text","text":"A merger is a type that applies a merging algorithm to merge two values together."},{"type":"text","text":" "},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"type":"text","text":" "},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"type":"text","text":" "},{"text":"diffing against a common ancestor.","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Merger"}],"url":"\/documentation\/forkedmerge\/merger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","navigatorTitle":[{"text":"Merger","kind":"identifier"}],"title":"Merger"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableValue"}],"title":"MergeableValue","role":"symbol","abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"text":" ","type":"text"},{"text":"This allows the type to automatically merge simply by choosing the value that was written later.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"type":"text","text":" "},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Pregui√ßa, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/mergeablevalue"},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DictionaryMerger","kind":"identifier"}],"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"role":"symbol","kind":"symbol","title":"DictionaryMerger","navigatorTitle":[{"kind":"identifier","text":"DictionaryMerger"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","type":"topic","url":"\/documentation\/forkedmerge\/dictionarymerger"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"type":"topic","abstract":[{"text":"Merges an array, ensuring that the result has elements with unqiue identifiers.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","navigatorTitle":[{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"title":"ArrayOfIdentifiableMerger"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"title":"MergeableArray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"text":"may be present. Think about merging changes to text: If the user types the same word on two","type":"text"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice ‚Äî the value is"},{"type":"text","text":" "},{"type":"text","text":"inserted twice, and there is no check that the value already exists in the array."},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"type":"text","text":" "},{"text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"type":"text","text":" "},{"text":"of conflicting versions. You could use this as the basis of a basic collaborative editor.","type":"text"},{"type":"text","text":" "},{"text":"Note that it contains a complete history of changes, including deletions, so it grows over time.","type":"text"},{"type":"text","text":" "},{"text":"If you need a more compact representation, consider using a merger instead.","type":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeablearray","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableArray"}],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"kind":"text","text":"<"},{"text":"M","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"withMergerType","kind":"externalParam"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"dominant"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"subordinate"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"commonAncestor"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-8vogx","abstract":[]},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"type":"topic","abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TextMerger","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/textmerger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","navigatorTitle":[{"kind":"identifier","text":"TextMerger"}],"title":"TextMerger"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ArrayMerger"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayMerger"}],"abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"url":"\/documentation\/forkedmerge\/arraymerger","title":"ArrayMerger","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"role":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/propertybacking","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","navigatorTitle":[{"text":"PropertyBacking","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}],"title":"PropertyBacking","abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"text":" ","type":"text"},{"type":"text","text":"systems for merging. They maintain the information they need (eg history)"},{"text":" ","type":"text"},{"text":"to properly merge even if with copies that have conflicting changes.","type":"text"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"title":"ForkedMerge","kind":"symbol","role":"collection","url":"\/documentation\/forkedmerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","type":"topic"}}}