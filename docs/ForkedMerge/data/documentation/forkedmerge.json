{"metadata":{"externalID":"ForkedMerge","title":"ForkedMerge","modules":[{"name":"ForkedMerge"}],"role":"collection","symbolKind":"module","roleHeading":"Framework"},"topicSections":[{"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"generated":true,"title":"Protocols","anchor":"Protocols"},{"generated":true,"anchor":"Structures","title":"Structures","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"title":"Enumerations","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"anchor":"Enumerations","generated":true}],"variants":[{"paths":["\/documentation\/forkedmerge"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"sections":[],"hierarchy":{"paths":[[]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"kind":"symbol","references":{"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"navigatorTitle":[{"text":"MergeableDictionary","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableDictionary"}],"abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"type":"text","text":" "},{"text":"Uses a CRDT algorithm.","type":"text"}],"type":"topic","kind":"symbol","title":"MergeableDictionary","url":"\/documentation\/forkedmerge\/mergeabledictionary"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","title":"MergeableArray","role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"text":"MergeableArray","kind":"identifier"}],"abstract":[{"type":"text","text":"Represents a CRDT for an array of values, such as characters in a string."},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"type":"text","text":" "},{"type":"text","text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element"},{"text":" ","type":"text"},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"type":"text","text":" "},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice — the value is"},{"text":" ","type":"text"},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type is typically useful for strings in collaborative environments, and less useful for"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"text":"you should dedupe after every merge.","type":"text"},{"type":"text","text":" "},{"text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"text":" ","type":"text"},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"title":"ArrayOfIdentifiableMerger","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ArrayOfIdentifiableMerger","kind":"identifier"}],"abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"kind":"symbol","url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableSet"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","url":"\/documentation\/forkedmerge\/mergeableset","title":"MergeableSet","abstract":[{"text":"Observed-Remove Set. Can add and remove like a normal set.","type":"text"},{"text":" ","type":"text"},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge","role":"collection","abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"url":"\/documentation\/forkedmerge","title":"ForkedMerge","kind":"symbol","type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"role":"symbol","title":"MergeableValue","navigatorTitle":[{"kind":"identifier","text":"MergeableValue"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","url":"\/documentation\/forkedmerge\/mergeablevalue","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableValue"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"type":"text","text":" "},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"type":"text","text":" "},{"text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Preguiça, C Baquero, M Zawirski - 2011 - hal.inria.fr"}]},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"kind":"symbol","url":"\/documentation\/forkedmerge\/dictionarymerger","title":"DictionaryMerger","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DictionaryMerger"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"role":"symbol","title":"ArrayMerger","navigatorTitle":[{"text":"ArrayMerger","kind":"identifier"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","url":"\/documentation\/forkedmerge\/arraymerger","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayMerger"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}]},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"navigatorTitle":[{"kind":"identifier","text":"TextMerger"}],"type":"topic","role":"symbol","title":"TextMerger","url":"\/documentation\/forkedmerge\/textmerger","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TextMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","type":"topic","abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"kind":"symbol","role":"symbol","title":"SetMerger","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SetMerger","kind":"identifier"}],"navigatorTitle":[{"text":"SetMerger","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/setmerger"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"role":"symbol","title":"Merger","navigatorTitle":[{"kind":"identifier","text":"Merger"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","url":"\/documentation\/forkedmerge\/merger","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Merger"}],"type":"topic","kind":"symbol","abstract":[{"text":"A merger is a type that applies a merging algorithm to merge two values together.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The values are typically of a simple type. The algorithm could be anything, from a"},{"text":" ","type":"text"},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"type":"text","text":" "},{"type":"text","text":"diffing against a common ancestor."}]},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"title":"PropertyMerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}],"abstract":[{"type":"text","text":"The algorithm used to merge changes to a property."},{"type":"text","text":" "},{"text":"Some properties know how to merge themselves; they conform to ","type":"text"},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Other types have no intrinsic merge, but can be merged by a ","type":"text"},{"code":"Merger","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/propertymerge","kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","url":"\/documentation\/forkedmerge\/propertybacking","role":"symbol","abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"type":"text","text":" "},{"text":"systems for merging. They maintain the information they need (eg history)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to properly merge even if with copies that have conflicting changes."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyBacking"}],"navigatorTitle":[{"kind":"identifier","text":"PropertyBacking"}],"type":"topic","title":"PropertyBacking","kind":"symbol"}}}