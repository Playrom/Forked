{"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"ForkedMerge","externalID":"ForkedMerge","modules":[{"name":"ForkedMerge"}],"symbolKind":"module","role":"collection","roleHeading":"Framework"},"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"ForkedMerge provides the core functionality for merging divergent data structures back into a consistent state.","type":"text"}],"type":"paragraph"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"topicSections":[{"title":"Protocols","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger"],"anchor":"Protocols"},{"anchor":"Structures","title":"Structures","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger"]},{"title":"Functions","identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-2t4q4","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx"],"anchor":"Functions","generated":true},{"anchor":"Enumerations","generated":true,"identifiers":["doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge"],"title":"Enumerations"}],"abstract":[{"type":"text","text":"Handles merging of forked data structures."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forkedmerge"]}],"references":{"doc://ForkedMerge/documentation/ForkedMerge/PropertyBacking":{"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyBacking","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The storage used for a property. These storage types have built in"},{"text":" ","type":"text"},{"text":"systems for merging. They maintain the information they need (eg history)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to properly merge even if with copies that have conflicting changes."}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PropertyBacking","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/propertybacking","navigatorTitle":[{"kind":"identifier","text":"PropertyBacking"}],"title":"PropertyBacking"},"doc://ForkedMerge/documentation/ForkedMerge/TextMerger":{"url":"\/documentation\/forkedmerge\/textmerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/TextMerger","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"TextMerger","kind":"identifier"}],"title":"TextMerger","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TextMerger","kind":"identifier"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableDictionary":{"type":"topic","title":"MergeableDictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeableDictionary"}],"navigatorTitle":[{"kind":"identifier","text":"MergeableDictionary"}],"kind":"symbol","url":"\/documentation\/forkedmerge\/mergeabledictionary","role":"symbol","abstract":[{"type":"text","text":"Represents a mergable type for a dictionary of values."},{"type":"text","text":" "},{"type":"text","text":"Uses a CRDT algorithm."}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableDictionary"},"doc://ForkedMerge/documentation/ForkedMerge/Merger":{"url":"\/documentation\/forkedmerge\/merger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/Merger","kind":"symbol","abstract":[{"text":"A merger is a type that applies a merging algorithm to merge two values together.","type":"text"},{"text":" ","type":"text"},{"text":"The values are typically of a simple type. The algorithm could be anything, from a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simple most recent edit wins, to more advanced CRDT based approaches that use"},{"text":" ","type":"text"},{"text":"diffing against a common ancestor.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Merger"}],"title":"Merger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Merger","kind":"identifier"}],"type":"topic"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayOfIdentifiableMerger":{"abstract":[{"type":"text","text":"Merges an array, ensuring that the result has elements with unqiue identifiers."}],"url":"\/documentation\/forkedmerge\/arrayofidentifiablemerger","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"navigatorTitle":[{"kind":"identifier","text":"ArrayOfIdentifiableMerger"}],"type":"topic","title":"ArrayOfIdentifiableMerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayOfIdentifiableMerger"},"doc://ForkedMerge/documentation/ForkedMerge/DictionaryMerger":{"navigatorTitle":[{"text":"DictionaryMerger","kind":"identifier"}],"title":"DictionaryMerger","role":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/dictionarymerger","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/DictionaryMerger","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DictionaryMerger"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableValue":{"navigatorTitle":[{"text":"MergeableValue","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MergeableValue"}],"identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableValue","role":"symbol","url":"\/documentation\/forkedmerge\/mergeablevalue","title":"MergeableValue","abstract":[{"type":"text","text":"Implements Last-Writer-Wins Register. Whenever the contained value is updated, it stores a timestamp with it."},{"type":"text","text":" "},{"type":"text","text":"This allows the type to automatically merge simply by choosing the value that was written later."},{"text":" ","type":"text"},{"type":"text","text":"Because there is a chance of timestamp collisions, a UUID is included to make collisions extremely unlikely."},{"text":" ","type":"text"},{"type":"text","text":"Based on Convergent and commutative replicated data types by M Shapiro, N Pregui√ßa, C Baquero, M Zawirski - 2011 - hal.inria.fr"}],"kind":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx":{"type":"topic","role":"symbol","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-8vogx","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"merge","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"kind":"externalParam","text":"withMergerType"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"dominant","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"subordinate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"commonAncestor"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":"?) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"kind":"text","text":"."},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[],"url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-8vogx"},"doc://ForkedMerge/documentation/ForkedMerge/ArrayMerger":{"role":"symbol","url":"\/documentation\/forkedmerge\/arraymerger","type":"topic","kind":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/ArrayMerger","title":"ArrayMerger","abstract":[{"type":"text","text":"Merges an array by treating the contained elements as values."}],"navigatorTitle":[{"text":"ArrayMerger","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayMerger","kind":"identifier"}]},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-2t4q4":{"title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","role":"symbol","type":"topic","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-2t4q4","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-2t4q4","abstract":[],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"M"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"withMergerType"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"dominant"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"subordinate"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"text":"?, ","kind":"text"},{"text":"commonAncestor","kind":"externalParam"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","text":"T"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}]},"doc://ForkedMerge/documentation/ForkedMerge/MergeableSet":{"title":"MergeableSet","abstract":[{"type":"text","text":"Observed-Remove Set. Can add and remove like a normal set."},{"type":"text","text":" "},{"text":"Based on Convergent and commutative replicated data types by M Shapiro, N Pregui√ßa, C Baquero, M Zawirski - 2011 - hal.inria.fr","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"MergeableSet","kind":"identifier"}],"url":"\/documentation\/forkedmerge\/mergeableset","navigatorTitle":[{"text":"MergeableSet","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableSet"},"doc://ForkedMerge/documentation/ForkedMerge/PropertyMerge":{"kind":"symbol","abstract":[{"text":"The algorithm used to merge changes to a property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Some properties know how to merge themselves; they conform to "},{"type":"codeVoice","code":"Mergeable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Other types have no intrinsic merge, but can be merged by a "},{"code":"Merger","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/forkedmerge\/propertymerge","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/PropertyMerge","role":"symbol","type":"topic","navigatorTitle":[{"text":"PropertyMerge","kind":"identifier"}],"title":"PropertyMerge","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PropertyMerge"}]},"doc://ForkedMerge/documentation/ForkedMerge/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"merge","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"M"},{"kind":"text","text":">("},{"text":"withMergerType","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"dominant"},{"text":": ","kind":"text"},{"text":"M","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"subordinate","kind":"externalParam"},{"kind":"text","text":": "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":", "},{"text":"commonAncestor","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"M"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:11ForkedMerge6MergerP1TQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"M","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11ForkedMerge6MergerP1TQa","kind":"typeIdentifier","text":"T"}],"abstract":[],"type":"topic","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/merge(withMergerType:dominant:subordinate:commonAncestor:)-18fwy","url":"\/documentation\/forkedmerge\/merge(withmergertype:dominant:subordinate:commonancestor:)-18fwy","title":"merge(withMergerType:dominant:subordinate:commonAncestor:)","role":"symbol"},"doc://ForkedMerge/documentation/ForkedMerge":{"kind":"symbol","abstract":[{"text":"Handles merging of forked data structures.","type":"text"}],"type":"topic","url":"\/documentation\/forkedmerge","title":"ForkedMerge","role":"collection","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge"},"doc://ForkedMerge/documentation/ForkedMerge/SetMerger":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SetMerger"}],"url":"\/documentation\/forkedmerge\/setmerger","abstract":[{"text":"Merges an array by treating the contained elements as values.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/SetMerger","navigatorTitle":[{"kind":"identifier","text":"SetMerger"}],"kind":"symbol","title":"SetMerger"},"doc://ForkedMerge/documentation/ForkedMerge/MergeableArray":{"type":"topic","title":"MergeableArray","url":"\/documentation\/forkedmerge\/mergeablearray","abstract":[{"text":"Represents a CRDT for an array of values, such as characters in a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stress here is on values, because this array does not guarantee that uniqueness of"},{"text":" ","type":"text"},{"text":"elements is preserverd. After a merge, it is possible that multiple copies of the same element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may be present. Think about merging changes to text: If the user types the same word on two"},{"text":" ","type":"text"},{"type":"text","text":"devices at the same time, after the merge, you will have the same word twice ‚Äî the value is"},{"type":"text","text":" "},{"text":"inserted twice, and there is no check that the value already exists in the array.","type":"text"},{"type":"text","text":" "},{"text":"This type is typically useful for strings in collaborative environments, and less useful for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storing identifiable objects, since you can end up with duplicates. If you use it for this purpose,"},{"type":"text","text":" "},{"type":"text","text":"you should dedupe after every merge."},{"type":"text","text":" "},{"type":"text","text":"This type represesnts the array internally as a tree, which generally leads to more intuitive merging"},{"text":" ","type":"text"},{"type":"text","text":"of conflicting versions. You could use this as the basis of a basic collaborative editor."},{"type":"text","text":" "},{"type":"text","text":"Note that it contains a complete history of changes, including deletions, so it grows over time."},{"text":" ","type":"text"},{"type":"text","text":"If you need a more compact representation, consider using a merger instead."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeableArray","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ForkedMerge\/documentation\/ForkedMerge\/MergeableArray","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MergeableArray"}]}}}