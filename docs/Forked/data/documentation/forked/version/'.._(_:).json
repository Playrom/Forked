{"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"roleHeading":"Operator","modules":[{"relatedModules":["Swift"],"name":"Forked"}],"externalID":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","extendedModule":"Swift","role":"symbol","title":"..<(_:)","symbolKind":"op"},"abstract":[{"text":"Returns a partial range up to, but not including, its upper bound.","type":"text"}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"maximum","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The upper bound for the range."}]}]}]},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Use the prefix half-open range operator (prefix "},{"code":"..<","type":"codeVoice"},{"text":") to create a","type":"text"},{"type":"text","text":" "},{"text":"partial range of any type that conforms to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This example creates a "},{"type":"codeVoice","code":"PartialRangeUpTo<Double>"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"type":"text","text":"any value less than "},{"type":"codeVoice","code":"5.0"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let upToFive = ..<5.0","","upToFive.contains(3.14)       \/\/ true","upToFive.contains(6.28)       \/\/ false","upToFive.contains(5.0)        \/\/ false"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"text":" ","type":"text"},{"type":"text","text":"represent the range from the start of the collection up to, but not"},{"text":" ","type":"text"},{"text":"including, the partial range’s upper bound.","type":"text"}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[..<3])","\/\/ Prints \"[10, 20, 30]\""],"type":"codeListing","syntax":null},{"name":"Precondition","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"maximum"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}]}],"type":"aside","style":"note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/forked\/version\/'.._(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)"},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"references":{"doc://Forked/documentation/Forked":{"role":"collection","url":"\/documentation\/forked","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"title":"Forked","type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked","kind":"symbol"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"abstract":[],"url":"\/documentation\/forked\/version\/comparable-implementations","role":"collectionGroup","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","kind":"article","type":"topic","title":"Comparable Implementations"},"doc://Forked/documentation/Forked/Version/.._(_:)":{"role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","url":"\/documentation\/forked\/version\/'.._(_:)","title":"..<(_:)","kind":"symbol","type":"topic","abstract":[{"text":"Returns a partial range up to, but not including, its upper bound.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"PartialRangeUpTo","preciseIdentifier":"s:s16PartialRangeUpToV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://Forked/documentation/Forked/Version":{"url":"\/documentation\/forked\/version","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","role":"symbol","type":"topic","title":"Version","abstract":[{"type":"text","text":"Used to chronologically order file versions. It is a standard lamport count."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Version"}],"kind":"symbol","navigatorTitle":[{"text":"Version","kind":"identifier"}]}}}