{"metadata":{"externalID":"s:SLsE3zzlopys16PartialRangeUpToVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","symbolKind":"op","modules":[{"name":"Forked","relatedModules":["Swift"]}],"role":"symbol","title":"..<(_:)","extendedModule":"Swift","roleHeading":"Operator","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"..<","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"PartialRangeUpTo","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeUpToV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"..<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"internalParam","text":"maximum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"platforms":["macOS"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The upper bound for the range."}]}],"name":"maximum"}],"kind":"parameters"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the prefix half-open range operator (prefix "},{"type":"codeVoice","code":"..<"},{"text":") to create a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"partial range of any type that conforms to the "},{"code":"Comparable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This example creates a "},{"type":"codeVoice","code":"PartialRangeUpTo<Double>"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"type":"text","text":"any value less than "},{"type":"codeVoice","code":"5.0"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["let upToFive = ..<5.0","","upToFive.contains(3.14)       \/\/ true","upToFive.contains(6.28)       \/\/ false","upToFive.contains(5.0)        \/\/ false"]},{"inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"text":" ","type":"text"},{"text":"represent the range from the start of the collection up to, but not","type":"text"},{"text":" ","type":"text"},{"text":"including, the partial range’s upper bound.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[..<3])","\/\/ Prints \"[10, 20, 30]\""]},{"style":"note","name":"Precondition","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"maximum"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}],"type":"aside"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/forked\/version\/'.._(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns a partial range up to, but not including, its upper bound."}],"references":{"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"kind":"article","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","type":"topic"},"doc://Forked/documentation/Forked/Version/.._(_:)":{"url":"\/documentation\/forked\/version\/'.._(_:)","role":"symbol","abstract":[{"text":"Returns a partial range up to, but not including, its upper bound.","type":"text"}],"title":"..<(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s16PartialRangeUpToV","text":"PartialRangeUpTo","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","kind":"symbol","type":"topic"},"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","role":"collection","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked","type":"topic","kind":"symbol","title":"Forked"},"doc://Forked/documentation/Forked/Version":{"url":"\/documentation\/forked\/version","type":"topic","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Version","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","title":"Version","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Version","kind":"identifier"}]}}}