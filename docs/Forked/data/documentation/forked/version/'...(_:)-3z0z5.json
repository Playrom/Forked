{"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"variants":[{"paths":["\/documentation\/forked\/version\/'...(_:)-3z0z5"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","abstract":[{"text":"Returns a partial range extending upward from a lower bound.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"minimum","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeFromV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"minimum","content":[{"type":"paragraph","inlineContent":[{"text":"The lower bound for the range.","type":"text"}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Use the postfix range operator (postfix ","type":"text"},{"code":"...","type":"codeVoice"},{"text":") to create a partial range","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of any type that conforms to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol. This example","type":"text"},{"text":" ","type":"text"},{"text":"creates a ","type":"text"},{"type":"codeVoice","code":"PartialRangeFrom<Double>"},{"type":"text","text":" instance that includes any value"},{"text":" ","type":"text"},{"text":"greater than or equal to ","type":"text"},{"code":"5.0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let atLeastFive = 5.0...","","atLeastFive.contains(4.0)     \/\/ false","atLeastFive.contains(5.0)     \/\/ true","atLeastFive.contains(6.0)     \/\/ true"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"text":"represent the range from the partial range’s lower bound up to the end","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the collection."}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","\/\/ Prints \"[40, 50, 60, 70]\""],"type":"codeListing","syntax":null},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"minimum"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}],"type":"aside","name":"Precondition"}]}],"metadata":{"extendedModule":"Swift","symbolKind":"op","role":"symbol","title":"...(_:)","roleHeading":"Operator","modules":[{"name":"Forked","relatedModules":["Swift"]}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"externalID":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV"},"references":{"doc://Forked/documentation/Forked/Version":{"url":"\/documentation\/forked\/version","type":"topic","abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Version","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","title":"Version","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Version","kind":"identifier"}]},"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","role":"collection","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"identifier":"doc:\/\/Forked\/documentation\/Forked","type":"topic","kind":"symbol","title":"Forked"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"kind":"article","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","type":"topic"},"doc://Forked/documentation/Forked/Version/...(_:)-3z0z5":{"url":"\/documentation\/forked\/version\/'...(_:)-3z0z5","abstract":[{"text":"Returns a partial range extending upward from a lower bound.","type":"text"}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5","title":"...(_:)","role":"symbol","kind":"symbol"}}}