{"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","role":"symbol","roleHeading":"Operator","title":"...(_:)","modules":[{"relatedModules":["Swift"],"name":"Forked"}],"symbolKind":"op","extendedModule":"Swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"internalParam","text":"minimum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s16PartialRangeFromV","kind":"typeIdentifier","text":"PartialRangeFrom"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The lower bound for the range."}],"type":"paragraph"}],"name":"minimum"}]},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use the postfix range operator (postfix ","type":"text"},{"type":"codeVoice","code":"..."},{"text":") to create a partial range","type":"text"},{"type":"text","text":" "},{"text":"of any type that conforms to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol. This example"},{"text":" ","type":"text"},{"type":"text","text":"creates a "},{"code":"PartialRangeFrom<Double>","type":"codeVoice"},{"text":" instance that includes any value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"greater than or equal to "},{"type":"codeVoice","code":"5.0"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let atLeastFive = 5.0...","","atLeastFive.contains(4.0)     \/\/ false","atLeastFive.contains(5.0)     \/\/ true","atLeastFive.contains(6.0)     \/\/ true"],"syntax":null},{"inlineContent":[{"text":"You can use this type of partial range of a collection’s indices to","type":"text"},{"type":"text","text":" "},{"text":"represent the range from the partial range’s lower bound up to the end","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the collection."}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","\/\/ Prints \"[40, 50, 60, 70]\""],"syntax":null,"type":"codeListing"},{"content":[{"inlineContent":[{"text":"","type":"text"},{"code":"minimum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}],"type":"paragraph"}],"style":"note","name":"Precondition","type":"aside"}],"kind":"content"}],"abstract":[{"type":"text","text":"Returns a partial range extending upward from a lower bound."}],"variants":[{"paths":["\/documentation\/forked\/version\/'...(_:)-3z0z5"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"references":{"doc://Forked/documentation/Forked/Version/...(_:)-3z0z5":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s16PartialRangeFromV","text":"PartialRangeFrom"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Returns a partial range extending upward from a lower bound.","type":"text"}],"url":"\/documentation\/forked\/version\/'...(_:)-3z0z5","title":"...(_:)"},"doc://Forked/documentation/Forked":{"identifier":"doc:\/\/Forked\/documentation\/Forked","type":"topic","kind":"symbol","abstract":[{"text":"A framework for handling forked data structures and merge operations.","type":"text"}],"title":"Forked","role":"collection","url":"\/documentation\/forked"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","role":"collectionGroup"},"doc://Forked/documentation/Forked/Version":{"url":"\/documentation\/forked\/version","navigatorTitle":[{"text":"Version","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"Version","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Version","kind":"identifier"}],"abstract":[{"type":"text","text":"Used to chronologically order file versions. It is a standard lamport count."}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version"}}}