{"metadata":{"extendedModule":"Swift","role":"symbol","modules":[{"name":"Forked","relatedModules":["Swift"]}],"title":"...(_:)","roleHeading":"Operator","externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","symbolKind":"op","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV","text":"PartialRangeThrough"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/forked\/version\/'...(_:)-1nziq"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeThrough","kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"maximum","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The upper bound for the range."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use the prefix closed range operator (prefix ","type":"text"},{"type":"codeVoice","code":"..."},{"text":") to create a partial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"range of any type that conforms to the "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol. This"},{"type":"text","text":" "},{"type":"text","text":"example creates a "},{"type":"codeVoice","code":"PartialRangeThrough<Double>"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"text":"any value less than or equal to ","type":"text"},{"code":"5.0","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"text":" ","type":"text"},{"text":"represent the range from the start of the collection up to, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including, the partial range’s upper bound."}]},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""],"type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"code":"maximum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}],"type":"paragraph"}],"type":"aside","name":"Precondition"}]}],"references":{"doc://Forked/documentation/Forked/Version/...(_:)-1nziq":{"type":"topic","abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"role":"symbol","url":"\/documentation\/forked\/version\/'...(_:)-1nziq","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV","text":"PartialRangeThrough"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"...(_:)"},"doc://Forked/documentation/Forked":{"identifier":"doc:\/\/Forked\/documentation\/Forked","type":"topic","kind":"symbol","abstract":[{"text":"A framework for handling forked data structures and merge operations.","type":"text"}],"title":"Forked","role":"collection","url":"\/documentation\/forked"},"doc://Forked/documentation/Forked/Version":{"url":"\/documentation\/forked\/version","navigatorTitle":[{"text":"Version","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"Version","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Version","kind":"identifier"}],"abstract":[{"type":"text","text":"Used to chronologically order file versions. It is a standard lamport count."}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","url":"\/documentation\/forked\/version\/comparable-implementations","title":"Comparable Implementations","role":"collectionGroup"}}}