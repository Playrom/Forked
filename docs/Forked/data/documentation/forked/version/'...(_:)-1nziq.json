{"metadata":{"role":"symbol","roleHeading":"Operator","externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","symbolKind":"op","title":"...(_:)","modules":[{"name":"Forked","relatedModules":["Swift"]}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV","text":"PartialRangeThrough"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"extendedModule":"Swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"name":"maximum","content":[{"type":"paragraph","inlineContent":[{"text":"The upper bound for the range.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the prefix closed range operator (prefix "},{"type":"codeVoice","code":"..."},{"type":"text","text":") to create a partial"},{"type":"text","text":" "},{"type":"text","text":"range of any type that conforms to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol. This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"example creates a "},{"code":"PartialRangeThrough<Double>","type":"codeVoice"},{"type":"text","text":" instance that includes"},{"type":"text","text":" "},{"text":"any value less than or equal to ","type":"text"},{"code":"5.0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"text":" ","type":"text"},{"type":"text","text":"represent the range from the start of the collection up to, and"},{"type":"text","text":" "},{"text":"including, the partial range’s upper bound.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""]},{"style":"note","name":"Precondition","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"maximum","type":"codeVoice"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'...(_:)-1nziq"]}],"sections":[],"references":{"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","kind":"symbol","abstract":[{"type":"text","text":"A framework for handling shared data with confidence in Swift."}],"type":"topic","title":"Forked","role":"collection","identifier":"doc:\/\/Forked\/documentation\/Forked"},"doc://Forked/documentation/Forked/Version/...(_:)-1nziq":{"kind":"symbol","url":"\/documentation\/forked\/version\/'...(_:)-1nziq","title":"...(_:)","abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s19PartialRangeThroughV","text":"PartialRangeThrough","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","role":"symbol"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"type":"topic","abstract":[],"kind":"article","url":"\/documentation\/forked\/version\/comparable-implementations","role":"collectionGroup","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","title":"Comparable Implementations"},"doc://Forked/documentation/Forked/Version":{"title":"Version","type":"topic","abstract":[{"type":"text","text":"Used to chronologically order file versions. It is a standard lamport count."}],"kind":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","role":"symbol","navigatorTitle":[{"text":"Version","kind":"identifier"}],"url":"\/documentation\/forked\/version","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Version","kind":"identifier"}]}}}