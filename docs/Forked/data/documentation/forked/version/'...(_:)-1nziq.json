{"kind":"symbol","metadata":{"modules":[{"relatedModules":["Swift"],"name":"Forked"}],"roleHeading":"Operator","externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:6Forked7VersionV","title":"...(_:)","extendedModule":"Swift","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"PartialRangeThrough","kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"symbolKind":"op"},"sections":[],"abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"maximum","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The upper bound for the range."}]}],"name":"maximum"}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the prefix closed range operator (prefix "},{"type":"codeVoice","code":"..."},{"type":"text","text":") to create a partial"},{"type":"text","text":" "},{"text":"range of any type that conforms to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol. This"},{"text":" ","type":"text"},{"type":"text","text":"example creates a "},{"type":"codeVoice","code":"PartialRangeThrough<Double>"},{"text":" instance that includes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any value less than or equal to "},{"type":"codeVoice","code":"5.0"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"text":"represent the range from the start of the collection up to, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including, the partial range’s upper bound."}],"type":"paragraph"},{"type":"codeListing","code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""],"syntax":null},{"style":"note","name":"Precondition","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"maximum","type":"codeVoice"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/version\/'...(_:)-1nziq"]}],"identifier":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked","doc:\/\/Forked\/documentation\/Forked\/Version","doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations"]]},"references":{"doc://Forked/documentation/Forked/Version/...(_:)-1nziq":{"identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","abstract":[{"text":"Returns a partial range up to, and including, its upper bound.","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","title":"...(_:)","url":"\/documentation\/forked\/version\/'...(_:)-1nziq","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"..."},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"PartialRangeThrough","preciseIdentifier":"s:s19PartialRangeThroughV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"doc://Forked/documentation/Forked/Version":{"url":"\/documentation\/forked\/version","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Version"}],"abstract":[{"text":"Used to chronologically order file versions. It is a standard lamport count.","type":"text"}],"role":"symbol","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version","title":"Version","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Version"}],"type":"topic"},"doc://Forked/documentation/Forked/Version/Comparable-Implementations":{"role":"collectionGroup","title":"Comparable Implementations","identifier":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","type":"topic","url":"\/documentation\/forked\/version\/comparable-implementations","abstract":[],"kind":"article"},"doc://Forked/documentation/Forked":{"url":"\/documentation\/forked","identifier":"doc:\/\/Forked\/documentation\/Forked","role":"collection","abstract":[{"type":"text","text":"A framework for handling shared data with confidence in Swift."}],"title":"Forked","type":"topic","kind":"symbol"}}}