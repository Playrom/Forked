{"hierarchy":{"paths":[["doc:\/\/Forked\/documentation\/Forked"]]},"sections":[],"abstract":[{"text":"Learn how to use Forked to manage shared data in your Swift applications.","type":"text"}],"seeAlsoSections":[{"anchor":"Essentials","identifiers":["doc:\/\/Forked\/documentation\/Forked\/Fork","doc:\/\/Forked\/documentation\/Forked\/ForkedResource","doc:\/\/Forked\/documentation\/Forked\/Mergeable"],"title":"Essentials","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Forked provides a safe way to handle shared data by allowing you to create independent branches (forks) of your data that can be modified concurrently and merged later. This guide will walk you through the basic concepts using practical examples.","type":"text"}]},{"text":"Creating Your First Resource","level":2,"anchor":"Creating-Your-First-Resource","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The easiest way to get started is with "},{"identifier":"doc:\/\/Forked\/documentation\/Forked\/QuickFork","isActive":true,"type":"reference"},{"text":", which manages a single value in memory:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Forked","","\/\/ Create a QuickFork holding an integer","let counter = QuickFork<Int>(initialValue: 0)","","\/\/ Read the initial value from the main fork","let value = try counter.value(in: .main)! \/\/ Returns 0"]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"value(in:)"},{"text":" returns an optional because the value might not exist in a given fork. When you’re sure the value exists (like right after creation), you can force unwrap with ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":". In production code, you might want to handle the optional more safely."}]}],"style":"note","name":"Note"},{"anchor":"Working-with-Forks","level":2,"text":"Working with Forks","type":"heading"},{"level":3,"type":"heading","text":"Creating Named Forks","anchor":"Creating-Named-Forks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While every resource has a "},{"type":"codeVoice","code":".main"},{"type":"text","text":" fork, you’ll often want to create additional named forks. One convenient approach is to define your forks as static properties in an extension to "},{"type":"codeVoice","code":"Fork"},{"type":"text","text":":"}]},{"code":["extension Fork {","    static let ui = Fork(name: \"ui\")","    static let background = Fork(name: \"background\")","    static let network = Fork(name: \"network\")","}","","\/\/ Create a resource with multiple forks","let counter = QuickFork<Int>(","    initialValue: 0,","    forks: [.ui, .background, .network]",")","","\/\/ Using static properties makes the code more readable","try counter.update(.ui, with: 1)","try counter.mergeIntoMain(from: .ui)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also create forks directly if you prefer:"}],"type":"paragraph"},{"code":["let customFork = Fork(name: \"custom\")"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Updating Values","type":"heading","anchor":"Updating-Values"},{"inlineContent":[{"type":"text","text":"You can update values independently in different forks:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Update values directly","try counter.update(.ui, with: 1)","try counter.update(.main, with: 2)","","\/\/ Each fork maintains its own value","let uiValue = try counter.value(in: .ui)!      \/\/ Returns 1","let mainValue = try counter.value(in: .main)!     \/\/ Returns 2"]},{"level":3,"type":"heading","text":"Merging Changes","anchor":"Merging-Changes"},{"type":"paragraph","inlineContent":[{"text":"When you’re ready to reconcile changes between forks, you can merge them. All merges must go through the ","type":"text"},{"code":"main","type":"codeVoice"},{"text":" fork - you cannot merge directly between custom forks:","type":"text"}]},{"type":"codeListing","code":["\/\/ Merge the UI fork into main","try counter.mergeIntoMain(from: .ui)","","\/\/ To get changes from UI fork to background fork:","\/\/ 1. First merge UI into main (as above)","\/\/ 2. Then merge from main into background","try counter.mergeFromMain(into: .background)"],"syntax":"swift"},{"level":3,"text":"Merging Direction","anchor":"Merging-Direction","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Merging is directional - changes flow from the source fork to the destination fork. To fully synchronize two forks, you need to merge in both directions:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Merge changes from UI to main","try counter.mergeIntoMain(from: .ui)","","\/\/ Merge changes from main to UI","try counter.mergeFromMain(into: .ui)"]},{"inlineContent":[{"text":"For convenience, there’s a ","type":"text"},{"code":"syncMain(with:)","type":"codeVoice"},{"type":"text","text":" method that performs bidirectional merges between main and multiple forks:"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Synchronize main with UI and background forks","try counter.syncMain(with: [.ui, .background])"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Remember that syncing between custom forks still requires going through "},{"type":"codeVoice","code":"main"},{"text":". The sync method makes this easier by handling all the necessary merges in each direction.","type":"text"}],"type":"paragraph"},{"anchor":"Working-with-Complex-Types","text":"Working with Complex Types","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the examples above use simple "},{"type":"codeVoice","code":"Int"},{"text":" values, Forked really shines when working with complex types. Here’s an example using a custom type:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Counter: Mergeable {","    var count: Int = 0","    ","    \/\/ Define how instances should be merged","    func merged(withSubordinate other: Self, commonAncestor: Self) throws -> Self {","        \/\/ Add the changes from both forks","        let selfDelta = self.count - commonAncestor.count","        let otherDelta = other.count - commonAncestor.count","        return Counter(count: commonAncestor.count + selfDelta + otherDelta)","    }","}","","\/\/ Create a resource with our custom type","let counter = QuickFork<Counter>(","    initialValue: Counter(),","    forks: [.ui, .background]",")","","\/\/ Update values in different forks","var uiCounter = try counter.value(in: .ui)!","uiCounter.count += 1","try counter.update(.ui, with: uiCounter)","","var mainCounter = try counter.value(in: .main)!","mainCounter.count += 2","try counter.update(.main, with: mainCounter)","","\/\/ Merge the changes","try counter.mergeIntoMain(from: .ui)","","\/\/ Both increments are preserved","let result = try counter.value(in: .main)!.count \/\/ Returns 3"]},{"anchor":"Next-Steps","text":"Next Steps","level":2,"type":"heading"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Learn about different merging strategies in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Forked\/documentation\/Forked\/MergingStrategy"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Explore automatic model generation with ","type":"text"},{"type":"codeVoice","code":"ForkedModel"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add CloudKit sync with "},{"code":"ForkedCloudKit","type":"codeVoice"}]}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/forked\/gettingstarted"]}],"metadata":{"modules":[{"name":"Forked"}],"title":"Getting Started with Forked","role":"article","roleHeading":"Article"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/GettingStarted"},"references":{"doc://Forked/documentation/Forked/Mergeable":{"abstract":[],"title":"Mergeable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Mergeable","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","kind":"symbol","navigatorTitle":[{"text":"Mergeable","kind":"identifier"}],"url":"\/documentation\/forked\/mergeable"},"doc://Forked/documentation/Forked":{"kind":"symbol","abstract":[{"text":"A framework for handling shared data with confidence in Swift.","type":"text"}],"title":"Forked","type":"topic","role":"collection","identifier":"doc:\/\/Forked\/documentation\/Forked","url":"\/documentation\/forked"},"doc://Forked/documentation/Forked/MergingStrategy":{"kind":"article","role":"article","title":"Merging Strategies","url":"\/documentation\/forked\/mergingstrategy","abstract":[{"type":"text","text":"Learn about different strategies for merging forked data."}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/MergingStrategy","type":"topic"},"doc://Forked/documentation/Forked/Fork":{"navigatorTitle":[{"kind":"identifier","text":"Fork"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Fork"}],"url":"\/documentation\/forked\/fork","role":"symbol","type":"topic","title":"Fork","identifier":"doc:\/\/Forked\/documentation\/Forked\/Fork","kind":"symbol","abstract":[{"type":"text","text":"A  type representing a named fork."}]},"doc://Forked/documentation/Forked/QuickFork":{"url":"\/documentation\/forked\/quickfork","type":"topic","identifier":"doc:\/\/Forked\/documentation\/Forked\/QuickFork","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"QuickFork","kind":"identifier"}],"title":"QuickFork","kind":"symbol","navigatorTitle":[{"text":"QuickFork","kind":"identifier"}]},"doc://Forked/documentation/Forked/ForkedResource":{"abstract":[{"type":"text","text":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and"},{"type":"text","text":" "},{"type":"text","text":"provides a systematic approach for merging changes, with support for 3-way merging."}],"identifier":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForkedResource"}],"url":"\/documentation\/forked\/forkedresource","type":"topic","role":"symbol","title":"ForkedResource","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForkedResource","kind":"identifier"}]}}}