[{"title":"init(from:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/init(from:)"},"type":"topLevelPage"},"rawIndexableTextContent":" ","summary":"","headings":[],"kind":"symbol"},{"rawIndexableTextContent":"Whether the fork is protected from deletion. Only the main fork has this protection for now. ","title":"isProtected","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/isProtected","interfaceLanguage":"swift"}},"kind":"symbol","summary":"Whether the fork is protected from deletion. Only the main fork has this protection for now.","headings":[]},{"kind":"symbol","rawIndexableTextContent":"Create a new fork. Will throw if a fork with the same name already exists. ","summary":"Create a new fork. Will throw if a fork with the same name already exists.","headings":[],"title":"create(_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/create(_:)"}}},{"summary":"The version of the Forked API. Older versions are incapable or understanding or merging with the newer versions. (Newer versions should be capable of importing the older ones.)","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/forkedAPIVersion","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":"The version of the Forked API. Older versions are incapable or understanding or merging with the newer versions. (Newer versions should be capable of importing the older ones.) ","title":"forkedAPIVersion"},{"summary":"This is storage for the ForkedResource. It could be persisted on disk, or just kept in memory. This type does not understand any of the mechanisms of forking and merging. That is all handled by the ForkedResource, which also ensures correct multi-threading behavior. Classes conforming to this type simply have to setup a storage mechanism, and handle the requests, keeping commits assigned to forks.","rawIndexableTextContent":"This is storage for the ForkedResource. It could be persisted on disk, or just kept in memory. This type does not understand any of the mechanisms of forking and merging. That is all handled by the ForkedResource, which also ensures correct multi-threading behavior. Classes conforming to this type simply have to setup a storage mechanism, and handle the requests, keeping commits assigned to forks. ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository"},"type":"topLevelPage"},"title":"Repository","kind":"symbol","headings":[]},{"title":"resource","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/resource"},"type":"topLevelPage"},"kind":"symbol","summary":"","rawIndexableTextContent":" ","headings":[]},{"rawIndexableTextContent":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging. ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncMain(with:)-uing","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","summary":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging.","headings":[],"title":"syncMain(with:)"},{"headings":[],"title":"timestamp","kind":"symbol","rawIndexableTextContent":" ","summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/timestamp","interfaceLanguage":"swift"}}},{"summary":"Returns a Boolean value indicating whether two values are not equal.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/!=(_:_:)","interfaceLanguage":"swift"}},"headings":["Discussion"],"kind":"symbol","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","title":"!=(_:_:)"},{"title":"init(repository:)","kind":"symbol","summary":"Initialize the ForkedResource with a repository. If the repository is new, and has no main fork, one will be added with an initial commit.","headings":["Discussion"],"rawIndexableTextContent":"Initialize the ForkedResource with a repository. If the repository is new, and has no main fork, one will be added with an initial commit.  The repository to use for storing the forked resource data Discussion An error if creating the main fork or accessing repository data fails","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(repository:)","interfaceLanguage":"swift"}}},{"rawIndexableTextContent":"Creates a fork providing an initial commit to populate it with. Throws if the fork is already present. ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/create(_:withInitialCommit:)","interfaceLanguage":"swift"}},"title":"create(_:withInitialCommit:)","summary":"Creates a fork providing an initial commit to populate it with. Throws if the fork is already present.","headings":[]},{"summary":"Same as calling resource(of:).","headings":[],"rawIndexableTextContent":"Same as calling resource(of:). ","title":"value(in:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/value(in:)"},"type":"topLevelPage"},"kind":"symbol"},{"title":"delete(_:)","summary":"","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/delete(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":" "},{"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/==(_:_:)","interfaceLanguage":"swift"}},"summary":"","headings":[],"kind":"symbol","title":"==(_:_:)"},{"title":"Decodable Implementations","kind":"article","rawIndexableTextContent":"","summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/Decodable-Implementations","interfaceLanguage":"swift"}},"headings":[]},{"title":"init(from:)","kind":"symbol","headings":[],"rawIndexableTextContent":" ","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/init(from:)"},"type":"topLevelPage"}},{"rawIndexableTextContent":" ","summary":"","title":"hash(into:)","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/hash(into:)"}}},{"kind":"symbol","summary":"","rawIndexableTextContent":" ","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToAccessNonExistentVersion(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"Error.attemptToAccessNonExistentVersion(_:_:)"},{"summary":"Removes all content from all branches, resetting to the initial state. It does not remove the existing branches, but removes their content.","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/removeAllContent()"},"type":"topLevelPage"},"headings":[],"title":"removeAllContent()","rawIndexableTextContent":"Removes all content from all branches, resetting to the initial state. It does not remove the existing branches, but removes their content. "},{"title":"repository","headings":[],"rawIndexableTextContent":"The repository used to store data for the forked resource. The forked resource takes complete ownership of this. You should not use the repository from outside the ForkedResource object. Doing so may lead to threading errors or logic bugs. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/repository"}},"kind":"symbol","summary":"The repository used to store data for the forked resource. The forked resource takes complete ownership of this. You should not use the repository from outside the ForkedResource object. Doing so may lead to threading errors or logic bugs."},{"title":"...(_:)","headings":["Discussion"],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5"}},"rawIndexableTextContent":"Returns a partial range extending upward from a lower bound.  The lower bound for the range. Discussion Use the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.  minimum must compare equal to itself (i.e. cannot be NaN).","summary":"Returns a partial range extending upward from a lower bound."},{"summary":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main.","headings":[],"rawIndexableTextContent":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main. ","kind":"symbol","title":"mergeAllForks(into:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeAllForks(into:)-30zos"}}},{"summary":"","headings":[],"rawIndexableTextContent":" ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/count"},"type":"topLevelPage"},"kind":"symbol","title":"count"},{"headings":[],"rawIndexableTextContent":" ","title":"ChangeStream","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ChangeStream"}},"summary":""},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/create(_:withInitialCommit:)"}},"kind":"symbol","headings":[],"rawIndexableTextContent":" ","summary":"","title":"create(_:withInitialCommit:)"},{"headings":[],"title":"Error.unexpectedError(_:)","summary":"","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/unexpectedError(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":" "},{"headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"","rawIndexableTextContent":"","kind":"article","title":"Equatable Implementations"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToDeleteProtectedFork(_:)"}},"summary":"","headings":[],"title":"Error.attemptToDeleteProtectedFork(_:)","rawIndexableTextContent":" ","kind":"symbol"},{"headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/content(of:)"}},"summary":"Returns the current content of the fork","kind":"symbol","rawIndexableTextContent":"Returns the current content of the fork ","title":"content(of:)"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/none"}},"title":"CommitContent.none","headings":[],"rawIndexableTextContent":"The content is not present. Perhaps it has not been added yet, or it may have been removed. ","summary":"The content is not present. Perhaps it has not been added yet, or it may have been removed.","kind":"symbol"},{"title":"Error.attemptToDeleteAllDataFromMainFork","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToDeleteAllDataFromMainFork"}},"summary":"","rawIndexableTextContent":" "},{"headings":[],"summary":"","rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/persist()-6k6s6","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"persist()"},{"kind":"article","rawIndexableTextContent":"","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/Decodable-Implementations"}},"title":"Decodable Implementations","summary":""},{"title":"load()","kind":"symbol","headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/load()-xnd5"},"type":"topLevelPage"},"rawIndexableTextContent":"Loads repo from storage, if this is supported. Otherwise, does nothing. ","summary":"Loads repo from storage, if this is supported. Otherwise, does nothing."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional","interfaceLanguage":"swift"}},"summary":"","kind":"symbol","headings":[],"rawIndexableTextContent":" ","title":"Optional"},{"title":"Identifiable Implementations","rawIndexableTextContent":"","summary":"","kind":"article","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional\/Identifiable-Implementations"},"type":"topLevelPage"},"headings":[]},{"summary":"Delete an existing fork. Throws if it isn’t present.","rawIndexableTextContent":"Delete an existing fork. Throws if it isn’t present. ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/delete(_:)"}},"kind":"symbol","title":"delete(_:)"},{"title":"syncAllForks()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncAllForks()-88teh","interfaceLanguage":"swift"}},"summary":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks.","rawIndexableTextContent":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks. ","headings":[],"kind":"symbol"},{"headings":[],"rawIndexableTextContent":"Update the contents of a fork with a new resource value. Will create a commit, and return the Version. ","kind":"symbol","title":"update(_:with:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/update(_:with:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"Update the contents of a fork with a new resource value. Will create a commit, and return the Version."},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToAccessNonExistentFork(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"Error.attemptToAccessNonExistentFork(_:)","kind":"symbol","headings":[],"rawIndexableTextContent":" ","summary":""},{"kind":"symbol","title":"merged(withSubordinate:commonAncestor:)","summary":"","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional\/merged(withSubordinate:commonAncestor:)"}},"rawIndexableTextContent":" "},{"headings":[],"rawIndexableTextContent":"Remove a commit for a given version from the fork. If the version is not found, an error is thrown. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/removeCommit(at:from:)"}},"kind":"symbol","title":"removeCommit(at:from:)","summary":"Remove a commit for a given version from the fork. If the version is not found, an error is thrown."},{"title":"mergeIntoMain(from:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeIntoMain(from:)-9wpr4","interfaceLanguage":"swift"}},"headings":[],"kind":"symbol","summary":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of non-Mergeable resources.","rawIndexableTextContent":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of non-Mergeable resources. "},{"headings":[],"kind":"symbol","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncMain(with:)-18a6t","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging.","rawIndexableTextContent":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging. ","title":"syncMain(with:)"},{"title":"hasUnmergedCommitsForMain(in:)","summary":"Whether fork has commits not yet merged into main.","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/hasUnmergedCommitsForMain(in:)"}},"headings":[],"rawIndexableTextContent":"Whether fork has commits not yet merged into main. "},{"kind":"symbol","summary":"","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/store(_:in:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"store(_:in:)","headings":[],"rawIndexableTextContent":" "},{"headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/Equatable-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","kind":"article","title":"Equatable Implementations","rawIndexableTextContent":""},{"summary":"Whether a fork exists in the ForkedResource","kind":"symbol","rawIndexableTextContent":"Whether a fork exists in the ForkedResource ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/has(_:)"}},"title":"has(_:)"},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked","interfaceLanguage":"swift"}},"headings":["Overview","Key Concepts","Forks","Resources","Merging","Repositories"],"rawIndexableTextContent":"A framework for handling shared data with confidence in Swift. Overview Forked provides a comprehensive solution for managing concurrent data access and synchronization through a Git-inspired branching and merging system. Instead of using traditional concurrency primitives like locks or actors, Forked allows you to safely work with multiple copies of data and merge them systematically. Key Concepts Forks A fork represents a branch of your data that can be modified independently of other branches. Every ForkedResource has a main fork, and you can create additional named forks for different purposes like UI updates, background processing, or network synchronization. Resources A ForkedResource manages the state and history of your data across multiple forks. It tracks changes, maintains the common ancestor states needed for merging, and provides methods for updating and querying values in different forks. Merging When forks diverge and need to be reconciled, Forked provides sophisticated merging capabilities. The framework supports both automatic merging for simple types and custom merge strategies for complex data structures. Repositories A ForkedResource does not actually store any data: it just contains the logic for managing forks and resources. Repositories provide the storage for a ForkedResource, whether it be in memory, on disk, in a database, or in the cloud.","title":"Forked","summary":"A framework for handling shared data with confidence in Swift."},{"rawIndexableTextContent":"The forks in the repository, including .main, in no particular order. ","kind":"symbol","summary":"The forks in the repository, including .main, in no particular order.","headings":[],"title":"forks","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/forks","interfaceLanguage":"swift"}}},{"title":"Equatable Implementations","headings":[],"rawIndexableTextContent":"","summary":"","kind":"article","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/Equatable-Implementations"}}},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/delete(_:)","interfaceLanguage":"swift"}},"kind":"symbol","headings":[],"summary":"Delete an existing fork. If the fork does not exist, it will throw.","rawIndexableTextContent":"Delete an existing fork. If the fork does not exist, it will throw. ","title":"delete(_:)"},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToReplaceExistingVersion(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"kind":"symbol","summary":"","title":"Error.attemptToReplaceExistingVersion(_:_:)","rawIndexableTextContent":" "},{"headings":[],"rawIndexableTextContent":"","title":"Comparable Implementations","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","interfaceLanguage":"swift"}},"kind":"article","summary":""},{"summary":"","headings":[],"rawIndexableTextContent":" ","title":"ForkChange","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange"}}},{"headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork"}},"summary":"A  type representing a named fork.","rawIndexableTextContent":"A  type representing a named fork. ","title":"Fork"},{"title":"Error.attemptToAccessNonExistentCommitInFork(_:)","summary":"","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToAccessNonExistentCommitInFork(_:)"}},"rawIndexableTextContent":" "},{"title":"...(_:_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:_:)"}},"kind":"symbol","rawIndexableTextContent":"Returns a closed range that contains both of its bounds.  The lower bound for the range. The upper bound for the range. Discussion Use the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from “a” up to, and including, “z”.  minimum <= maximum.","summary":"Returns a closed range that contains both of its bounds.","headings":["Discussion"]},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/forks","interfaceLanguage":"swift"}},"title":"forks","headings":[],"kind":"symbol","summary":"All forks in the resource, including the main fork, in no particular order","rawIndexableTextContent":"All forks in the resource, including the main fork, in no particular order "},{"summary":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and provides a systematic approach for merging changes, with support for 3-way merging.","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource"},"type":"topLevelPage"},"title":"ForkedResource","rawIndexableTextContent":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and provides a systematic approach for merging changes, with support for 3-way merging. ","headings":[]},{"kind":"symbol","title":"Version","summary":"Used to chronologically order file versions. It is a standard lamport count.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Used to chronologically order file versions. It is a standard lamport count. ","headings":[]},{"rawIndexableTextContent":" ","kind":"symbol","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/forks"},"type":"topLevelPage"},"title":"forks","headings":[]},{"title":"removeCommit(at:from:)","rawIndexableTextContent":" ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/removeCommit(at:from:)"}},"kind":"symbol","summary":""},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/commonAncestor(of:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"Returns the common ancestor commit for a given fork with the main fork.","headings":[],"rawIndexableTextContent":"Returns the common ancestor commit for a given fork with the main fork. ","kind":"symbol","title":"commonAncestor(of:)"},{"summary":"","rawIndexableTextContent":"","kind":"article","headings":[],"title":"Repository Implementations","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/Repository-Implementations","interfaceLanguage":"swift"}}},{"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","kind":"symbol","headings":["Discussion"],"title":"!=(_:_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/!=(_:_:)"}},"summary":"Returns a Boolean value indicating whether two values are not equal."},{"rawIndexableTextContent":"Increase the timestamp by 1 ","headings":[],"title":"next()","summary":"Increase the timestamp by 1","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/next()"}}},{"rawIndexableTextContent":"All versions stored in a given fork. There will usually be 0, 1 or 2, though there may be temporaily more. Note that this is just the versions stored for the fork. The interpretation of the stored versions is handled by the ForkedResource. For example, if there are no versions in the fork of the repo, the ForkedResource will assume it is at the same version as stored in the main fork. ","kind":"symbol","title":"versions(storedIn:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/versions(storedIn:)","interfaceLanguage":"swift"}},"summary":"All versions stored in a given fork. There will usually be 0, 1 or 2, though there may be temporaily more. Note that this is just the versions stored for the fork. The interpretation of the stored versions is handled by the ForkedResource. For example, if there are no versions in the fork of the repo, the ForkedResource will assume it is at the same version as stored in the main fork.","headings":[]},{"summary":"Returns a half-open range that contains its lower bound but not its upper bound.","headings":["Discussion"],"rawIndexableTextContent":"Returns a half-open range that contains its lower bound but not its upper bound.  The lower bound for the range. The upper bound for the range. Discussion Use the half-open range operator (..<) to create a range of any type that conforms to the Comparable protocol. This example creates a Range<Double> from zero up to, but not including, 5.0.  minimum <= maximum.","kind":"symbol","title":"..<(_:_:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/!=(_:_:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","summary":"Returns a Boolean value indicating whether two values are not equal.","title":"!=(_:_:)","kind":"symbol"},{"rawIndexableTextContent":"A commit comprises of content, which is usually a value of the stored resource, together with a Version. ","kind":"symbol","title":"Commit","summary":"A commit comprises of content, which is usually a value of the stored resource, together with a Version.","headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit"},"type":"topLevelPage"}},{"headings":[],"kind":"article","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional\/Mergeable-Implementations"},"type":"topLevelPage"},"title":"Mergeable Implementations","summary":"","rawIndexableTextContent":""},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/performAtomically(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"If you want to perform a series of calls as a single transaction, preventing other threads from changing anything between calls, use this to group the transaction of calls. Note that reentrance of this method from the same thread will lead to deadlock. It is best not to execute long running code in the block, because all other interactions with the ForkedResource will block waiting.","headings":[],"title":"performAtomically(_:)","rawIndexableTextContent":"If you want to perform a series of calls as a single transaction, preventing other threads from changing anything between calls, use this to group the transaction of calls. Note that reentrance of this method from the same thread will lead to deadlock. It is best not to execute long running code in the block, because all other interactions with the ForkedResource will block waiting. ","kind":"symbol"},{"headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/init(from:)","interfaceLanguage":"swift"}},"title":"init(from:)","rawIndexableTextContent":" ","kind":"symbol","summary":""},{"title":"CloudKit Integration Guide","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CloudKitIntegration"},"type":"topLevelPage"},"headings":["Overview","Getting Started","Basic Setup","How It Works","Example Implementation","CloudKit Setup in Xcode","Advanced Usage","Custom Container","Monitoring Sync Updates","Troubleshooting","Further Reading"],"rawIndexableTextContent":"Learn how to use ForkedCloudKit to sync your data across devices. Overview ForkedCloudKit makes it easy to sync your Forked data between devices using Apple’s CloudKit framework. This guide will walk you through the basic setup and usage. Getting Started First, make sure you have the ForkedCloudKit subpackage added to your project dependencies. Then import ForkedCloudKit in your source files:  Basic Setup The main class you’ll work with is CloudKitExchange. Here’s how to set it up:  The id parameter should be a unique string that identifies this resource in CloudKit. How It Works CloudKitExchange automatically: Monitors changes to your ForkedResource’s main fork Uploads changes to iCloud when detected Downloads changes from other devices Merges remote changes into your local data on the main fork All of this happens in the background without blocking your app’s UI. Example Implementation Here’s a complete example showing how to integrate CloudKit sync into a SwiftUI app:  CloudKit Setup in Xcode Before your app can use CloudKit: Enable iCloud in your Xcode target’s capabilities tab Choose or add a container (eg “iCloud.com.mycompany.myapp”). The container ID should match the id parameter in your CloudKitExchange initializer. Also enable the background modes for remote notifications and background processing Advanced Usage Custom Container By default, CloudKitExchange uses the default CloudKit container. You can specify a custom container:  Monitoring Sync Updates CloudKitExchange automatically handles sync in the background, but you can monitor when changes from CloudKit are merged into your main fork. To do this, add a Task on launch that monitors the changeStream for changes from CloudKit:  Troubleshooting Common issues and solutions: No Sync: Ensure iCloud is enabled on the device, the user is signed in, and iCloud Drive enabled Data Not Appearing: Check that your CloudKit container is properly configured Conflicts: ForkedCloudKit automatically handles conflicts using your resource’s merge strategy Further Reading CloudKit Documentation Forked Documentation Sample App: Forking Simple iCloud","summary":"Learn how to use ForkedCloudKit to sync your data across devices.","kind":"article"},{"kind":"symbol","summary":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.","title":"<=(_:_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_=(_:_:)-8ckx5"}},"headings":["Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the less-than-or-equal-to operator (<=) for any type that conforms to Comparable."},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"MergeAction","summary":"The action taken when two forks are merged.","headings":[],"rawIndexableTextContent":"The action taken when two forks are merged. ","kind":"symbol"},{"kind":"symbol","title":"mostRecentVersionOfMain()","headings":[],"summary":"The most recent (current) version of the main fork.","rawIndexableTextContent":"The most recent (current) version of the main fork. ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mostRecentVersionOfMain()","interfaceLanguage":"swift"}}},{"headings":[],"title":"Equatable Implementations","kind":"article","rawIndexableTextContent":"","summary":"","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/Equatable-Implementations"}}},{"summary":"Update the contents of a fork with a new resource value. Will create a commit, and return the Version. The difference between a restart and an update, is that the resource passed is assumed to be the common ancestor of the fork with .main. Sometimes you can’t achieve something through merging, and this gives an override. In general, it should not be needed much, but is handy when in some instances. Only use this if you know that the value of the resource precedes the value in .main, such that it is eligble to be a common ancestor. If the value in .main is actually older, doing this will undo any changes in .main. You can’t restart the .main fork.","headings":[],"rawIndexableTextContent":"Update the contents of a fork with a new resource value. Will create a commit, and return the Version. The difference between a restart and an update, is that the resource passed is assumed to be the common ancestor of the fork with .main. Sometimes you can’t achieve something through merging, and this gives an override. In general, it should not be needed much, but is handy when in some instances. Only use this if you know that the value of the resource precedes the value in .main, such that it is eligble to be a common ancestor. If the value in .main is actually older, doing this will undo any changes in .main. You can’t restart the .main fork. ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/restart(_:with:)","interfaceLanguage":"swift"}},"title":"restart(_:with:)"},{"title":"mergeAllForks(into:)","kind":"symbol","summary":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main. This particular overload handles merges of  Mergeable resources.","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeAllForks(into:)-3bh6r","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main. This particular overload handles merges of  Mergeable resources. "},{"kind":"symbol","title":"fork","summary":"","headings":[],"rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/fork","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":[],"rawIndexableTextContent":"If needed, the repo can store data persistently at this point (or do nothing) ","title":"persist()","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/persist()-3ia2p"},"type":"topLevelPage"},"kind":"symbol","summary":"If needed, the repo can store data persistently at this point (or do nothing)"},{"kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/content(of:at:)"},"type":"topLevelPage"},"title":"content(of:at:)","summary":"","headings":[],"rawIndexableTextContent":" "},{"kind":"symbol","summary":"","rawIndexableTextContent":" ","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/persist()-6pvpe"}},"title":"persist()"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mainVersion(isSameAsVersionIn:)"}},"rawIndexableTextContent":" ","title":"mainVersion(isSameAsVersionIn:)","kind":"symbol","summary":"","headings":[]},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/init()"}},"summary":"Initialize with no persistence","headings":[],"rawIndexableTextContent":"Initialize with no persistence ","kind":"symbol","title":"init()"},{"title":"mostRecentVersion(of:)","summary":"Returns the most recent (current) version of the Fork.","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mostRecentVersion(of:)"}},"rawIndexableTextContent":"Returns the most recent (current) version of the Fork. ","kind":"symbol"},{"summary":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of Mergeable resources.","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeIntoMain(from:)-352k5","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"mergeIntoMain(from:)","kind":"symbol","headings":[],"rawIndexableTextContent":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of Mergeable resources. "},{"title":"CommitContent.resource(_:)","summary":"The content contains a value of the resource.","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/resource(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"The content contains a value of the resource. ","kind":"symbol"},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/versions(storedIn:)","interfaceLanguage":"swift"}},"summary":"","headings":[],"rawIndexableTextContent":" ","title":"versions(storedIn:)"},{"rawIndexableTextContent":"The name of the fork ","title":"name","summary":"The name of the fork","kind":"symbol","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/name","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"kind":"symbol","title":"MergeAction.none","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/none","interfaceLanguage":"swift"}},"headings":[],"rawIndexableTextContent":"No action was taken. The two forks were already at the same version. ","summary":"No action was taken. The two forks were already at the same version."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/!=(_:_:)","interfaceLanguage":"swift"}},"title":"!=(_:_:)","kind":"symbol","summary":"Returns a Boolean value indicating whether two values are not equal.","headings":["Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."},{"headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/merged(withSubordinate:commonAncestor:)","interfaceLanguage":"swift"}},"summary":"","title":"merged(withSubordinate:commonAncestor:)"},{"summary":"","title":"init(from:)","headings":[],"rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/init(from:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedInnards"}},"kind":"article","summary":"Forked is built around a simple yet powerful concept: data conflicts should be treated as a natural part of software systems rather than an exceptional state.","rawIndexableTextContent":"Forked is built around a simple yet powerful concept: data conflicts should be treated as a natural part of software systems rather than an exceptional state. Centralized vs Decentralized The Traditional Approach Applications traditionally use a centralized approach to manage shared data. At the heart of this approach lies a central coordinator, such as a lock, queue, or actor, which protects the shared resource, providing serial access to it. While this pattern is familiar, it comes with significant drawbacks. Changes must be synchronized through the coordinator, forcing other parts of the system to wait while changes occur. This not only creates bottlenecks and synchronization costs but also makes it challenging to reason about the system’s state, often leading to subtle race conditions. The Decentralized Way Forked takes inspiration from proven distributed version control systems like Git. With these systems, changes flow more naturally. Developers can work independently, without waiting to coordinate with other developers. When conflicts arise, the system has a complete picture of what’s changed through its history tracking. This philosophy translates directly to how Forked operates in your application. You’re free to modify data without considering other subsystems or devices, and reconciliation happens later through well-defined merge policies. The key innovation is Forked’s support for 3-way merging, where a historical “common ancestor” helps determine exactly what’s changed in each fork when a conflict arises. The Reality of Modern Apps Most modern applications are inherently decentralized, whether intentional or not. Consider how your app might sync data across multiple devices, or how app extensions operate in separate processes on shared data. Even background processes performing imports or downloads from a web service must coordinate with the main app. These scenarios all represent decentralized operations, even if we often try to force them into a centralized model. Sync Comes for Free Forked’s decentralized approach means that sync is a natural part of the system. By providing some limited history tracking, in the form of a common ancestor, as well a powerful merging, you can begin developing an app for a single device, and very simply add support for sync with no model changes, and no custom server. Just connect iCloud, and you’re done. Forked and Actor-Based Systems While actors excel at preventing data races through controlled access to shared resources, they can’t prevent higher-level race conditions or solve the complexities of reentrant code and interleaved operations. This is where Forked steps up, complementing actor-based architectures by providing robust conflict management capabilities. Architectural Components The Forked Hub Rather than implementing a full version control system, Forked maintains just enough history for effective 3-way merging, keeping memory usage low. In optimal cases, the size of a ForkedResource is practically the same as the size of the resource it contains. In a ForkedResource, forks are arranged in a hub-and-spoke pattern. The hub is the main fork, while other forks (the spokes) can merge with the main fork, but not directly with each other.  The main fork in the hub stores exactly one copy of the resource — its current value. Other forks, on the other hand, are responsible for keeping track of the common ancestor when updates occur. In this way, a 3-way merge between the main fork and any other fork can be performed at any time. The non-main forks can contain various copies of the resource, based on their relationship to the main fork: When a fork is in sync with the main fork, it stores no additional copies of the resource When the main fork has progressed ahead, the fork retains only the common ancestor copy When the fork conflicts with the main fork, it maintains two copies: the common ancestor and its own most recent value Whenever an update to any fork is made, copies of the resource into forks can arise. For example, take the simple case that all forks are in sync. If an update occurs to the main fork, a copy of the resource is made into all of the non-main forks, because they all need a common ancestor to perform a 3-way merge in future. Later, if the main fork gets fully synced with one of the other forks, that fork will no longer have any copy of the resource. This careful management of state means that: The minimum necessary history is preserved in order to facilitate 3-way merges When all forks are in sync, only one copy of the resource exists in memory Memory usage scales with the number of conflicts, not with the number of forks The spoked architecture keeps the number of common ancestors low, because they aren’t needed for every single pair of forks","title":"Forked Innards: Understanding the Architecture","headings":["Centralized vs Decentralized","The Traditional Approach","The Decentralized Way","The Reality of Modern Apps","Sync Comes for Free","Forked and Actor-Based Systems","Architectural Components","The Forked Hub"]},{"kind":"symbol","title":"id","rawIndexableTextContent":" ","summary":"","headings":[],"platforms":[{"unavailable":false,"deprecated":false,"beta":false,"name":"iOS","introducedAt":"13.0"},{"name":"macOS","introducedAt":"10.15","beta":false,"unavailable":false,"deprecated":false},{"unavailable":false,"beta":false,"name":"tvOS","deprecated":false,"introducedAt":"13.0"},{"deprecated":false,"name":"watchOS","introducedAt":"6.0","unavailable":false,"beta":false}],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional\/id-miw3","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/==(_:_:)-227ny"},"type":"topLevelPage"},"rawIndexableTextContent":"By default, resource content is treated as not being equal if we can’t test it. ","summary":"By default, resource content is treated as not being equal if we can’t test it.","kind":"symbol","headings":[],"title":"==(_:_:)"},{"headings":[],"kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/initialVersion"},"type":"topLevelPage"},"title":"initialVersion","summary":"Big bang version of every ForkedResource. Effectively, it is ancient history. Also used as the initial value of any newly created branch","rawIndexableTextContent":"Big bang version of every ForkedResource. Effectively, it is ancient history. Also used as the initial value of any newly created branch "},{"rawIndexableTextContent":" ","summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/version","interfaceLanguage":"swift"}},"kind":"symbol","title":"version","headings":[]},{"title":"QuickFork","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/QuickFork","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","headings":[],"rawIndexableTextContent":" ","summary":""},{"rawIndexableTextContent":"Returns whether main has commits that haven’t been merged into the fork yet. ","kind":"symbol","title":"hasUnmergedCommitsInMain(for:)","summary":"Returns whether main has commits that haven’t been merged into the fork yet.","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/hasUnmergedCommitsInMain(for:)","interfaceLanguage":"swift"}}},{"summary":"Store a version of the resource in a fork. The fork must exist, and the version must not already be in the fork, otherwise an error is thrown.","title":"store(_:in:)","rawIndexableTextContent":"Store a version of the resource in a fork. The fork must exist, and the version must not already be in the fork, otherwise an error is thrown. ","kind":"symbol","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/store(_:in:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"summary":"Creates and returns an AsyncStream which provides notifications of all changes to any fork in the repository. The stream will continue until cancelled or until the ForkedResource is deallocated.","headings":[],"rawIndexableTextContent":"Creates and returns an AsyncStream which provides notifications of all changes to any fork in the repository. The stream will continue until cancelled or until the ForkedResource is deallocated. ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/changeStream","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","title":"changeStream"},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeFromMain(into:)-5tynb"},"type":"topLevelPage"},"kind":"symbol","headings":[],"rawIndexableTextContent":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of non-Mergeable resources. ","summary":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of non-Mergeable resources.","title":"mergeFromMain(into:)"},{"headings":[],"rawIndexableTextContent":"","title":"Decodable Implementations","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/Decodable-Implementations"},"type":"topLevelPage"},"kind":"article","summary":""},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/content","interfaceLanguage":"swift"}},"title":"content","summary":"The content stored in the commit, usually a copy of the resource.","headings":[],"rawIndexableTextContent":"The content stored in the commit, usually a copy of the resource. "},{"headings":[],"summary":"Errors that can arise when  using ForkedResource","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error"}},"rawIndexableTextContent":"Errors that can arise when  using ForkedResource ","kind":"symbol","title":"Error"},{"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.","headings":["Discussion"],"kind":"symbol","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_(_:_:)-2167f","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the greater-than operator (>) for any type that conforms to Comparable.","title":">(_:_:)"},{"rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_(_:_:)-1u41m"},"type":"topLevelPage"},"title":"<(_:_:)","summary":"","headings":[]},{"summary":"","title":"mergingFork","kind":"symbol","rawIndexableTextContent":" ","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/mergingFork","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":[],"summary":"The resource is Equatable, so test explicitly for equality.","rawIndexableTextContent":"The resource is Equatable, so test explicitly for equality. ","title":"==(_:_:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/==(_:_:)-62vf1","interfaceLanguage":"swift"}},"kind":"symbol"},{"rawIndexableTextContent":"Get the content from the repo with the version passed. If not found, it will throw an error. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/content(of:at:)"}},"title":"content(of:at:)","summary":"Get the content from the repo with the version passed. If not found, it will throw an error.","headings":[],"kind":"symbol"},{"title":"forkedVersion","headings":[],"summary":"The version of the Forked API used to create this resource.","rawIndexableTextContent":"The version of the Forked API used to create this resource. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/forkedVersion"}},"kind":"symbol"},{"rawIndexableTextContent":"Will return the resource, if there is one available, and nil otherwise. ","kind":"symbol","headings":[],"title":"resource(of:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/resource(of:)","interfaceLanguage":"swift"}},"summary":"Will return the resource, if there is one available, and nil otherwise."},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/GettingStarted"}},"kind":"article","headings":["Overview","Creating Your First Resource","Working with Forks","Creating Named Forks","Updating Values","Merging Changes","Merging Direction","Working with Complex Types","Next Steps"],"summary":"Learn how to use Forked to manage shared data in your Swift applications.","rawIndexableTextContent":"Learn how to use Forked to manage shared data in your Swift applications. Overview Forked provides a safe way to handle shared data by allowing you to create independent branches (forks) of your data that can be modified concurrently and merged later. This guide will walk you through the basic concepts using practical examples. Creating Your First Resource The easiest way to get started is with QuickFork, which manages a single value in memory:  value(in:) returns an optional because the value might not exist in a given fork. When you’re sure the value exists (like right after creation), you can force unwrap with !. In production code, you might want to handle the optional more safely. Working with Forks Creating Named Forks While every resource has a .main fork, you’ll often want to create additional named forks. One convenient approach is to define your forks as static properties in an extension to Fork:  You can also create forks directly if you prefer:  Updating Values You can update values independently in different forks:  Merging Changes When you’re ready to reconcile changes between forks, you can merge them. All merges must go through the main fork - you cannot merge directly between custom forks:  Merging Direction Merging is directional - changes flow from the source fork to the destination fork. To fully synchronize two forks, you need to merge in both directions:  For convenience, there’s a syncMain(with:) method that performs bidirectional merges between main and multiple forks:  Remember that syncing between custom forks still requires going through main. The sync method makes this easier by handling all the necessary merges in each direction. Working with Complex Types While the examples above use simple Int values, Forked really shines when working with complex types. Here’s an example using a custom type:  Next Steps Learn about different merging strategies in doc:MergingStrategy Explore automatic model generation with ForkedModel Add CloudKit sync with ForkedCloudKit","title":"Getting Started with Forked"},{"summary":"","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/Resource"}},"rawIndexableTextContent":" ","title":"Resource","headings":[],"kind":"symbol"},{"title":"MergeAction.fastForward","summary":"The destination fork is behind, and it has no new commits itself. So the destination fork version was simply made equal to the newer fork version. This is known as a “fast forward”.","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/fastForward","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","headings":[],"rawIndexableTextContent":"The destination fork is behind, and it has no new commits itself. So the destination fork version was simply made equal to the newer fork version. This is known as a “fast forward”. "},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeFromMain(into:)-6o9f","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of Mergeable resources. ","title":"mergeFromMain(into:)","kind":"symbol","summary":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of Mergeable resources."},{"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/Equatable-Implementations","interfaceLanguage":"swift"}},"kind":"article","headings":[],"title":"Equatable Implementations","summary":""},{"kind":"symbol","title":"localizedDescription","platforms":[{"name":"iOS","unavailable":false,"deprecated":false,"introducedAt":"8.0","beta":false},{"name":"macOS","introducedAt":"10.10","deprecated":false,"beta":false,"unavailable":false},{"unavailable":false,"deprecated":false,"beta":false,"name":"tvOS","introducedAt":"9.0"},{"introducedAt":"2.0","unavailable":false,"beta":false,"deprecated":false,"name":"watchOS"}],"headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error\/localizedDescription"}},"rawIndexableTextContent":"Retrieve the localized description for this error. ","summary":"Retrieve the localized description for this error."},{"headings":[],"title":"persist()","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/persist()-1cs5y","interfaceLanguage":"swift"}},"summary":"","rawIndexableTextContent":" "},{"title":"load()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/load()-3oha2","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","kind":"symbol","headings":[],"summary":""},{"title":"persist()","kind":"symbol","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/persist()","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Persists any pending changes in the underlying repository to permanent storage  Discussion An error if the persistence operation fails","summary":"Persists any pending changes in the underlying repository to permanent storage"},{"title":"hash(into:)","kind":"symbol","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/hash(into:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","summary":""},{"kind":"article","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/Equatable-Implementations"},"type":"topLevelPage"},"summary":"","headings":[],"rawIndexableTextContent":"","title":"Equatable Implementations"},{"title":"init(initialValue:forks:)","headings":[],"kind":"symbol","rawIndexableTextContent":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given forks, and initial value. The initial value is optional. If not provided, the main fork will be empty. The setup ensures that all forks are synced up with the initial value, which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.) ","summary":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given forks, and initial value. The initial value is optional. If not provided, the main fork will be empty. The setup ensures that all forks are synced up with the initial value, which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forks:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/ResourceType","interfaceLanguage":"swift"}},"title":"ForkedResource.ResourceType","summary":""},{"kind":"symbol","rawIndexableTextContent":"","title":"Swift","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Swift","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","headings":[]},{"title":"Mergeable","kind":"symbol","summary":"","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","interfaceLanguage":"swift"}},"rawIndexableTextContent":" "},{"summary":"Adds a new commit with content .none. This is like setting the content to nil. Note that this does not remove the fork, and the fork does still have commits. However, the value of the most recent commit will be .none, to indicate the absence of a resource. (This construction is sometimes referred to as a “tombstone”. It is a commit that indicates that something has been removed.)","rawIndexableTextContent":"Adds a new commit with content .none. This is like setting the content to nil. Note that this does not remove the fork, and the fork does still have commits. However, the value of the most recent commit will be .none, to indicate the absence of a resource. (This construction is sometimes referred to as a “tombstone”. It is a commit that indicates that something has been removed.) ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/removeContent(from:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","headings":[],"title":"removeContent(from:)"},{"summary":"The two forks had both changed since the common ancestor version. They were merged to produce a new value for the destination fork.","title":"MergeAction.resolveConflict","rawIndexableTextContent":"The two forks had both changed since the common ancestor version. They were merged to produce a new value for the destination fork. ","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/resolveConflict"}}},{"summary":"Initialize a fork with a given unique name.","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/init(name:)"},"type":"topLevelPage"},"title":"init(name:)","rawIndexableTextContent":"Initialize a fork with a given unique name. ","kind":"symbol","headings":[]},{"summary":"Returns the most recent (current) commit of the Fork.","headings":[],"rawIndexableTextContent":"Returns the most recent (current) commit of the Fork. ","title":"mostRecentCommit(of:)","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mostRecentCommit(of:)","interfaceLanguage":"swift"}}},{"summary":"A wrapper to hold the resource. This allows for the resource to be absent in a fork, similar to using nil.","rawIndexableTextContent":"A wrapper to hold the resource. This allows for the resource to be absent in a fork, similar to using nil. ","kind":"symbol","title":"CommitContent","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[]},{"headings":["Discussion"],"rawIndexableTextContent":"Returns a partial range up to, but not including, its upper bound.  The upper bound for the range. Discussion Use the prefix half-open range operator (prefix ..<) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeUpTo<Double> instance that includes any value less than 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Returns a partial range up to, but not including, its upper bound.","title":"..<(_:)"},{"rawIndexableTextContent":"Returns a partial range up to, and including, its upper bound.  The upper bound for the range. Discussion Use the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","interfaceLanguage":"swift"}},"summary":"Returns a partial range up to, and including, its upper bound.","title":"...(_:)","kind":"symbol","headings":["Discussion"]},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToRestartMainFork","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"Error.attemptToRestartMainFork","summary":"","rawIndexableTextContent":" ","kind":"symbol","headings":[]},{"kind":"symbol","rawIndexableTextContent":" ","title":"load()","summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/load()-842ep","interfaceLanguage":"swift"}},"headings":[]},{"headings":[],"kind":"symbol","title":"main","rawIndexableTextContent":"The only fork created by default. All other forkes can be merged with the main, but not directly with each other.. It acts as the central hub of the wheel of forks. ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/main","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"The only fork created by default. All other forkes can be merged with the main, but not directly with each other.. It acts as the central hub of the wheel of forks."},{"title":"id","kind":"symbol","headings":[],"rawIndexableTextContent":" ","summary":"","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Swift\/Optional\/id-7qdxl"},"type":"topLevelPage"}},{"headings":["Discussion"],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/!=(_:_:)"}},"title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal.","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."},{"headings":[],"summary":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given fork names, and initial value. The setup ensures that all forks are synced up with the initial value — if there is one — which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.)","rawIndexableTextContent":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given fork names, and initial value. The setup ensures that all forks are synced up with the initial value — if there is one — which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.) ","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forkNames:)"}},"title":"init(initialValue:forkNames:)"},{"rawIndexableTextContent":"Persist using Codable ","kind":"symbol","title":"init(managedFileURL:)","headings":[],"summary":"Persist using Codable","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/init(managedFileURL:)"},"type":"topLevelPage"}},{"kind":"symbol","summary":"The version when the copy of the resource was committed.","headings":[],"rawIndexableTextContent":"The version when the copy of the resource was committed. ","title":"version","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/version","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"rawIndexableTextContent":" ","headings":[],"title":"load()","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/load()-6rkha"}},"summary":"","kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mainVersion(differsFromVersionIn:)"}},"summary":"Whether the fork and main fork are at the same version or not.","kind":"symbol","headings":[],"rawIndexableTextContent":"Whether the fork and main fork are at the same version or not. ","title":"mainVersion(differsFromVersionIn:)"},{"title":"!=(_:_:)","headings":["Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","summary":"Returns a Boolean value indicating whether two values are not equal.","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/!=(_:_:)"}}},{"headings":[],"rawIndexableTextContent":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks. This particular overload handles merges of  Mergeable resources. ","summary":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks. This particular overload handles merges of  Mergeable resources.","title":"syncAllForks()","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncAllForks()-9xz2c"}}},{"rawIndexableTextContent":" ","kind":"symbol","title":"Error.attemptToCreateExistingFork(_:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToCreateExistingFork(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":"","headings":[]},{"headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"An atomic repository is one that gets loaded completely into memory. If the Resource it contains conforms to Codable, the AtomicRepository is also Codable, and can be converted to a serialized form and saved as a file. Saving and loading are atomic, that is, the whole repository is loaded from file, and the whole file is written to disk. ","title":"AtomicRepository","kind":"symbol","summary":"An atomic repository is one that gets loaded completely into memory. If the Resource it contains conforms to Codable, the AtomicRepository is also Codable, and can be converted to a serialized form and saved as a file. Saving and loading are atomic, that is, the whole repository is loaded from file, and the whole file is written to disk."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/init(from:)","interfaceLanguage":"swift"}},"headings":[],"rawIndexableTextContent":" ","summary":"","kind":"symbol","title":"init(from:)"},{"summary":"","headings":[],"rawIndexableTextContent":"","kind":"article","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error\/Error-Implementations"}},"title":"Error Implementations"},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_=(_:_:)-9tu3k"}},"headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.  A value to compare. Another value to compare. Return Value true if lhs is greater than or equal to rhs; otherwise, false. Discussion This is the default implementation of the greater-than-or-equal-to operator (>=) for any type that conforms to Comparable.","summary":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.","title":">=(_:_:)"},{"title":"==(_:_:)","summary":"","kind":"symbol","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/==(_:_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":" "}]