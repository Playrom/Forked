[{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/Resource","interfaceLanguage":"swift"}},"title":"Resource","rawIndexableTextContent":" ","kind":"symbol","summary":"","headings":[]},{"kind":"symbol","title":"isProtected","headings":[],"rawIndexableTextContent":"Whether the fork is protected from deletion. Only the main fork has this protection for now. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/isProtected"}},"summary":"Whether the fork is protected from deletion. Only the main fork has this protection for now."},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction"}},"title":"MergeAction","summary":"The action taken when two forks are merged.","rawIndexableTextContent":"The action taken when two forks are merged. ","headings":[],"kind":"symbol"},{"kind":"symbol","rawIndexableTextContent":"This is storage for the ForkedResource. It could be persisted on disk, or just kept in memory. This type does not understand any of the mechanisms of forking and merging. That is all handled by the ForkedResource, which also ensures correct multi-threading behavior. Classes conforming to this type simply have to setup a storage mechanism, and handle the requests, keeping commits assigned to forks. ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository"},"type":"topLevelPage"},"title":"Repository","summary":"This is storage for the ForkedResource. It could be persisted on disk, or just kept in memory. This type does not understand any of the mechanisms of forking and merging. That is all handled by the ForkedResource, which also ensures correct multi-threading behavior. Classes conforming to this type simply have to setup a storage mechanism, and handle the requests, keeping commits assigned to forks.","headings":[]},{"title":"!=(_:_:)","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","kind":"symbol","summary":"Returns a Boolean value indicating whether two values are not equal.","headings":["Discussion"],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/!=(_:_:)"},"type":"topLevelPage"}},{"title":"persist()","kind":"symbol","headings":[],"summary":"","rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/persist()-6k6s6"}}},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncAllForks()-9xz2c","interfaceLanguage":"swift"}},"summary":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks. This particular overload handles merges of  Mergeable resources.","headings":[],"kind":"symbol","rawIndexableTextContent":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks. This particular overload handles merges of  Mergeable resources. ","title":"syncAllForks()"},{"summary":"An atomic repository is one that gets loaded completely into memory. If the Resource it contains conforms to Codable, the AtomicRepository is also Codable, and can be converted to a serialized form and saved as a file. Saving and loading are atomic, that is, the whole repository is loaded from file, and the whole file is written to disk.","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository"}},"rawIndexableTextContent":"An atomic repository is one that gets loaded completely into memory. If the Resource it contains conforms to Codable, the AtomicRepository is also Codable, and can be converted to a serialized form and saved as a file. Saving and loading are atomic, that is, the whole repository is loaded from file, and the whole file is written to disk. ","title":"AtomicRepository","kind":"symbol"},{"kind":"symbol","summary":"The version when the copy of the resource was committed.","headings":[],"title":"version","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/version","interfaceLanguage":"swift"}},"rawIndexableTextContent":"The version when the copy of the resource was committed. "},{"kind":"symbol","rawIndexableTextContent":"Initialize a fork with a given unique name. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/init(name:)"}},"summary":"Initialize a fork with a given unique name.","title":"init(name:)","headings":[]},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/forks","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"forks","kind":"symbol","summary":"The forks in the repository, including .main, in no particular order.","headings":[],"rawIndexableTextContent":"The forks in the repository, including .main, in no particular order. "},{"rawIndexableTextContent":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given fork names, and initial value. The setup ensures that all forks are synced up with the initial value — if there is one — which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.) ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forkNames:)"},"type":"topLevelPage"},"title":"init(initialValue:forkNames:)","headings":[],"kind":"symbol","summary":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given fork names, and initial value. The setup ensures that all forks are synced up with the initial value — if there is one — which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.)"},{"headings":["Discussion"],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_=(_:_:)-8ckx5"},"type":"topLevelPage"},"title":"<=(_:_:)","kind":"symbol","summary":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.","rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the less-than-or-equal-to operator (<=) for any type that conforms to Comparable."},{"summary":"Whether fork has commits not yet merged into main. If there are more than one commits in the repo for this fork, the fork must have changes not in main:","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/hasUnmergedCommitsForMain(in:)","interfaceLanguage":"swift"}},"headings":["Discussion"],"kind":"symbol","title":"hasUnmergedCommitsForMain(in:)","rawIndexableTextContent":"Whether fork has commits not yet merged into main. If there are more than one commits in the repo for this fork, the fork must have changes not in main:  Discussion Zero commits means fork is the same as main. One commit is a common ancestor, meaning main has changes, but the fork is unchanged. Two or more commits means the fork has changes not yet in main."},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/load()-842ep"}},"rawIndexableTextContent":" ","summary":"","kind":"symbol","title":"load()","headings":[]},{"title":"ForkChange","rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange"}},"summary":"","headings":[]},{"summary":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main. This particular overload handles merges of  Mergeable resources.","headings":[],"rawIndexableTextContent":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main. This particular overload handles merges of  Mergeable resources. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeAllForks(into:)-3bh6r"}},"title":"mergeAllForks(into:)","kind":"symbol"},{"kind":"symbol","title":"Error.attemptToDeleteAllDataFromMainFork","headings":[],"summary":"","rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToDeleteAllDataFromMainFork","interfaceLanguage":"swift"}}},{"summary":"","rawIndexableTextContent":" ","title":"persist()","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/persist()"}}},{"kind":"symbol","headings":[],"title":"init(from:)","rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/init(from:)","interfaceLanguage":"swift"}},"summary":""},{"headings":[],"rawIndexableTextContent":"Retrieve the localized description for this error. ","summary":"Retrieve the localized description for this error.","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/localizedDescription","interfaceLanguage":"swift"}},"title":"localizedDescription","platforms":[{"deprecated":false,"introducedAt":"8.0","name":"iOS","beta":false,"unavailable":false},{"unavailable":false,"introducedAt":"10.10","beta":false,"name":"macOS","deprecated":false},{"unavailable":false,"deprecated":false,"introducedAt":"9.0","beta":false,"name":"tvOS"},{"name":"watchOS","deprecated":false,"introducedAt":"2.0","unavailable":false,"beta":false}]},{"rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/store(_:in:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"title":"store(_:in:)","kind":"symbol","summary":""},{"rawIndexableTextContent":" ","title":"Error.attemptToAccessNonExistentCommitInFork(_:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToAccessNonExistentCommitInFork(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","summary":"","headings":[]},{"summary":"Errors that can arise when  using ForkedResource","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error"}},"kind":"symbol","title":"Error","headings":[],"rawIndexableTextContent":"Errors that can arise when  using ForkedResource "},{"headings":[],"kind":"symbol","title":"mergeIntoMain(from:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeIntoMain(from:)-9wpr4"}},"summary":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of non-Mergeable resources.","rawIndexableTextContent":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of non-Mergeable resources. "},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/Equatable-Implementations"},"type":"topLevelPage"},"rawIndexableTextContent":"","title":"Equatable Implementations","summary":"","kind":"article","headings":[]},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version","interfaceLanguage":"swift"}},"title":"Version","kind":"symbol","summary":"Used to chronologically order file versions. It is a standard lamport count.","rawIndexableTextContent":"Used to chronologically order file versions. It is a standard lamport count. ","headings":[]},{"headings":[],"summary":"Removes all content from all branches, resetting to the initial state. It does not remove the existing branches, but removes their content.","rawIndexableTextContent":"Removes all content from all branches, resetting to the initial state. It does not remove the existing branches, but removes their content. ","title":"removeAllContent()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/removeAllContent()","interfaceLanguage":"swift"}},"kind":"symbol"},{"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.","rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.  A value to compare. Another value to compare. Discussion This is the default implementation of the greater-than operator (>) for any type that conforms to Comparable.","title":">(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_(_:_:)-2167f","interfaceLanguage":"swift"}},"kind":"symbol"},{"summary":"","kind":"symbol","title":"version","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/version"}},"headings":[],"rawIndexableTextContent":" "},{"title":"Forked","rawIndexableTextContent":"A framework for handling forked data structures and merge operations. Overview Forked provides a comprehensive solution for managing forked data structures, with support for merging, model generation, and CloudKit integration.","kind":"symbol","summary":"A framework for handling forked data structures and merge operations.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked","interfaceLanguage":"swift"}},"headings":["Overview"]},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncMain(with:)-18a6t"},"type":"topLevelPage"},"title":"syncMain(with:)","headings":[],"summary":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging.","rawIndexableTextContent":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging. ","kind":"symbol"},{"title":"syncAllForks()","kind":"symbol","summary":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks.","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncAllForks()-88teh","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"Merges all forks so they are all at the same version. This involves merging all forks into the main fork first, and then merging the main fork into all other forks. ","headings":[]},{"rawIndexableTextContent":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given forks, and initial value. The initial value is optional. If not provided, the main fork will be empty. The setup ensures that all forks are synced up with the initial value, which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.) ","summary":"Convenience for creating simple forked resource for in-memory use. Create an in-memory ForkedResource with the given forks, and initial value. The initial value is optional. If not provided, the main fork will be empty. The setup ensures that all forks are synced up with the initial value, which is different to the default behavior when you first create a ForkedResource. (In a forked resource, a new fork is initially empty, and may not be in sync with the main fork until merged.)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(initialValue:forks:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"title":"init(initialValue:forks:)","kind":"symbol"},{"rawIndexableTextContent":"","title":"Equatable Implementations","kind":"article","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"","headings":[]},{"rawIndexableTextContent":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main. ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeAllForks(into:)-30zos"},"type":"topLevelPage"},"summary":"Merges other forks into main, and then main into the target fork, so it has up-to-date data from all other forks. You can pass in .main if you want to merge all other forks into .main.","headings":[],"title":"mergeAllForks(into:)","kind":"symbol"},{"rawIndexableTextContent":"A  type representing a named fork. ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork","interfaceLanguage":"swift"}},"title":"Fork","kind":"symbol","headings":[],"summary":"A  type representing a named fork."},{"title":"init(from:)","summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/init(from:)","interfaceLanguage":"swift"}}},{"title":"next()","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/next()","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"Increase the timestamp by 1 ","kind":"symbol","summary":"Increase the timestamp by 1","headings":[]},{"title":"hasUnmergedCommitsInMain(for:)","rawIndexableTextContent":"Returns whether main has commits that haven’t been merged into the fork yet. The common ancestor is always stored in the fork if either the fork or main get updated. By comparing common ancestor to main version, we can see if main has been updated. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/hasUnmergedCommitsInMain(for:)"}},"summary":"Returns whether main has commits that haven’t been merged into the fork yet. The common ancestor is always stored in the fork if either the fork or main get updated. By comparing common ancestor to main version, we can see if main has been updated.","headings":[],"kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/load()-6rkha","interfaceLanguage":"swift"}},"kind":"symbol","title":"load()","rawIndexableTextContent":" ","summary":"","headings":[]},{"kind":"article","rawIndexableTextContent":"Learn how to integrate and use the Forked framework in your projects. Overview This article guides you through the basic setup and usage of the Forked framework. Basic Setup [Add setup instructions here]","title":"Getting Started with Forked","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/GettingStarted","interfaceLanguage":"swift"}},"headings":["Overview","Basic Setup"],"summary":"Learn how to integrate and use the Forked framework in your projects."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToAccessNonExistentFork(_:)","interfaceLanguage":"swift"}},"title":"Error.attemptToAccessNonExistentFork(_:)","summary":"","kind":"symbol","headings":[],"rawIndexableTextContent":" "},{"summary":"","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/delete(_:)"}},"kind":"symbol","title":"delete(_:)","rawIndexableTextContent":" ","headings":[]},{"rawIndexableTextContent":" ","summary":"","title":"Mergeable","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","headings":[]},{"title":"Decodable Implementations","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/Decodable-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"kind":"article","summary":"","rawIndexableTextContent":""},{"headings":[],"kind":"symbol","title":"versions(storedIn:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/versions(storedIn:)","interfaceLanguage":"swift"}},"summary":"All versions stored in a given fork. There will usually be 0, 1 or 2, though there may be temporaily more. Note that this is just the versions stored for the fork. The interpretation of the stored versions is handled by the ForkedResource. For example, if there are no versions in the fork of the repo, the ForkedResource will assume it is at the same version as stored in the main fork.","rawIndexableTextContent":"All versions stored in a given fork. There will usually be 0, 1 or 2, though there may be temporaily more. Note that this is just the versions stored for the fork. The interpretation of the stored versions is handled by the ForkedResource. For example, if there are no versions in the fork of the repo, the ForkedResource will assume it is at the same version as stored in the main fork. "},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/content(of:at:)"},"type":"topLevelPage"},"kind":"symbol","rawIndexableTextContent":"Get the content from the repo with the version passed. If not found, it will throw an error. ","summary":"Get the content from the repo with the version passed. If not found, it will throw an error.","headings":[],"title":"content(of:at:)"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/resource(of:)"}},"summary":"Will return the resource, if there is one available, and nil otherwise.","title":"resource(of:)","kind":"symbol","headings":[],"rawIndexableTextContent":"Will return the resource, if there is one available, and nil otherwise. "},{"headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/performAtomically(_:)"},"type":"topLevelPage"},"title":"performAtomically(_:)","rawIndexableTextContent":"If you want to perform a series of calls as a single transaction, preventing other threads from changing anything between calls, use this to group the transaction of calls. Note that reentrance of this method from the same thread will lead to deadlock. It is best not to execute long running code in the block, because all other interactions with the ForkedResource will block waiting. ","kind":"symbol","summary":"If you want to perform a series of calls as a single transaction, preventing other threads from changing anything between calls, use this to group the transaction of calls. Note that reentrance of this method from the same thread will lead to deadlock. It is best not to execute long running code in the block, because all other interactions with the ForkedResource will block waiting."},{"title":"mainVersion(differsFromVersionIn:)","summary":"Whether the fork and main fork are at the same version or not.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mainVersion(differsFromVersionIn:)","interfaceLanguage":"swift"}},"kind":"symbol","headings":[],"rawIndexableTextContent":"Whether the fork and main fork are at the same version or not. "},{"kind":"symbol","rawIndexableTextContent":"Store a version of the resource in a fork. The fork must exist, and the version must not already be in the fork, otherwise an error is thrown. ","title":"store(_:in:)","summary":"Store a version of the resource in a fork. The fork must exist, and the version must not already be in the fork, otherwise an error is thrown.","headings":[],"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/store(_:in:)","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"kind":"symbol","summary":"The resource is Equatable, so test explicitly for equality.","headings":[],"rawIndexableTextContent":"The resource is Equatable, so test explicitly for equality. ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/==(_:_:)-62vf1"},"type":"topLevelPage"},"title":"==(_:_:)"},{"title":"Error.attemptToAccessNonExistentVersion(_:_:)","summary":"","headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToAccessNonExistentVersion(_:_:)"},"type":"topLevelPage"},"rawIndexableTextContent":" ","kind":"symbol"},{"title":"create(_:withInitialCommit:)","summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/create(_:withInitialCommit:)","interfaceLanguage":"swift"}}},{"title":"initialVersion","summary":"Big bang version of every ForkedResource. Effectively, it is ancient history. Also used as the initial value of any newly created branch","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/initialVersion","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"Big bang version of every ForkedResource. Effectively, it is ancient history. Also used as the initial value of any newly created branch ","kind":"symbol","headings":[]},{"summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToReplaceExistingVersion(_:_:)","interfaceLanguage":"swift"}},"title":"Error.attemptToReplaceExistingVersion(_:_:)"},{"rawIndexableTextContent":"Delete an existing fork. Throws if it isn’t present. ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/delete(_:)","interfaceLanguage":"swift"}},"title":"delete(_:)","summary":"Delete an existing fork. Throws if it isn’t present.","headings":[]},{"kind":"symbol","rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ConflictingCommits\/subordinate","interfaceLanguage":"swift"}},"title":"subordinate","summary":"","headings":[]},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeFromMain(into:)-5tynb","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of non-Mergeable resources. ","headings":[],"kind":"symbol","title":"mergeFromMain(into:)","summary":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of non-Mergeable resources."},{"summary":"If the Resource is not Mergeable, fallback to last-write-wins approach. Most recent commit is chosen.","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergedContent(forConflicting:withCommonAncestor:)-44j2z"},"type":"topLevelPage"},"rawIndexableTextContent":"If the Resource is not Mergeable, fallback to last-write-wins approach. Most recent commit is chosen. ","title":"mergedContent(forConflicting:withCommonAncestor:)","headings":[],"kind":"symbol"},{"rawIndexableTextContent":" ","headings":[],"title":"Error.unexpectedError(_:)","kind":"symbol","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/unexpectedError(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":""},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/!=(_:_:)","interfaceLanguage":"swift"}},"title":"!=(_:_:)","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","summary":"Returns a Boolean value indicating whether two values are not equal.","headings":["Discussion"],"kind":"symbol"},{"title":"mergeIntoMain(from:)","kind":"symbol","summary":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of Mergeable resources.","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeIntoMain(from:)-352k5","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Merges from one fork into the main fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the main fork may be updated. The version of the other fork will be unchanged. Note that this may change the commits stored in unrelated forks, in order to preserve common ancestors. This particular overload handles merges of Mergeable resources. "},{"rawIndexableTextContent":"","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/Equatable-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"article","title":"Equatable Implementations","headings":[],"summary":""},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/value(in:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"value(in:)","summary":"Same as calling resource(of:).","headings":[],"rawIndexableTextContent":"Same as calling resource(of:). ","kind":"symbol"},{"title":"removeCommit(at:from:)","summary":"","kind":"symbol","rawIndexableTextContent":" ","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/removeCommit(at:from:)","interfaceLanguage":"swift"}}},{"title":"init(from:)","rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/init(from:)"},"type":"topLevelPage"},"summary":"","headings":[]},{"headings":[],"rawIndexableTextContent":"A wrapper to hold the resource. This allows for the resource to be absent in a fork, similar to using nil. ","kind":"symbol","title":"CommitContent","summary":"A wrapper to hold the resource. This allows for the resource to be absent in a fork, similar to using nil.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent","interfaceLanguage":"swift"}}},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/hash(into:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","kind":"symbol","title":"hash(into:)","summary":"","headings":[]},{"rawIndexableTextContent":"If needed, the repo can store data persistently at this point (or do nothing) ","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/persist()-3ia2p"}},"title":"persist()","headings":[],"summary":"If needed, the repo can store data persistently at this point (or do nothing)"},{"headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToCreateExistingFork(_:)","interfaceLanguage":"swift"}},"summary":"","rawIndexableTextContent":" ","title":"Error.attemptToCreateExistingFork(_:)","kind":"symbol"},{"title":"content","summary":"The content stored in the commit, usually a copy of the resource.","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/content","interfaceLanguage":"swift"}},"kind":"symbol","rawIndexableTextContent":"The content stored in the commit, usually a copy of the resource. "},{"summary":"Loads repo from storage, if this is supported. Otherwise, does nothing.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/load()-xnd5"}},"kind":"symbol","headings":[],"rawIndexableTextContent":"Loads repo from storage, if this is supported. Otherwise, does nothing. ","title":"load()"},{"kind":"article","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/Error-Implementations","interfaceLanguage":"swift"},"type":"topLevelPage"},"rawIndexableTextContent":"","summary":"","headings":[],"title":"Error Implementations"},{"summary":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of Mergeable resources.","headings":[],"kind":"symbol","title":"mergeFromMain(into:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergeFromMain(into:)-6o9f"}},"rawIndexableTextContent":"Merges from the main fork into another fork. May perform a 3-way merge. A MergeAction is returned to indicate the type of merge that took place. After this operation, the fork may be updated, with the version of the main fork unchanged. This particular overload handles merges of Mergeable resources. "},{"summary":"","headings":[],"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/Equatable-Implementations"}},"title":"Equatable Implementations","kind":"article"},{"headings":["Discussion"],"title":"...(_:_:)","rawIndexableTextContent":"Returns a closed range that contains both of its bounds.  The lower bound for the range. The upper bound for the range. Discussion Use the closed range operator (...) to create a closed range of any type that conforms to the Comparable protocol. This example creates a ClosedRange<Character> from “a” up to, and including, “z”.  minimum <= maximum.","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:_:)"}},"summary":"Returns a closed range that contains both of its bounds."},{"headings":[],"rawIndexableTextContent":" ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mainVersion(isSameAsVersionIn:)"},"type":"topLevelPage"},"summary":"","kind":"symbol","title":"mainVersion(isSameAsVersionIn:)"},{"summary":"The most recent (current) version of the main fork.","headings":[],"title":"mostRecentVersionOfMain()","rawIndexableTextContent":"The most recent (current) version of the main fork. ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mostRecentVersionOfMain()","interfaceLanguage":"swift"}},"kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/!=(_:_:)","interfaceLanguage":"swift"}},"kind":"symbol","title":"!=(_:_:)","headings":["Discussion"],"summary":"Returns a Boolean value indicating whether two values are not equal.","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable."},{"kind":"article","title":"Repository Implementations","rawIndexableTextContent":"","headings":[],"summary":"","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/Repository-Implementations"}}},{"headings":["Overview"],"rawIndexableTextContent":"Learn how to use ForkedCloudKit for data synchronization. Overview This article explains how to integrate CloudKit synchronization in your app.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CloudKitIntegration"}},"title":"CloudKit Integration Guide","kind":"article","summary":"Learn how to use ForkedCloudKit for data synchronization."},{"title":"persist()","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/persist()-1cs5y","interfaceLanguage":"swift"}},"headings":[],"kind":"symbol","summary":"","rawIndexableTextContent":" "},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ConflictingCommits\/init(commits:)"}},"headings":[],"summary":"","rawIndexableTextContent":" ","title":"init(commits:)","kind":"symbol"},{"kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":"A commit comprises of content, which is usually a value of the stored resource, together with a Version. ","summary":"A commit comprises of content, which is usually a value of the stored resource, together with a Version.","title":"Commit"},{"summary":"","headings":[],"rawIndexableTextContent":" ","kind":"symbol","title":"mergingFork","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/mergingFork","interfaceLanguage":"swift"}}},{"title":"..<(_:)","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:)"}},"rawIndexableTextContent":"Returns a partial range up to, but not including, its upper bound.  The upper bound for the range. Discussion Use the prefix half-open range operator (prefix ..<) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeUpTo<Double> instance that includes any value less than 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, but not including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN).","summary":"Returns a partial range up to, but not including, its upper bound.","headings":["Discussion"]},{"summary":"The content is not present. Perhaps it has not been added yet, or it may have been removed.","headings":[],"kind":"symbol","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/none","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"CommitContent.none","rawIndexableTextContent":"The content is not present. Perhaps it has not been added yet, or it may have been removed. "},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/hash(into:)"}},"title":"hash(into:)","kind":"symbol","rawIndexableTextContent":" ","headings":[],"summary":""},{"headings":[],"title":"has(_:)","summary":"Whether a fork exists in the ForkedResource","rawIndexableTextContent":"Whether a fork exists in the ForkedResource ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/has(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol"},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/resolveConflict","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"summary":"The two forks had both changed since the common ancestor version. They were merged to produce a new value for the destination fork.","kind":"symbol","title":"MergeAction.resolveConflict","rawIndexableTextContent":"The two forks had both changed since the common ancestor version. They were merged to produce a new value for the destination fork. "},{"summary":"Returns the common ancestor commit for a given fork with the main fork. This is the point at which they diverged, ie, when they were last in agreement. It may be the same as the current commit on either fork, and can even be the same as both. For example, if the fork is fully merged into main, the forks are at the same version, and the common ancestor is the same version.","headings":[],"rawIndexableTextContent":"Returns the common ancestor commit for a given fork with the main fork. This is the point at which they diverged, ie, when they were last in agreement. It may be the same as the current commit on either fork, and can even be the same as both. For example, if the fork is fully merged into main, the forks are at the same version, and the common ancestor is the same version. ","title":"commonAncestor(of:)","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/commonAncestor(of:)"}}},{"rawIndexableTextContent":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/Comparable-Implementations","interfaceLanguage":"swift"}},"kind":"article","headings":[],"title":"Comparable Implementations","summary":""},{"summary":"","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/Equatable-Implementations","interfaceLanguage":"swift"}},"kind":"article","title":"Equatable Implementations","rawIndexableTextContent":""},{"rawIndexableTextContent":"The destination fork is behind, and it has no new commits itself. So the destination fork version was simply made equal to the newer fork version. This is known as a “fast forward”. ","headings":[],"title":"MergeAction.fastForward","kind":"symbol","summary":"The destination fork is behind, and it has no new commits itself. So the destination fork version was simply made equal to the newer fork version. This is known as a “fast forward”.","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/fastForward"}}},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/syncMain(with:)-uing","interfaceLanguage":"swift"}},"kind":"symbol","title":"syncMain(with:)","headings":[],"summary":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging.","rawIndexableTextContent":"Brings main and the other fork to the same version by first merging from the other fork into main, and then merging from main into the other fork (fast forward). This particular overload handles merges of  Mergeable resources. To sync up all forks, just pass all forks to this func, including .main. The main fork is ignored when merging. "},{"headings":[],"title":"<(_:_:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_(_:_:)-1u41m"},"type":"topLevelPage"},"rawIndexableTextContent":" ","kind":"symbol","summary":""},{"headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/!=(_:_:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","kind":"symbol","title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal."},{"headings":[],"rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/ResourceType"},"type":"topLevelPage"},"title":"ForkedResource.ResourceType","summary":""},{"rawIndexableTextContent":"Remove a commit for a given version from the fork. If the version is not found, an error is thrown. ","headings":[],"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/removeCommit(at:from:)","interfaceLanguage":"swift"}},"title":"removeCommit(at:from:)","summary":"Remove a commit for a given version from the fork. If the version is not found, an error is thrown."},{"summary":"","headings":[],"rawIndexableTextContent":"","title":"Decodable Implementations","kind":"article","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/Decodable-Implementations"},"type":"topLevelPage"}},{"title":"Decodable Implementations","kind":"article","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"","headings":[],"rawIndexableTextContent":""},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/QuickFork"}},"title":"QuickFork","summary":"","rawIndexableTextContent":" ","headings":[]},{"summary":"Initialize with no persistence","kind":"symbol","headings":[],"rawIndexableTextContent":"Initialize with no persistence ","title":"init()","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/init()"},"type":"topLevelPage"}},{"title":"ConflictingCommits","rawIndexableTextContent":" ","headings":[],"summary":"","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ConflictingCommits"}},"kind":"symbol"},{"summary":"The name of the fork","title":"name","kind":"symbol","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/name","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"rawIndexableTextContent":"The name of the fork "},{"summary":"","headings":[],"title":"versions(storedIn:)","rawIndexableTextContent":" ","kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/versions(storedIn:)"},"type":"topLevelPage"}},{"title":"CommitContent.resource(_:)","summary":"The content contains a value of the resource.","rawIndexableTextContent":"The content contains a value of the resource. ","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/resource(_:)","interfaceLanguage":"swift"}},"headings":[]},{"title":"init(from:)","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/init(from:)"},"type":"topLevelPage"},"summary":"","headings":[],"kind":"symbol","rawIndexableTextContent":" "},{"headings":["Discussion"],"rawIndexableTextContent":"Returns a half-open range that contains its lower bound but not its upper bound.  The lower bound for the range. The upper bound for the range. Discussion Use the half-open range operator (..<) to create a range of any type that conforms to the Comparable protocol. This example creates a Range<Double> from zero up to, but not including, 5.0.  minimum <= maximum.","title":"..<(_:_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/.._(_:_:)"}},"kind":"symbol","summary":"Returns a half-open range that contains its lower bound but not its upper bound."},{"summary":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.","headings":["Return Value","Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.  A value to compare. Another value to compare. Return Value true if lhs is greater than or equal to rhs; otherwise, false. Discussion This is the default implementation of the greater-than-or-equal-to operator (>=) for any type that conforms to Comparable.","title":">=(_:_:)","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/_=(_:_:)-9tu3k"}},"kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/==(_:_:)","interfaceLanguage":"swift"}},"headings":[],"kind":"symbol","rawIndexableTextContent":" ","summary":"","title":"==(_:_:)"},{"headings":[],"kind":"symbol","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Fork\/main"},"type":"topLevelPage"},"title":"main","summary":"The only fork created by default. All other forkes can be merged with the main, but not directly with each other.. It acts as the central hub of the wheel of forks.","rawIndexableTextContent":"The only fork created by default. All other forkes can be merged with the main, but not directly with each other.. It acts as the central hub of the wheel of forks. "},{"summary":"","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/forks","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","kind":"symbol","title":"forks"},{"title":"==(_:_:)","summary":"By default, resource content is treated as not being equal if we can’t test it.","headings":[],"kind":"symbol","rawIndexableTextContent":"By default, resource content is treated as not being equal if we can’t test it. ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/==(_:_:)-227ny","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"summary":"","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/init(from:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","kind":"symbol","title":"init(from:)"},{"summary":"All forks in the resource, including the main fork, in no particular order","kind":"symbol","headings":[],"rawIndexableTextContent":"All forks in the resource, including the main fork, in no particular order ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/forks"}},"title":"forks"},{"summary":"","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/load()-3oha2","interfaceLanguage":"swift"}},"headings":[],"title":"load()","rawIndexableTextContent":" ","kind":"symbol"},{"kind":"symbol","title":"init(repository:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/init(repository:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"headings":[],"summary":"Initialize the ForkedResource with a repository. If the repository is new, and has no main fork, one will be added with an initial commit.","rawIndexableTextContent":"Initialize the ForkedResource with a repository. If the repository is new, and has no main fork, one will be added with an initial commit. "},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/content(of:at:)"}},"rawIndexableTextContent":" ","title":"content(of:at:)","headings":[],"kind":"symbol","summary":""},{"rawIndexableTextContent":" ","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Commit\/==(_:_:)"},"type":"topLevelPage"},"headings":[],"title":"==(_:_:)","summary":"","kind":"symbol"},{"location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-1nziq","interfaceLanguage":"swift"},"type":"topLevelPage"},"title":"...(_:)","summary":"Returns a partial range up to, and including, its upper bound.","kind":"symbol","headings":["Discussion"],"rawIndexableTextContent":"Returns a partial range up to, and including, its upper bound.  The upper bound for the range. Discussion Use the prefix closed range operator (prefix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeThrough<Double> instance that includes any value less than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the start of the collection up to, and including, the partial range’s upper bound.  maximum must compare equal to itself (i.e. cannot be NaN)."},{"headings":[],"summary":"Delete an existing fork. If the fork does not exist, it will throw.","kind":"symbol","rawIndexableTextContent":"Delete an existing fork. If the fork does not exist, it will throw. ","title":"delete(_:)","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/delete(_:)","interfaceLanguage":"swift"}}},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/create(_:)"},"type":"topLevelPage"},"title":"create(_:)","kind":"symbol","summary":"Create a new fork.Will throw if a fork with the same name already exists.","headings":[],"rawIndexableTextContent":"Create a new fork.Will throw if a fork with the same name already exists. "},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/!=(_:_:)","interfaceLanguage":"swift"}},"kind":"symbol","headings":["Discussion"],"rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal."},{"title":"count","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/count"}},"headings":[],"rawIndexableTextContent":" ","summary":"","kind":"symbol"},{"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/changeStream"}},"kind":"symbol","title":"changeStream","headings":[],"rawIndexableTextContent":"Creates and returns an AsyncStream which provides a stream of all changes. It fires for any change to any fork. ","summary":"Creates and returns an AsyncStream which provides a stream of all changes. It fires for any change to any fork."},{"title":"create(_:withInitialCommit:)","summary":"Creates a fork providing an initial commit to populate it with. Throws if the fork is already present.","kind":"symbol","headings":[],"rawIndexableTextContent":"Creates a fork providing an initial commit to populate it with. Throws if the fork is already present. ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Repository\/create(_:withInitialCommit:)"}}},{"headings":["Discussion"],"rawIndexableTextContent":"Returns a partial range extending upward from a lower bound.  The lower bound for the range. Discussion Use the postfix range operator (postfix ...) to create a partial range of any type that conforms to the Comparable protocol. This example creates a PartialRangeFrom<Double> instance that includes any value greater than or equal to 5.0.  You can use this type of partial range of a collection’s indices to represent the range from the partial range’s lower bound up to the end of the collection.  minimum must compare equal to itself (i.e. cannot be NaN).","summary":"Returns a partial range extending upward from a lower bound.","title":"...(_:)","kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Version\/...(_:)-3z0z5","interfaceLanguage":"swift"}}},{"headings":[],"summary":"","rawIndexableTextContent":" ","title":"fork","kind":"symbol","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkChange\/fork","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/content(of:)","interfaceLanguage":"swift"}},"title":"content(of:)","headings":[],"kind":"symbol","rawIndexableTextContent":"This reads the repo, determining the most recent commit associated with the fork. Note that this is not necessarily a commit stored in the fork of the repo itself. If the fork is fully merged with main, the repo fork itself may be empty (to save space) and the current commit may actually be returned from .main. ","summary":"This reads the repo, determining the most recent commit associated with the fork. Note that this is not necessarily a commit stored in the fork of the repo itself. If the fork is fully merged with main, the repo fork itself may be empty (to save space) and the current commit may actually be returned from .main."},{"title":"mostRecentCommit(of:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mostRecentCommit(of:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"kind":"symbol","headings":[],"rawIndexableTextContent":"Returns the most recent (current) commit of the Fork. Note that this may not actually be from the corresponding fork of the repository. In particular, if a repository fork is empty, it is considered to share the same version as the main fork, and the main fork commit will be returned. ","summary":"Returns the most recent (current) commit of the Fork. Note that this may not actually be from the corresponding fork of the repository. In particular, if a repository fork is empty, it is considered to share the same version as the main fork, and the main fork commit will be returned."},{"kind":"symbol","title":"mostRecentVersion(of:)","summary":"Returns the most recent (current) version of the Fork. Note that this may not actually be from a commit in the corresponding fork of the repository. In particular, if a repository fork is empty, it is considered to share the same version as the main fork, and the main fork version will be returned.","headings":[],"location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mostRecentVersion(of:)"}},"rawIndexableTextContent":"Returns the most recent (current) version of the Fork. Note that this may not actually be from a commit in the corresponding fork of the repository. In particular, if a repository fork is empty, it is considered to share the same version as the main fork, and the main fork version will be returned. "},{"kind":"symbol","summary":"Persist using Codable","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/init(managedFileURL:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":"Persist using Codable ","title":"init(managedFileURL:)"},{"title":"timestamp","headings":[],"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/Version\/timestamp"}},"kind":"symbol","summary":""},{"headings":[],"summary":"For Mergeable types, we ask the Resource to do the merging itself","kind":"symbol","rawIndexableTextContent":"For Mergeable types, we ask the Resource to do the merging itself ","title":"mergedContent(forConflicting:withCommonAncestor:)","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/mergedContent(forConflicting:withCommonAncestor:)-2397t","interfaceLanguage":"swift"},"type":"topLevelPage"}},{"headings":[],"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ConflictingCommits\/dominant","interfaceLanguage":"swift"}},"kind":"symbol","title":"dominant","summary":""},{"summary":"","headings":[],"rawIndexableTextContent":" ","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/AtomicRepository\/persist()-6pvpe"}},"title":"persist()","kind":"symbol"},{"headings":[],"title":"Error.attemptToDeleteProtectedFork(_:)","kind":"symbol","rawIndexableTextContent":" ","location":{"reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Error\/attemptToDeleteProtectedFork(_:)","interfaceLanguage":"swift"},"type":"topLevelPage"},"summary":""},{"title":"ChangeStream","kind":"symbol","location":{"type":"topLevelPage","reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ChangeStream"}},"rawIndexableTextContent":" ","summary":"","headings":[]},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergingStrategy","interfaceLanguage":"swift"}},"kind":"article","title":"Merging Strategies","summary":"Learn about different strategies for merging forked data.","headings":["Overview"],"rawIndexableTextContent":"Learn about different strategies for merging forked data. Overview This article explains the various merging strategies available in Forked."},{"kind":"symbol","rawIndexableTextContent":"Returns a Boolean value indicating whether two values are not equal.  A value to compare. Another value to compare. Discussion Inequality is the inverse of equality. For any values a and b, a != b implies that a == b is false. This is the default implementation of the not-equal-to operator (!=) for any type that conforms to Equatable.","title":"!=(_:_:)","summary":"Returns a Boolean value indicating whether two values are not equal.","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/!=(_:_:)","interfaceLanguage":"swift"}},"headings":["Discussion"]},{"title":"resource","kind":"symbol","summary":"","headings":[],"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/resource"},"type":"topLevelPage"},"rawIndexableTextContent":" "},{"kind":"symbol","summary":"Adds a new commit with content .none. This is like setting the content to nil. Note that this does not remove the fork, and the fork does still have commits. However, the value of the most recent commit will be .none, to indicate the absence of a resource. (This construction is sometimes referred to as a “tombstone”. It is a commit that indicates that something has been removed.)","rawIndexableTextContent":"Adds a new commit with content .none. This is like setting the content to nil. Note that this does not remove the fork, and the fork does still have commits. However, the value of the most recent commit will be .none, to indicate the absence of a resource. (This construction is sometimes referred to as a “tombstone”. It is a commit that indicates that something has been removed.) ","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/removeContent(from:)","interfaceLanguage":"swift"}},"headings":[],"title":"removeContent(from:)"},{"kind":"symbol","headings":[],"rawIndexableTextContent":"No action was taken. The two forks were already at the same version. ","summary":"No action was taken. The two forks were already at the same version.","title":"MergeAction.none","location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/MergeAction\/none"},"type":"topLevelPage"}},{"title":"merged(withSubordinate:commonAncestor:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/Mergeable\/merged(withSubordinate:commonAncestor:)","interfaceLanguage":"swift"}},"rawIndexableTextContent":" ","kind":"symbol","summary":""},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/CommitContent\/Equatable-Implementations"},"type":"topLevelPage"},"summary":"","kind":"article","headings":[],"rawIndexableTextContent":"","title":"Equatable Implementations"},{"location":{"reference":{"interfaceLanguage":"swift","url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource"},"type":"topLevelPage"},"summary":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and provides a systematic approach for merging changes, with support for 3-way merging.","kind":"symbol","rawIndexableTextContent":"This manages forks of a resource. It facilitiates concurrent changes to a single resource, and provides a systematic approach for merging changes, with support for 3-way merging. ","headings":[],"title":"ForkedResource"},{"kind":"symbol","location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Forked\/documentation\/Forked\/ForkedResource\/update(_:with:)","interfaceLanguage":"swift"}},"headings":[],"rawIndexableTextContent":"Update the contents of a fork with a new resource value. Will create a commit, and return the Version. ","summary":"Update the contents of a fork with a new resource value. Will create a commit, and return the Version.","title":"update(_:with:)"}]